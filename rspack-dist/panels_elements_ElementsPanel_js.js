"use strict";
(self['webpackChunk'] = self['webpackChunk'] || []).push([["panels_elements_ElementsPanel_js"], {
"./models/workspace_diff/workspace_diff.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WorkspaceDiff: function() { return /* reexport module object */ _WorkspaceDiff_js__WEBPACK_IMPORTED_MODULE_0__; }
});
/* harmony import */var _WorkspaceDiff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WorkspaceDiff.js */ "./models/workspace_diff/WorkspaceDiff.js");
// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

 //# sourceMappingURL=workspace_diff.js.map


}),
"./panels/elements/AccessibilityTreeView.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccessibilityTreeView: function() { return AccessibilityTreeView; }
});
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui/components/tree_outline/tree_outline.js */ "./ui/components/tree_outline/tree_outline.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _AccessibilityTreeUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AccessibilityTreeUtils.js */ "./panels/elements/AccessibilityTreeUtils.js");
/* harmony import */var _accessibilityTreeView_css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./accessibilityTreeView.css.js */ "./panels/elements/accessibilityTreeView.css.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var AccessibilityTreeView = /*#__PURE__*/ function(_UI_Widget_VBox) {
    "use strict";
    _inherits(AccessibilityTreeView, _UI_Widget_VBox);
    var _super = _create_super(AccessibilityTreeView);
    function AccessibilityTreeView(toggleButton, accessibilityTreeComponent) {
        _class_call_check(this, AccessibilityTreeView);
        var _this;
        _this = _super.call(this);
        _define_property(_assert_this_initialized(_this), "accessibilityTreeComponent", void 0);
        _define_property(_assert_this_initialized(_this), "toggleButton", void 0);
        _define_property(_assert_this_initialized(_this), "inspectedDOMNode", null);
        _define_property(_assert_this_initialized(_this), "root", null);
        // toggleButton is bound to a click handler on ElementsPanel to switch between the DOM tree
        // and accessibility tree views.
        _this.toggleButton = toggleButton;
        _this.accessibilityTreeComponent = accessibilityTreeComponent;
        var container = _this.contentElement.createChild('div');
        container.classList.add('accessibility-tree-view-container');
        container.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_3__.tree('full-accessibility')));
        container.appendChild(_this.toggleButton);
        container.appendChild(_this.accessibilityTreeComponent);
        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_0__.TargetManager.TargetManager.instance().observeModels(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_0__.AccessibilityModel.AccessibilityModel, _assert_this_initialized(_this), {
            scoped: true
        });
        // The DOM tree and accessibility are kept in sync as much as possible, so
        // on node selection, update the currently inspected node and reveal in the
        // DOM tree.
        _this.accessibilityTreeComponent.addEventListener('itemselected', function(event) {
            var evt = event;
            var axNode = evt.data.node.treeNodeData;
            if (!axNode.isDOMNode()) {
                return;
            }
            var deferredNode = axNode.deferredDOMNode();
            if (deferredNode) {
                deferredNode.resolve(function(domNode) {
                    if (domNode) {
                        _this.inspectedDOMNode = domNode;
                        void _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_6__.ElementsPanel.instance().revealAndSelectNode(domNode, true, false);
                    }
                });
            }
        });
        _this.accessibilityTreeComponent.addEventListener('itemmouseover', function(event) {
            var evt = event;
            evt.data.node.treeNodeData.highlightDOMNode();
        });
        _this.accessibilityTreeComponent.addEventListener('itemmouseout', function() {
            _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_0__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
        });
        return _this;
    }
    _create_class(AccessibilityTreeView, [
        {
            key: "wasShown",
            value: function wasShown() {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.refreshAccessibilityTree()
                                ];
                            case 1:
                                _state.sent();
                                if (!_this.inspectedDOMNode) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    _this.loadSubTreeIntoAccessibilityModel(_this.inspectedDOMNode)
                                ];
                            case 2:
                                _state.sent();
                                _state.label = 3;
                            case 3:
                                _this.registerCSSFiles([
                                    _accessibilityTreeView_css_js__WEBPACK_IMPORTED_MODULE_5__["default"]
                                ]);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "refreshAccessibilityTree",
            value: function refreshAccessibilityTree() {
                var _this = this;
                return _async_to_generator(function() {
                    var _SDK_FrameManager_FrameManager_instance_getOutermostFrame, frameId;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!!_this.root) return [
                                    3,
                                    2
                                ];
                                frameId = (_SDK_FrameManager_FrameManager_instance_getOutermostFrame = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_0__.FrameManager.FrameManager.instance().getOutermostFrame()) === null || _SDK_FrameManager_FrameManager_instance_getOutermostFrame === void 0 ? void 0 : _SDK_FrameManager_FrameManager_instance_getOutermostFrame.id;
                                if (!frameId) {
                                    throw Error('No top frame');
                                }
                                return [
                                    4,
                                    _AccessibilityTreeUtils_js__WEBPACK_IMPORTED_MODULE_4__.getRootNode(frameId)
                                ];
                            case 1:
                                _this.root = _state.sent();
                                if (!_this.root) {
                                    throw Error('No root');
                                }
                                _state.label = 2;
                            case 2:
                                return [
                                    4,
                                    _this.renderTree()
                                ];
                            case 3:
                                _state.sent();
                                return [
                                    4,
                                    _this.accessibilityTreeComponent.expandRecursively(1)
                                ];
                            case 4:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "renderTree",
            value: function renderTree() {
                var _this = this;
                return _async_to_generator(function() {
                    var treeData;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.root) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    _AccessibilityTreeUtils_js__WEBPACK_IMPORTED_MODULE_4__.sdkNodeToAXTreeNodes(_this.root)
                                ];
                            case 1:
                                treeData = _state.sent();
                                _this.accessibilityTreeComponent.data = {
                                    defaultRenderer: _AccessibilityTreeUtils_js__WEBPACK_IMPORTED_MODULE_4__.accessibilityNodeRenderer,
                                    tree: treeData,
                                    filter: function(node) {
                                        var _node_role, _node_name;
                                        return node.ignored() || ((_node_role = node.role()) === null || _node_role === void 0 ? void 0 : _node_role.value) === 'generic' && !((_node_name = node.name()) === null || _node_name === void 0 ? void 0 : _node_name.value) ? "FLATTEN" /* TreeOutline.TreeOutline.FilterOption.FLATTEN */  : "SHOW" /* TreeOutline.TreeOutline.FilterOption.SHOW */ ;
                                    }
                                };
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "loadSubTreeIntoAccessibilityModel",
            value: // Given a selected DOM node, asks the model to load the missing subtree from the root to the
            // selected node and then re-renders the tree.
            function loadSubTreeIntoAccessibilityModel(selectedNode) {
                var _this = this;
                return _async_to_generator(function() {
                    var ancestors, inspectedAXNode;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _AccessibilityTreeUtils_js__WEBPACK_IMPORTED_MODULE_4__.getNodeAndAncestorsFromDOMNode(selectedNode)
                                ];
                            case 1:
                                ancestors = _state.sent();
                                inspectedAXNode = ancestors.find(function(node) {
                                    return node.backendDOMNodeId() === selectedNode.backendNodeId();
                                });
                                if (!inspectedAXNode) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    _this.accessibilityTreeComponent.expandNodeIds(ancestors.map(function(node) {
                                        return node.getFrameId() + '#' + node.id();
                                    }))
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    4,
                                    _this.accessibilityTreeComponent.focusNodeId(_AccessibilityTreeUtils_js__WEBPACK_IMPORTED_MODULE_4__.getNodeId(inspectedAXNode))
                                ];
                            case 3:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "revealAndSelectNode",
            value: // A node was revealed through the elements picker.
            function revealAndSelectNode(inspectedNode) {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (inspectedNode === _this.inspectedDOMNode) {
                                    return [
                                        2
                                    ];
                                }
                                _this.inspectedDOMNode = inspectedNode;
                                if (!_this.isShowing()) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    _this.loadSubTreeIntoAccessibilityModel(inspectedNode)
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "selectedNodeChanged",
            value: // Selected node in the DOM tree has changed.
            function selectedNodeChanged(inspectedNode) {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        if (_this.isShowing() || inspectedNode === _this.inspectedDOMNode) {
                            return [
                                2
                            ];
                        }
                        if (inspectedNode.ownerDocument && (inspectedNode.nodeName() === 'HTML' || inspectedNode.nodeName() === 'BODY')) {
                            _this.inspectedDOMNode = inspectedNode.ownerDocument;
                        } else {
                            _this.inspectedDOMNode = inspectedNode;
                        }
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "treeUpdated",
            value: function treeUpdated(param) {
                var data = param.data;
                var _SDK_FrameManager_FrameManager_instance_getOutermostFrame, _data_root;
                if (!data.root) {
                    void this.renderTree();
                    return;
                }
                var outermostFrameId = (_SDK_FrameManager_FrameManager_instance_getOutermostFrame = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_0__.FrameManager.FrameManager.instance().getOutermostFrame()) === null || _SDK_FrameManager_FrameManager_instance_getOutermostFrame === void 0 ? void 0 : _SDK_FrameManager_FrameManager_instance_getOutermostFrame.id;
                if (((_data_root = data.root) === null || _data_root === void 0 ? void 0 : _data_root.getFrameId()) !== outermostFrameId) {
                    void this.renderTree();
                    return;
                }
                this.root = data.root;
                void this.accessibilityTreeComponent.collapseAllNodes();
                void this.refreshAccessibilityTree();
            }
        },
        {
            key: "modelAdded",
            value: function modelAdded(model) {
                model.addEventListener("TreeUpdated" /* SDK.AccessibilityModel.Events.TreeUpdated */ , this.treeUpdated, this);
            }
        },
        {
            key: "modelRemoved",
            value: function modelRemoved(model) {
                model.removeEventListener("TreeUpdated" /* SDK.AccessibilityModel.Events.TreeUpdated */ , this.treeUpdated, this);
            }
        }
    ]);
    return AccessibilityTreeView;
} //# sourceMappingURL=AccessibilityTreeView.js.map
(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_2__.Widget.VBox);


}),
"./panels/elements/ComputedStyleWidget.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ComputedStyleWidget: function() { return ComputedStyleWidget; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/components/tree_outline/tree_outline.js */ "./ui/components/tree_outline/tree_outline.js");
/* harmony import */var _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/legacy/components/inline_editor/inline_editor.js */ "./ui/legacy/components/inline_editor/inline_editor.js");
/* harmony import */var _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ui/legacy/components/utils/utils.js */ "./ui/legacy/components/utils/utils.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/lit-html/lit-html.js */ "./ui/lit-html/lit-html.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _ComputedStyleModel_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ComputedStyleModel.js */ "./panels/elements/ComputedStyleModel.js");
/* harmony import */var _computedStyleSidebarPane_css_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./computedStyleSidebarPane.css.js */ "./panels/elements/computedStyleSidebarPane.css.js");
/* harmony import */var _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ImagePreviewPopover.js */ "./panels/elements/ImagePreviewPopover.js");
/* harmony import */var _PlatformFontsWidget_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./PlatformFontsWidget.js */ "./panels/elements/PlatformFontsWidget.js");
/* harmony import */var _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./PropertyMatchers.js */ "./panels/elements/PropertyMatchers.js");
/* harmony import */var _PropertyNameCategories_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PropertyNameCategories.js */ "./panels/elements/PropertyNameCategories.js");
/* harmony import */var _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./PropertyRenderer.js */ "./panels/elements/PropertyRenderer.js");
/* harmony import */var _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./StylePropertiesSection.js */ "./panels/elements/StylePropertiesSection.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*
 * Copyright (C) 2007 Apple Inc.  All rights reserved.
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _tagged_template_literal(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function _ts_values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function _templateObject() {
    var data = _tagged_template_literal([
        "<",
        "\n        .traceable=",
        "\n        .inherited=",
        "\n        @oncontextmenu=",
        "\n        @onnavigatetosource=",
        ">\n          ",
        "\n          ",
        "\n      </",
        ">"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject1() {
    var data = _tagged_template_literal([
        "",
        ""
    ]);
    _templateObject1 = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject2() {
    var data = _tagged_template_literal([
        '<span style="cursor: text; color: var(--sys-color-token-subtle);">',
        "</span>"
    ]);
    _templateObject2 = function _templateObject() {
        return data;
    };
    return data;
}


















var UIStrings = {
    /**
     * @description Text for a checkbox setting that controls whether the user-supplied filter text
     * excludes all CSS propreties which are filtered out, or just greys them out. In Computed Style
     * Widget of the Elements panel
     */ showAll: 'Show all',
    /**
     * @description Text for a checkbox setting that controls whether similar CSS properties should be
     * grouped together or not. In Computed Style Widget of the Elements panel.
     */ group: 'Group',
    /** [
     * @description Text shown to the user when a filter is applied to the computed CSS properties, but
     * no properties matched the filter and thus no results were returned.
     */ noMatchingProperty: 'No matching property',
    /**
     * @description Context menu item in Elements panel to navigate to the source code location of the
     * CSS selector that was clicked on.
     */ navigateToSelectorSource: 'Navigate to selector source',
    /**
     * @description Context menu item in Elements panel to navigate to the corresponding CSS style rule
     * for this computed property.
     */ navigateToStyle: 'Navigate to style'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/elements/ComputedStyleWidget.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
/**
 * Rendering a property's name and value is expensive, and each time we do it
 * it generates a new HTML element. If we call this directly from our Lit
 * components, we will generate a brand new DOM element on each single render.
 * This is very expensive and unneccessary - for the majority of re-renders a
 * property's name and value does not change. So we cache the rest of rendering
 * the name and value in a map, where the key used is a combination of the
 * property's name and value. This ensures that we only re-generate this element
 * if the node itself changes.
 * The resulting Element nodes are inserted into the ComputedStyleProperty
 * component via <slot>s, ensuring that Lit doesn't directly render/re-render
 * the element.
 */ var propertyContentsCache = new Map();
function renderPropertyContents(node, propertyName, propertyValue) {
    var cacheKey = propertyName + ':' + propertyValue;
    var valueFromCache = propertyContentsCache.get(cacheKey);
    if (valueFromCache) {
        return valueFromCache;
    }
    var name = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.Renderer.renderNameElement(propertyName);
    name.slot = 'name';
    var value = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.Renderer.renderValueElement(propertyName, propertyValue, [
        new ColorRenderer(),
        new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.URLRenderer(null, node),
        new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.StringRenderer()
    ]);
    value.slot = 'value';
    propertyContentsCache.set(cacheKey, {
        name: name,
        value: value
    });
    return {
        name: name,
        value: value
    };
}
/**
 * Note: this function is called for each tree node on each render, so we need
 * to ensure nothing expensive runs here, or if it does it is safely cached.
 **/ var createPropertyElement = function(node, propertyName, propertyValue, traceable, inherited, activeProperty, onContextMenu) {
    var _renderPropertyContents = renderPropertyContents(node, propertyName, propertyValue), name = _renderPropertyContents.name, value = _renderPropertyContents.value;
    // clang-format off
    return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.html(_templateObject(), _components_components_js__WEBPACK_IMPORTED_MODULE_9__.ComputedStyleProperty.ComputedStyleProperty.litTagName, traceable, inherited, onContextMenu, function(event) {
        if (activeProperty) {
            navigateToSource(activeProperty, event);
        }
    }, name, value, _components_components_js__WEBPACK_IMPORTED_MODULE_9__.ComputedStyleProperty.ComputedStyleProperty.litTagName);
// clang-format on
};
var createTraceElement = function(node, property, isPropertyOverloaded, matchedStyles, linkifier) {
    var trace = new _components_components_js__WEBPACK_IMPORTED_MODULE_9__.ComputedStyleTrace.ComputedStyleTrace();
    var valueElement = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.Renderer.renderValueElement(property.name, property.value, [
        new ColorRenderer(),
        new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.URLRenderer(null, node),
        new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_16__.StringRenderer()
    ]);
    valueElement.slot = 'trace-value';
    trace.appendChild(valueElement);
    var rule = property.ownerStyle.parentRule;
    var ruleOriginNode;
    if (rule) {
        ruleOriginNode = _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_17__.StylePropertiesSection.createRuleOriginNode(matchedStyles, linkifier, rule);
    }
    trace.data = {
        selector: rule ? rule.selectorText() : 'element.style',
        active: !isPropertyOverloaded,
        onNavigateToSource: navigateToSource.bind(null, property),
        ruleOriginNode: ruleOriginNode
    };
    return trace;
};
var ColorRenderer = /*#__PURE__*/ function() {
    "use strict";
    function ColorRenderer() {
        _class_call_check(this, ColorRenderer);
    }
    _create_class(ColorRenderer, [
        {
            key: "render",
            value: function render(match, context) {
                var color = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(match.text);
                if (!color) {
                    return [
                        document.createTextNode(match.text)
                    ];
                }
                var swatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_5__.ColorSwatch.ColorSwatch();
                swatch.setReadonly(true);
                swatch.renderColor(color);
                var valueElement = document.createElement('span');
                valueElement.textContent = match.text;
                swatch.append(valueElement);
                swatch.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_5__.ColorSwatch.ColorChangedEvent.eventName, function(event) {
                    var color = event.data.color;
                    var _color_getAuthoredText;
                    valueElement.textContent = (_color_getAuthoredText = color.getAuthoredText()) !== null && _color_getAuthoredText !== void 0 ? _color_getAuthoredText : color.asString();
                });
                context.addControl('color', swatch);
                return [
                    swatch
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_14__.ColorMatcher();
            }
        }
    ]);
    return ColorRenderer;
}();
var navigateToSource = function(cssProperty, event) {
    if (!event) {
        return;
    }
    void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(cssProperty);
    event.consume(true);
};
var propertySorter = function(propA, propB) {
    if (propA.startsWith('--') !== propB.startsWith('--')) {
        return propA.startsWith('--') ? 1 : -1;
    }
    if (propA.startsWith('-webkit') !== propB.startsWith('-webkit')) {
        return propA.startsWith('-webkit') ? 1 : -1;
    }
    var canonicalA = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.CSSMetadata.cssMetadata().canonicalPropertyName(propA);
    var canonicalB = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.CSSMetadata.cssMetadata().canonicalPropertyName(propB);
    return _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_2__.StringUtilities.compare(canonicalA, canonicalB);
};
var _computedStylesTree = /*#__PURE__*/ new WeakMap(), _treeData = /*#__PURE__*/ new WeakMap();
var ComputedStyleWidget = /*#__PURE__*/ function(_UI_ThrottledWidget_ThrottledWidget) {
    "use strict";
    _inherits(ComputedStyleWidget, _UI_ThrottledWidget_ThrottledWidget);
    var _super = _create_super(ComputedStyleWidget);
    function ComputedStyleWidget() {
        _class_call_check(this, ComputedStyleWidget);
        var _this;
        _this = _super.call(this, true);
        _define_property(_assert_this_initialized(_this), "computedStyleModel", void 0);
        _define_property(_assert_this_initialized(_this), "showInheritedComputedStylePropertiesSetting", void 0);
        _define_property(_assert_this_initialized(_this), "groupComputedStylesSetting", void 0);
        _define_property(_assert_this_initialized(_this), "input", void 0);
        _define_property(_assert_this_initialized(_this), "filterRegex", void 0);
        _define_property(_assert_this_initialized(_this), "noMatchesElement", void 0);
        _define_property(_assert_this_initialized(_this), "linkifier", void 0);
        _define_property(_assert_this_initialized(_this), "imagePreviewPopover", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _computedStylesTree, {
            writable: true,
            value: new _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_4__.TreeOutline.TreeOutline()
        });
        _class_private_field_init(_assert_this_initialized(_this), _treeData, {
            writable: true,
            value: void 0
        });
        _this.contentElement.classList.add('styles-sidebar-computed-style-widget');
        _this.computedStyleModel = new _ComputedStyleModel_js__WEBPACK_IMPORTED_MODULE_10__.ComputedStyleModel();
        _this.computedStyleModel.addEventListener("ComputedStyleChanged" /* Events.ComputedStyleChanged */ , _this.update, _assert_this_initialized(_this));
        _this.showInheritedComputedStylePropertiesSetting = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().createSetting('show-inherited-computed-style-properties', false);
        _this.showInheritedComputedStylePropertiesSetting.addChangeListener(_this.update.bind(_assert_this_initialized(_this)));
        _this.groupComputedStylesSetting = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().createSetting('group-computed-styles', false);
        _this.groupComputedStylesSetting.addChangeListener(function() {
            _this.update();
        });
        var hbox = _this.contentElement.createChild('div', 'hbox styles-sidebar-pane-toolbar');
        var toolbar = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__.Toolbar.Toolbar('styles-pane-toolbar', hbox);
        var filterInput = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__.Toolbar.ToolbarFilter(undefined, 1, 1, undefined, undefined, false);
        filterInput.addEventListener("TextChanged" /* UI.Toolbar.ToolbarInput.Event.TextChanged */ , _this.onFilterChanged, _assert_this_initialized(_this));
        toolbar.appendToolbarItem(filterInput);
        _this.input = filterInput;
        _this.filterRegex = null;
        toolbar.appendToolbarItem(new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__.Toolbar.ToolbarSettingCheckbox(_this.showInheritedComputedStylePropertiesSetting, undefined, i18nString(UIStrings.showAll)));
        toolbar.appendToolbarItem(new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__.Toolbar.ToolbarSettingCheckbox(_this.groupComputedStylesSetting, undefined, i18nString(UIStrings.group)));
        _this.noMatchesElement = _this.contentElement.createChild('div', 'gray-info-message');
        _this.noMatchesElement.textContent = i18nString(UIStrings.noMatchingProperty);
        _this.contentElement.appendChild(_class_private_field_get(_assert_this_initialized(_this), _computedStylesTree));
        _this.linkifier = new _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__.Linkifier.Linkifier(maxLinkLength);
        _this.imagePreviewPopover = new _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_12__.ImagePreviewPopover(_this.contentElement, function(event) {
            var link = event.composedPath()[0];
            if (_instanceof(link, Element)) {
                return link;
            }
            return null;
        }, function() {
            return _this.computedStyleModel.node();
        });
        var fontsWidget = new _PlatformFontsWidget_js__WEBPACK_IMPORTED_MODULE_13__.PlatformFontsWidget(_this.computedStyleModel);
        fontsWidget.show(_this.contentElement);
        return _this;
    }
    _create_class(ComputedStyleWidget, [
        {
            key: "onResize",
            value: function onResize() {
                var isNarrow = this.contentElement.offsetWidth < 260;
                _class_private_field_get(this, _computedStylesTree).classList.toggle('computed-narrow', isNarrow);
            }
        },
        {
            key: "wasShown",
            value: function wasShown() {
                _get(_get_prototype_of(ComputedStyleWidget.prototype), "wasShown", this).call(this);
                this.registerCSSFiles([
                    _computedStyleSidebarPane_css_js__WEBPACK_IMPORTED_MODULE_11__["default"]
                ]);
            }
        },
        {
            key: "doUpdate",
            value: function doUpdate() {
                var _this = this;
                return _async_to_generator(function() {
                    var _ref, nodeStyles, matchedStyles, shouldGroupComputedStyles;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Promise.all([
                                        _this.computedStyleModel.fetchComputedStyle(),
                                        _this.fetchMatchedCascade()
                                    ])
                                ];
                            case 1:
                                _ref = _sliced_to_array.apply(void 0, [
                                    _state.sent(),
                                    2
                                ]), nodeStyles = _ref[0], matchedStyles = _ref[1];
                                if (!nodeStyles || !matchedStyles) {
                                    _this.noMatchesElement.classList.remove('hidden');
                                    return [
                                        2
                                    ];
                                }
                                shouldGroupComputedStyles = _this.groupComputedStylesSetting.get();
                                if (!shouldGroupComputedStyles) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    _this.rebuildGroupedList(nodeStyles, matchedStyles)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    3,
                                    5
                                ];
                            case 3:
                                return [
                                    4,
                                    _this.rebuildAlphabeticalList(nodeStyles, matchedStyles)
                                ];
                            case 4:
                                _state.sent();
                                _state.label = 5;
                            case 5:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchMatchedCascade",
            value: function fetchMatchedCascade() {
                var _this = this;
                return _async_to_generator(function() {
                    var node, cssModel;
                    function validateStyles(matchedStyles) {
                        return matchedStyles && matchedStyles.node() === this.computedStyleModel.node() ? matchedStyles : null;
                    }
                    return _ts_generator(this, function(_state) {
                        node = _this.computedStyleModel.node();
                        if (!node || !_this.computedStyleModel.cssModel()) {
                            return [
                                2,
                                null
                            ];
                        }
                        cssModel = _this.computedStyleModel.cssModel();
                        if (!cssModel) {
                            return [
                                2,
                                null
                            ];
                        }
                        return [
                            2,
                            cssModel.cachedMatchedCascadeForNode(node).then(validateStyles.bind(_this))
                        ];
                    });
                })();
            }
        },
        {
            key: "rebuildAlphabeticalList",
            value: function rebuildAlphabeticalList(nodeStyle, matchedStyles) {
                var _this = this;
                return _async_to_generator(function() {
                    var cssModel, uniqueProperties, node, propertyTraces, nonInheritedProperties, showInherited, tree, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, propertyName, propertyValue, canonicalName, isInherited, defaultRenderer;
                    return _ts_generator(this, function(_state) {
                        _this.imagePreviewPopover.hide();
                        _this.linkifier.reset();
                        cssModel = _this.computedStyleModel.cssModel();
                        if (!cssModel) {
                            return [
                                2
                            ];
                        }
                        uniqueProperties = _to_consumable_array(nodeStyle.computedStyle.keys());
                        uniqueProperties.sort(propertySorter);
                        node = nodeStyle.node;
                        propertyTraces = _this.computePropertyTraces(matchedStyles);
                        nonInheritedProperties = _this.computeNonInheritedProperties(matchedStyles);
                        showInherited = _this.showInheritedComputedStylePropertiesSetting.get();
                        tree = [];
                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(_iterator = uniqueProperties[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                propertyName = _step.value;
                                propertyValue = nodeStyle.computedStyle.get(propertyName) || '';
                                canonicalName = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.CSSMetadata.cssMetadata().canonicalPropertyName(propertyName);
                                isInherited = !nonInheritedProperties.has(canonicalName);
                                if (!showInherited && isInherited && !alwaysShownComputedProperties.has(propertyName)) {
                                    continue;
                                }
                                if (!showInherited && propertyName.startsWith('--')) {
                                    continue;
                                }
                                if (propertyName !== canonicalName && propertyValue === nodeStyle.computedStyle.get(canonicalName)) {
                                    continue;
                                }
                                tree.push(_this.buildTreeNode(propertyTraces, propertyName, propertyValue, isInherited));
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        defaultRenderer = _this.createTreeNodeRenderer(propertyTraces, node, matchedStyles);
                        _class_private_field_set(_this, _treeData, {
                            tree: tree,
                            compact: true,
                            defaultRenderer: defaultRenderer
                        });
                        _this.filterAlphabeticalList();
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "rebuildGroupedList",
            value: function rebuildGroupedList(nodeStyle, matchedStyles) {
                var _this = this;
                return _async_to_generator(function() {
                    var cssModel, node, propertyTraces, nonInheritedProperties, showInherited, propertiesByCategory, tree, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, propertyName, propertyValue, canonicalName, isInherited, categories, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, category, _propertiesByCategory_get, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2, defaultRenderer;
                    return _ts_generator(this, function(_state) {
                        _this.imagePreviewPopover.hide();
                        _this.linkifier.reset();
                        cssModel = _this.computedStyleModel.cssModel();
                        if (!nodeStyle || !matchedStyles || !cssModel) {
                            _this.noMatchesElement.classList.remove('hidden');
                            return [
                                2
                            ];
                        }
                        node = nodeStyle.node;
                        propertyTraces = _this.computePropertyTraces(matchedStyles);
                        nonInheritedProperties = _this.computeNonInheritedProperties(matchedStyles);
                        showInherited = _this.showInheritedComputedStylePropertiesSetting.get();
                        propertiesByCategory = new Map();
                        tree = [];
                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(_iterator = nodeStyle.computedStyle[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                _step_value = _sliced_to_array(_step.value, 2), propertyName = _step_value[0], propertyValue = _step_value[1];
                                canonicalName = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.CSSMetadata.cssMetadata().canonicalPropertyName(propertyName);
                                isInherited = !nonInheritedProperties.has(canonicalName);
                                if (!showInherited && isInherited && !alwaysShownComputedProperties.has(propertyName)) {
                                    continue;
                                }
                                if (!showInherited && propertyName.startsWith('--')) {
                                    continue;
                                }
                                if (propertyName !== canonicalName && propertyValue === nodeStyle.computedStyle.get(canonicalName)) {
                                    continue;
                                }
                                categories = (0,_PropertyNameCategories_js__WEBPACK_IMPORTED_MODULE_15__.categorizePropertyName)(propertyName);
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                try {
                                    for(_iterator1 = categories[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                        category = _step1.value;
                                        ;
                                        if (!propertiesByCategory.has(category)) {
                                            propertiesByCategory.set(category, []);
                                        }
                                        (_propertiesByCategory_get = propertiesByCategory.get(category)) === null || _propertiesByCategory_get === void 0 ? void 0 : _propertiesByCategory_get.push(propertyName);
                                    }
                                } catch (err) {
                                    _didIteratorError1 = true;
                                    _iteratorError1 = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                            _iterator1.return();
                                        }
                                    } finally{
                                        if (_didIteratorError1) {
                                            throw _iteratorError1;
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        _class_private_field_get(_this, _computedStylesTree).removeChildren();
                        _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                        try {
                            _loop = function() {
                                var category = _step2.value;
                                var properties = propertiesByCategory.get(category);
                                if (properties && properties.length > 0) {
                                    var propertyNodes = [];
                                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                    try {
                                        for(var _iterator = properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                            var propertyName = _step.value;
                                            var propertyValue = nodeStyle.computedStyle.get(propertyName) || '';
                                            var canonicalName = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.CSSMetadata.cssMetadata().canonicalPropertyName(propertyName);
                                            var isInherited = !nonInheritedProperties.has(canonicalName);
                                            propertyNodes.push(_this.buildTreeNode(propertyTraces, propertyName, propertyValue, isInherited));
                                        }
                                    } catch (err) {
                                        _didIteratorError = true;
                                        _iteratorError = err;
                                    } finally{
                                        try {
                                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                _iterator.return();
                                            }
                                        } finally{
                                            if (_didIteratorError) {
                                                throw _iteratorError;
                                            }
                                        }
                                    }
                                    tree.push({
                                        id: category,
                                        treeNodeData: {
                                            tag: 'category',
                                            name: category
                                        },
                                        children: /*#__PURE__*/ _async_to_generator(function() {
                                            return _ts_generator(this, function(_state) {
                                                return [
                                                    2,
                                                    propertyNodes
                                                ];
                                            });
                                        })
                                    });
                                }
                            };
                            for(_iterator2 = _PropertyNameCategories_js__WEBPACK_IMPORTED_MODULE_15__.DefaultCategoryOrder[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true)_loop();
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                    _iterator2.return();
                                }
                            } finally{
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                        defaultRenderer = _this.createTreeNodeRenderer(propertyTraces, node, matchedStyles);
                        _class_private_field_set(_this, _treeData, {
                            tree: tree,
                            compact: true,
                            defaultRenderer: defaultRenderer
                        });
                        return [
                            2,
                            _this.filterGroupLists()
                        ];
                    });
                })();
            }
        },
        {
            key: "buildTraceNode",
            value: function buildTraceNode(property) {
                var rule = property.ownerStyle.parentRule;
                return {
                    treeNodeData: {
                        tag: 'traceElement',
                        property: property,
                        rule: rule
                    },
                    id: ((rule === null || rule === void 0 ? void 0 : rule.origin) || '') + ': ' + property.ownerStyle.styleSheetId + (property.range || property.name)
                };
            }
        },
        {
            key: "createTreeNodeRenderer",
            value: function createTreeNodeRenderer(propertyTraces, domNode, matchedStyles) {
                var _this = this;
                return function(node) {
                    var data = node.treeNodeData;
                    if (data.tag === 'property') {
                        var trace = propertyTraces.get(data.propertyName);
                        var activeProperty = trace === null || trace === void 0 ? void 0 : trace.find(function(property) {
                            return matchedStyles.propertyState(property) === "Active" /* SDK.CSSMatchedStyles.PropertyState.Active */ ;
                        });
                        var propertyElement = createPropertyElement(domNode, data.propertyName, data.propertyValue, propertyTraces.has(data.propertyName), data.inherited, activeProperty, function(event) {
                            if (activeProperty) {
                                _this.handleContextMenuEvent(matchedStyles, activeProperty, event);
                            }
                        });
                        return propertyElement;
                    }
                    if (data.tag === 'traceElement') {
                        var isPropertyOverloaded = matchedStyles.propertyState(data.property) === "Overloaded" /* SDK.CSSMatchedStyles.PropertyState.Overloaded */ ;
                        var traceElement = createTraceElement(domNode, data.property, isPropertyOverloaded, matchedStyles, _this.linkifier);
                        traceElement.addEventListener('contextmenu', _this.handleContextMenuEvent.bind(_this, matchedStyles, data.property));
                        return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.html(_templateObject1(), traceElement);
                    }
                    return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.html(_templateObject2(), data.name);
                };
            }
        },
        {
            key: "buildTreeNode",
            value: function buildTreeNode(propertyTraces, propertyName, propertyValue, isInherited) {
                var treeNodeData = {
                    tag: 'property',
                    propertyName: propertyName,
                    propertyValue: propertyValue,
                    inherited: isInherited
                };
                var trace = propertyTraces.get(propertyName);
                if (!trace) {
                    return {
                        treeNodeData: treeNodeData,
                        jslogContext: propertyName,
                        id: propertyName
                    };
                }
                var _this = this;
                return {
                    treeNodeData: treeNodeData,
                    jslogContext: propertyName,
                    id: propertyName,
                    children: /*#__PURE__*/ _async_to_generator(function() {
                        return _ts_generator(this, function(_state) {
                            return [
                                2,
                                trace.map(_this.buildTraceNode)
                            ];
                        });
                    })
                };
            }
        },
        {
            key: "handleContextMenuEvent",
            value: function handleContextMenuEvent(matchedStyles, property, event) {
                var contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__.ContextMenu.ContextMenu(event);
                var rule = property.ownerStyle.parentRule;
                if (rule) {
                    var header = rule.styleSheetId ? matchedStyles.cssModel().styleSheetHeaderForId(rule.styleSheetId) : null;
                    if (header && !header.isAnonymousInlineStyleSheet()) {
                        contextMenu.defaultSection().appendItem(i18nString(UIStrings.navigateToSelectorSource), function() {
                            _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_17__.StylePropertiesSection.tryNavigateToRuleLocation(matchedStyles, rule);
                        }, {
                            jslogContext: 'navigate-to-selector-source'
                        });
                    }
                }
                contextMenu.defaultSection().appendItem(i18nString(UIStrings.navigateToStyle), function() {
                    return _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(property);
                }, {
                    jslogContext: 'navigate-to-style'
                });
                void contextMenu.show();
            }
        },
        {
            key: "computePropertyTraces",
            value: function computePropertyTraces(matchedStyles) {
                var result = new Map();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = matchedStyles.nodeStyles()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var style = _step.value;
                        var allProperties = style.allProperties();
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = allProperties[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var property = _step1.value;
                                if (!property.activeInStyle() || !matchedStyles.propertyState(property)) {
                                    continue;
                                }
                                if (!result.has(property.name)) {
                                    result.set(property.name, []);
                                }
                                // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration
                                // @ts-expect-error
                                result.get(property.name).push(property);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "computeNonInheritedProperties",
            value: function computeNonInheritedProperties(matchedStyles) {
                var result = new Set();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = matchedStyles.nodeStyles()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var style = _step.value;
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = style.allProperties()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var property = _step1.value;
                                if (!matchedStyles.propertyState(property)) {
                                    continue;
                                }
                                result.add(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.CSSMetadata.cssMetadata().canonicalPropertyName(property.name));
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "onFilterChanged",
            value: function onFilterChanged(event) {
                void this.filterComputedStyles(event.data ? new RegExp(_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_2__.StringUtilities.escapeForRegExp(event.data), 'i') : null);
            }
        },
        {
            key: "filterComputedStyles",
            value: function filterComputedStyles(regex) {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        _this.filterRegex = regex;
                        if (_this.groupComputedStylesSetting.get()) {
                            return [
                                2,
                                _this.filterGroupLists()
                            ];
                        }
                        return [
                            2,
                            _this.filterAlphabeticalList()
                        ];
                    });
                })();
            }
        },
        {
            key: "nodeFilter",
            value: function nodeFilter(node) {
                var regex = this.filterRegex;
                var data = node.treeNodeData;
                if (data.tag === 'property') {
                    var matched = !regex || regex.test(data.propertyName) || regex.test(data.propertyValue);
                    return matched;
                }
                return true;
            }
        },
        {
            key: "filterAlphabeticalList",
            value: function filterAlphabeticalList() {
                if (!_class_private_field_get(this, _treeData)) {
                    return;
                }
                var tree = _class_private_field_get(this, _treeData).tree.filter(this.nodeFilter.bind(this));
                _class_private_field_get(this, _computedStylesTree).data = {
                    tree: tree,
                    defaultRenderer: _class_private_field_get(this, _treeData).defaultRenderer,
                    compact: _class_private_field_get(this, _treeData).compact
                };
                this.noMatchesElement.classList.toggle('hidden', Boolean(tree.length));
            }
        },
        {
            key: "filterGroupLists",
            value: function filterGroupLists() {
                var _this = this;
                return _async_to_generator(function() {
                    var tree, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, err;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_class_private_field_get(_this, _treeData)) {
                                    return [
                                        2
                                    ];
                                }
                                tree = [];
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    6,
                                    7,
                                    8
                                ]);
                                _loop = function() {
                                    var group, data, properties, filteredChildren;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                group = _step.value;
                                                data = group.treeNodeData;
                                                if (data.tag !== 'category' || !group.children) {
                                                    return [
                                                        2,
                                                        "continue"
                                                    ];
                                                }
                                                return [
                                                    4,
                                                    group.children()
                                                ];
                                            case 1:
                                                properties = _state.sent();
                                                filteredChildren = properties.filter(_this.nodeFilter.bind(_this));
                                                if (filteredChildren.length) {
                                                    tree.push({
                                                        id: data.name,
                                                        treeNodeData: {
                                                            tag: 'category',
                                                            name: data.name
                                                        },
                                                        children: /*#__PURE__*/ _async_to_generator(function() {
                                                            return _ts_generator(this, function(_state) {
                                                                return [
                                                                    2,
                                                                    filteredChildren
                                                                ];
                                                            });
                                                        })
                                                    });
                                                }
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                };
                                _iterator = _class_private_field_get(_this, _treeData).tree[Symbol.iterator]();
                                _state.label = 2;
                            case 2:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    5
                                ];
                                return [
                                    5,
                                    _ts_values(_loop())
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    8
                                ];
                            case 7:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 8:
                                _class_private_field_get(_this, _computedStylesTree).data = {
                                    tree: tree,
                                    defaultRenderer: _class_private_field_get(_this, _treeData).defaultRenderer,
                                    compact: _class_private_field_get(_this, _treeData).compact
                                };
                                return [
                                    4,
                                    _class_private_field_get(_this, _computedStylesTree).expandRecursively(0)
                                ];
                            case 9:
                                _state.sent();
                                _this.noMatchesElement.classList.toggle('hidden', Boolean(tree.length));
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return ComputedStyleWidget;
}(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_7__.ThrottledWidget.ThrottledWidget);
var maxLinkLength = 30;
var alwaysShownComputedProperties = new Set([
    'display',
    'height',
    'width'
]); //# sourceMappingURL=ComputedStyleWidget.js.map


}),
"./panels/elements/DOMLinkifier.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Linkifier: function() { return Linkifier; },
  decorateNodeLabel: function() { return decorateNodeLabel; },
  linkifyDeferredNodeReference: function() { return linkifyDeferredNodeReference; },
  linkifyNodeReference: function() { return linkifyNodeReference; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _domLinkifier_css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./domLinkifier.css.js */ "./panels/elements/domLinkifier.css.js");
// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}






var UIStrings = {
    /**
     * @description Text displayed when trying to create a link to a node in the UI, but the node
     * location could not be found so we display this placeholder instead. Node refers to a DOM node.
     * This should be translated if appropriate.
     */ node: '<node>'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/elements/DOMLinkifier.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
var decorateNodeLabel = function decorateNodeLabel(node, parentElement, options) {
    var originalNode = node;
    var isPseudo = node.nodeType() === Node.ELEMENT_NODE && node.pseudoType();
    if (isPseudo && node.parentNode) {
        node = node.parentNode;
    }
    // Special case rendering the node links for view transition pseudo elements.
    // We don't include the ancestor name in the node link because
    // they always have the same ancestor. See crbug.com/340633630.
    if (node.isViewTransitionPseudoNode()) {
        var pseudoElement = parentElement.createChild('span', 'extra node-label-pseudo');
        var viewTransitionPseudoText = "::".concat(originalNode.pseudoType(), "(").concat(originalNode.pseudoIdentifier(), ")");
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createTextChild(pseudoElement, viewTransitionPseudoText);
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Tooltip.Tooltip.install(parentElement, options.tooltip || viewTransitionPseudoText);
        return;
    }
    var nameElement = parentElement.createChild('span', 'node-label-name');
    if (options.textContent) {
        nameElement.textContent = options.textContent;
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Tooltip.Tooltip.install(parentElement, options.tooltip || options.textContent);
        return;
    }
    var title = node.nodeNameInCorrectCase();
    nameElement.textContent = title;
    var idAttribute = node.getAttribute('id');
    if (idAttribute) {
        var idElement = parentElement.createChild('span', 'node-label-id');
        var part = '#' + idAttribute;
        title += part;
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createTextChild(idElement, part);
        // Mark the name as extra, since the ID is more important.
        nameElement.classList.add('extra');
    }
    var classAttribute = node.getAttribute('class');
    if (classAttribute) {
        var classes = classAttribute.split(/\s+/);
        if (classes.length) {
            var foundClasses = new Set();
            var classesElement = parentElement.createChild('span', 'extra node-label-class');
            for(var i = 0; i < classes.length; ++i){
                var className = classes[i];
                if (className && !foundClasses.has(className)) {
                    var part1 = '.' + className;
                    title += part1;
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createTextChild(classesElement, part1);
                    foundClasses.add(className);
                }
            }
        }
    }
    if (isPseudo) {
        var pseudoIdentifier = originalNode.pseudoIdentifier();
        var pseudoElement1 = parentElement.createChild('span', 'extra node-label-pseudo');
        var pseudoText = '::' + originalNode.pseudoType();
        if (pseudoIdentifier) {
            pseudoText += "(".concat(pseudoIdentifier, ")");
        }
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createTextChild(pseudoElement1, pseudoText);
        title += pseudoText;
    }
    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Tooltip.Tooltip.install(parentElement, options.tooltip || title);
};
var linkifyNodeReference = function linkifyNodeReference(node) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        tooltip: undefined,
        preventKeyboardFocus: undefined,
        textContent: undefined,
        isDynamicLink: false
    };
    if (!node) {
        return document.createTextNode(i18nString(UIStrings.node));
    }
    var root = document.createElement('span');
    root.classList.add('monospace');
    var shadowRoot = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createShadowRootWithCoreStyles(root, {
        cssFile: [
            _domLinkifier_css_js__WEBPACK_IMPORTED_MODULE_5__["default"]
        ],
        delegatesFocus: undefined
    });
    var link = shadowRoot.createChild('button', 'node-link text-button link-style');
    link.classList.toggle('dynamic-link', options.isDynamicLink);
    link.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_4__.link('node').track({
        click: true,
        keydown: 'Enter'
    })));
    decorateNodeLabel(node, link, options);
    link.addEventListener('click', function() {
        void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(node, false);
        return false;
    }, false);
    link.addEventListener('mouseover', node.highlight.bind(node, undefined), false);
    link.addEventListener('mouseleave', function() {
        return _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
    }, false);
    if (options.preventKeyboardFocus) {
        link.tabIndex = -1;
    }
    return root;
};
var linkifyDeferredNodeReference = function linkifyDeferredNodeReference(deferredNode) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        tooltip: undefined,
        preventKeyboardFocus: undefined
    };
    var root = document.createElement('div');
    var shadowRoot = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createShadowRootWithCoreStyles(root, {
        cssFile: [
            _domLinkifier_css_js__WEBPACK_IMPORTED_MODULE_5__["default"]
        ],
        delegatesFocus: undefined
    });
    var link = shadowRoot.createChild('button', 'node-link text-button link-style');
    link.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_4__.link('node').track({
        click: true
    })));
    link.createChild('slot');
    link.addEventListener('click', deferredNode.resolve.bind(deferredNode, onDeferredNodeResolved), false);
    link.addEventListener('mousedown', function(e) {
        return e.consume();
    }, false);
    if (options.preventKeyboardFocus) {
        link.tabIndex = -1;
    }
    function onDeferredNodeResolved(node) {
        void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(node);
    }
    return root;
};
var linkifierInstance;
var Linkifier = /*#__PURE__*/ function() {
    "use strict";
    function Linkifier() {
        _class_call_check(this, Linkifier);
    }
    _create_class(Linkifier, [
        {
            key: "linkify",
            value: function linkify(object, options) {
                if (_instanceof(object, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.DOMModel.DOMNode)) {
                    return linkifyNodeReference(object, options);
                }
                if (_instanceof(object, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.DOMModel.DeferredDOMNode)) {
                    return linkifyDeferredNodeReference(object, options);
                }
                throw new Error('Can\'t linkify non-node');
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!linkifierInstance || forceNew) {
                    linkifierInstance = new Linkifier();
                }
                return linkifierInstance;
            }
        }
    ]);
    return Linkifier;
} //# sourceMappingURL=DOMLinkifier.js.map
();


}),
"./panels/elements/ElementsPanel.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CSSPropertyRevealer: function() { return CSSPropertyRevealer; },
  ContextMenuProvider: function() { return ContextMenuProvider; },
  DOMNodeRevealer: function() { return DOMNodeRevealer; },
  ElementsActionDelegate: function() { return ElementsActionDelegate; },
  ElementsPanel: function() { return ElementsPanel; },
  PseudoStateMarkerDecorator: function() { return PseudoStateMarkerDecorator; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/host/host.js */ "./core/host/host.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */var _core_root_root_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/root/root.js */ "./core/root/root.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _models_extensions_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../models/extensions/extensions.js */ "./models/extensions/extensions.js");
/* harmony import */var _ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/components/buttons/buttons.js */ "./ui/components/buttons/buttons.js");
/* harmony import */var _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/components/tree_outline/tree_outline.js */ "./ui/components/tree_outline/tree_outline.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _AccessibilityTreeView_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./AccessibilityTreeView.js */ "./panels/elements/AccessibilityTreeView.js");
/* harmony import */var _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ColorSwatchPopoverIcon.js */ "./panels/elements/ColorSwatchPopoverIcon.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _ComputedStyleWidget_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ComputedStyleWidget.js */ "./panels/elements/ComputedStyleWidget.js");
/* harmony import */var _elementsPanel_css_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./elementsPanel.css.js */ "./panels/elements/elementsPanel.css.js");
/* harmony import */var _ElementsTreeElementHighlighter_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ElementsTreeElementHighlighter.js */ "./panels/elements/ElementsTreeElementHighlighter.js");
/* harmony import */var _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ElementsTreeOutline.js */ "./panels/elements/ElementsTreeOutline.js");
/* harmony import */var _MetricsSidebarPane_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./MetricsSidebarPane.js */ "./panels/elements/MetricsSidebarPane.js");
/* harmony import */var _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./StylesSidebarPane.js */ "./panels/elements/StylesSidebarPane.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*
 * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.
 * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




















var UIStrings = {
    /**
     * @description Placeholder text for the search box the Elements Panel. Selector refers to CSS
     * selectors.
     */ findByStringSelectorOrXpath: 'Find by string, selector, or `XPath`',
    /**
     * @description Button text for a button that takes the user to the Accessibility Tree View from the
     * DOM tree view, in the Elements panel.
     */ switchToAccessibilityTreeView: 'Switch to Accessibility Tree view',
    /**
     * @description Button text for a button that takes the user to the DOM tree view from the
     * Accessibility Tree View, in the Elements panel.
     */ switchToDomTreeView: 'Switch to DOM Tree view',
    /**
     * @description Tooltip for the the Computed Styles sidebar toggle in the Styles pane. Command to
     * open/show the sidebar.
     */ showComputedStylesSidebar: 'Show Computed Styles sidebar',
    /**
     * @description Tooltip for the the Computed Styles sidebar toggle in the Styles pane. Command to
     * close/hide the sidebar.
     */ hideComputedStylesSidebar: 'Hide Computed Styles sidebar',
    /**
     * @description Screen reader announcement when the computed styles sidebar is shown in the Elements panel.
     */ computedStylesShown: 'Computed Styles sidebar shown',
    /**
     * @description Screen reader announcement when the computed styles sidebar is hidden in the Elements panel.
     */ computedStylesHidden: 'Computed Styles sidebar hidden',
    /**
     * @description Title of a pane in the Elements panel that shows computed styles for the selected
     * HTML element. Computed styles are the final, actual styles of the element, including all
     * implicit and specified styles.
     */ computed: 'Computed',
    /**
     * @description Title of a pane in the Elements panel that shows the CSS styles for the selected
     * HTML element.
     */ styles: 'Styles',
    /**
     * @description A context menu item to reveal a node in the DOM tree of the Elements Panel
     */ revealInElementsPanel: 'Reveal in Elements panel',
    /**
     * @description Warning/error text displayed when a node cannot be found in the current page.
     */ nodeCannotBeFoundInTheCurrent: 'Node cannot be found in the current page.',
    /**
     * @description Console warning when a user tries to reveal a non-node type Remote Object. A remote
     * object is a JavaScript object that is not stored in DevTools, that DevTools has a connection to.
     * It should correspond to a local node.
     */ theRemoteObjectCouldNotBe: 'The remote object could not be resolved to a valid node.',
    /**
     * @description Console warning when the user tries to reveal a deferred DOM Node that resolves as
     * null. A deferred DOM node is a node we know about but have not yet fetched from the backend (we
     * defer the work until later).
     */ theDeferredDomNodeCouldNotBe: 'The deferred `DOM` Node could not be resolved to a valid node.',
    /**
     * @description Text in Elements Panel of the Elements panel. Shows the current CSS Pseudo-classes
     * applicable to the selected HTML element.
     * @example {::after, ::before} PH1
     */ elementStateS: 'Element state: {PH1}',
    /**
     * @description Accessible name for side panel toolbar.
     */ sidePanelToolbar: 'Side panel toolbar',
    /**
     * @description Accessible name for side panel contents.
     */ sidePanelContent: 'Side panel content',
    /**
     * @description Accessible name for the DOM tree explorer view.
     */ domTreeExplorer: 'DOM tree explorer'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.registerUIStrings('panels/elements/ElementsPanel.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.getLocalizedString.bind(undefined, str_);
var createAccessibilityTreeToggleButton = function(isActive) {
    var button = new _ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_7__.Button.Button();
    var title = isActive ? i18nString(UIStrings.switchToDomTreeView) : i18nString(UIStrings.switchToAccessibilityTreeView);
    button.data = {
        active: isActive,
        variant: "toolbar" /* Buttons.Button.Variant.TOOLBAR */ ,
        iconUrl: new URL(/* asset import */__webpack_require__(/*! ../../Images/person.svg */ "./Images/person.svg?846b"), __webpack_require__.b).toString(),
        title: title
    };
    button.tabIndex = 0;
    button.classList.add('axtree-button');
    if (isActive) {
        button.classList.add('active');
    }
    return button;
};
var elementsPanelInstance;
var _UI_Panel_Panel;
var ElementsPanel = /*#__PURE__*/ function(_superClass) {
    "use strict";
    _inherits(ElementsPanel, _superClass);
    var _super = _create_super(ElementsPanel);
    function ElementsPanel() {
        _class_call_check(this, ElementsPanel);
        var _this;
        _this = _super.call(this, 'elements');
        _define_property(_assert_this_initialized(_this), "splitWidget", void 0);
        _define_property(_assert_this_initialized(_this), "searchableViewInternal", void 0);
        _define_property(_assert_this_initialized(_this), "mainContainer", void 0);
        _define_property(_assert_this_initialized(_this), "domTreeContainer", void 0);
        _define_property(_assert_this_initialized(_this), "splitMode", void 0);
        _define_property(_assert_this_initialized(_this), "accessibilityTreeView", void 0);
        _define_property(_assert_this_initialized(_this), "breadcrumbs", void 0);
        _define_property(_assert_this_initialized(_this), "stylesWidget", void 0);
        _define_property(_assert_this_initialized(_this), "computedStyleWidget", void 0);
        _define_property(_assert_this_initialized(_this), "metricsWidget", void 0);
        _define_property(_assert_this_initialized(_this), "treeOutlines", new Set());
        _define_property(_assert_this_initialized(_this), "searchResults", void 0);
        _define_property(_assert_this_initialized(_this), "currentSearchResultIndex", void 0);
        _define_property(_assert_this_initialized(_this), "pendingNodeReveal", void 0);
        _define_property(_assert_this_initialized(_this), "adornerManager", void 0);
        _define_property(_assert_this_initialized(_this), "adornerSettingsPane", void 0);
        _define_property(_assert_this_initialized(_this), "adornersByName", void 0);
        _define_property(_assert_this_initialized(_this), "accessibilityTreeButton", void 0);
        _define_property(_assert_this_initialized(_this), "domTreeButton", void 0);
        _define_property(_assert_this_initialized(_this), "selectedNodeOnReset", void 0);
        _define_property(_assert_this_initialized(_this), "hasNonDefaultSelectedNode", void 0);
        _define_property(_assert_this_initialized(_this), "searchConfig", void 0);
        _define_property(_assert_this_initialized(_this), "omitDefaultSelection", void 0);
        _define_property(_assert_this_initialized(_this), "notFirstInspectElement", void 0);
        _define_property(_assert_this_initialized(_this), "sidebarPaneView", void 0);
        _define_property(_assert_this_initialized(_this), "stylesViewToReveal", void 0);
        _define_property(_assert_this_initialized(_this), "nodeInsertedTaskRunner", {
            queue: Promise.resolve(),
            run: function run(task) {
                this.queue = this.queue.then(task);
            }
        });
        _define_property(_assert_this_initialized(_this), "cssStyleTrackerByCSSModel", void 0);
        _this.splitWidget = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.SplitWidget.SplitWidget(true, true, 'elements-panel-split-view-state', 325, 325);
        _this.splitWidget.addEventListener("SidebarSizeChanged" /* UI.SplitWidget.Events.SidebarSizeChanged */ , _this.updateTreeOutlineVisibleWidth.bind(_assert_this_initialized(_this)));
        _this.splitWidget.show(_this.element);
        _this.searchableViewInternal = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.SearchableView.SearchableView(_assert_this_initialized(_this), null);
        _this.searchableViewInternal.setMinimalSearchQuerySize(0);
        _this.searchableViewInternal.setMinimumSize(25, 28);
        _this.searchableViewInternal.setPlaceholder(i18nString(UIStrings.findByStringSelectorOrXpath));
        var stackElement = _this.searchableViewInternal.element;
        _this.mainContainer = document.createElement('div');
        _this.domTreeContainer = document.createElement('div');
        var crumbsContainer = document.createElement('div');
        if (_core_root_root_js__WEBPACK_IMPORTED_MODULE_4__.Runtime.experiments.isEnabled('full-accessibility-tree')) {
            _this.initializeFullAccessibilityTreeView();
        }
        _this.mainContainer.appendChild(_this.domTreeContainer);
        stackElement.appendChild(_this.mainContainer);
        stackElement.appendChild(crumbsContainer);
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.markAsMain(_this.domTreeContainer);
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.setLabel(_this.domTreeContainer, i18nString(UIStrings.domTreeExplorer));
        _this.splitWidget.setMainWidget(_this.searchableViewInternal);
        _this.splitMode = null;
        _this.mainContainer.id = 'main-content';
        _this.domTreeContainer.id = 'elements-content';
        _this.domTreeContainer.tabIndex = -1;
        // FIXME: crbug.com/425984
        if (_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('dom-word-wrap').get()) {
            _this.domTreeContainer.classList.add('elements-wrap');
        }
        _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('dom-word-wrap').addChangeListener(_this.domWordWrapSettingChanged.bind(_assert_this_initialized(_this)));
        crumbsContainer.id = 'elements-crumbs';
        if (_this.domTreeButton) {
            _this.accessibilityTreeView = new _AccessibilityTreeView_js__WEBPACK_IMPORTED_MODULE_11__.AccessibilityTreeView(_this.domTreeButton, new _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_8__.TreeOutline.TreeOutline());
        }
        _this.breadcrumbs = new _components_components_js__WEBPACK_IMPORTED_MODULE_13__.ElementsBreadcrumbs.ElementsBreadcrumbs();
        _this.breadcrumbs.addEventListener('breadcrumbsnodeselected', function(event) {
            _this.crumbNodeSelected(event);
        });
        crumbsContainer.appendChild(_this.breadcrumbs);
        _this.stylesWidget = _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_19__.StylesSidebarPane.instance();
        _this.computedStyleWidget = new _ComputedStyleWidget_js__WEBPACK_IMPORTED_MODULE_14__.ComputedStyleWidget();
        _this.metricsWidget = new _MetricsSidebarPane_js__WEBPACK_IMPORTED_MODULE_18__.MetricsSidebarPane();
        _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('sidebar-position').addChangeListener(_this.updateSidebarPosition.bind(_assert_this_initialized(_this)));
        _this.updateSidebarPosition();
        _this.cssStyleTrackerByCSSModel = new Map();
        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.TargetManager.TargetManager.instance().observeModels(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModel, _assert_this_initialized(_this), {
            scoped: true
        });
        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.TargetManager.TargetManager.instance().addEventListener("NameChanged" /* SDK.TargetManager.Events.NameChanged */ , function(event) {
            return _this.targetNameChanged(event.data);
        });
        _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('show-ua-shadow-dom').addChangeListener(_this.showUAShadowDOMChanged.bind(_assert_this_initialized(_this)));
        _models_extensions_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionServer.ExtensionServer.instance().addEventListener("SidebarPaneAdded" /* Extensions.ExtensionServer.Events.SidebarPaneAdded */ , _this.extensionSidebarPaneAdded, _assert_this_initialized(_this));
        _this.currentSearchResultIndex = -1; // -1 represents the initial invalid state
        _this.pendingNodeReveal = false;
        _this.adornerManager = new _components_components_js__WEBPACK_IMPORTED_MODULE_13__.AdornerManager.AdornerManager(_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('adorner-settings'));
        _this.adornerSettingsPane = null;
        _this.adornersByName = new Map();
        return _this;
    }
    _create_class(ElementsPanel, [
        {
            key: "initializeFullAccessibilityTreeView",
            value: function initializeFullAccessibilityTreeView() {
                this.accessibilityTreeButton = createAccessibilityTreeToggleButton(false);
                this.accessibilityTreeButton.addEventListener('click', this.showAccessibilityTree.bind(this));
                this.domTreeButton = createAccessibilityTreeToggleButton(true);
                this.domTreeButton.addEventListener('click', this.showDOMTree.bind(this));
                this.mainContainer.appendChild(this.accessibilityTreeButton);
            }
        },
        {
            key: "showAccessibilityTree",
            value: function showAccessibilityTree() {
                if (this.accessibilityTreeView) {
                    this.splitWidget.setMainWidget(this.accessibilityTreeView);
                }
            }
        },
        {
            key: "showDOMTree",
            value: function showDOMTree() {
                this.splitWidget.setMainWidget(this.searchableViewInternal);
                var selectedNode = this.selectedDOMNode();
                if (!selectedNode) {
                    return;
                }
                var treeElement = this.treeElementForNode(selectedNode);
                if (!treeElement) {
                    return;
                }
                treeElement.select();
            }
        },
        {
            key: "revealProperty",
            value: function revealProperty(cssProperty) {
                var _this = this;
                if (!this.sidebarPaneView || !this.stylesViewToReveal) {
                    return Promise.resolve();
                }
                return this.sidebarPaneView.showView(this.stylesViewToReveal).then(function() {
                    _this.stylesWidget.revealProperty(cssProperty);
                });
            }
        },
        {
            key: "resolveLocation",
            value: function resolveLocation(_locationName) {
                return this.sidebarPaneView || null;
            }
        },
        {
            key: "showToolbarPane",
            value: function showToolbarPane(widget, toggle) {
                // TODO(luoe): remove this function once its providers have an alternative way to reveal their views.
                this.stylesWidget.showToolbarPane(widget, toggle);
            }
        },
        {
            key: "modelAdded",
            value: function modelAdded(domModel) {
                var parentModel = domModel.parentModel();
                var treeOutline = parentModel ? _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(parentModel) : null;
                if (!treeOutline) {
                    treeOutline = new _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline(true, true);
                    treeOutline.setWordWrap(_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('dom-word-wrap').get());
                    treeOutline.addEventListener(_ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.Events.SelectedNodeChanged, this.selectedNodeChanged, this);
                    treeOutline.addEventListener(_ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.Events.ElementsTreeUpdated, this.updateBreadcrumbIfNeeded, this);
                    new _ElementsTreeElementHighlighter_js__WEBPACK_IMPORTED_MODULE_16__.ElementsTreeElementHighlighter(treeOutline, new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Throttler.Throttler(100));
                    this.treeOutlines.add(treeOutline);
                }
                treeOutline.wireToDOMModel(domModel);
                this.setupStyleTracking(domModel.cssModel());
                // Perform attach if necessary.
                if (this.isShowing()) {
                    this.wasShown();
                }
                if (this.domTreeContainer.hasFocus()) {
                    treeOutline.focus();
                }
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.Events.DocumentUpdated, this.documentUpdatedEvent, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.Events.NodeInserted, this.handleNodeInserted, this);
            }
        },
        {
            key: "handleNodeInserted",
            value: function handleNodeInserted(event) {
                // Queue the task for the case when all the view transitions are added
                // around the same time. Otherwise there is a race condition on
                // accessing `cssText` of inspector stylesheet causing some rules
                // to be not added.
                this.nodeInsertedTaskRunner.run(/*#__PURE__*/ _async_to_generator(function() {
                    var node, cssModel, styleSheetHeader, cssText;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                node = event.data;
                                if (!node.isViewTransitionPseudoNode()) {
                                    return [
                                        2
                                    ];
                                }
                                cssModel = node.domModel().cssModel();
                                return [
                                    4,
                                    cssModel.requestViaInspectorStylesheet(node)
                                ];
                            case 1:
                                styleSheetHeader = _state.sent();
                                if (!styleSheetHeader) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    cssModel.getStyleSheetText(styleSheetHeader.id)
                                ];
                            case 2:
                                cssText = _state.sent();
                                // Do not add a rule for the view transition pseudo if there already is a rule for it.
                                if (cssText === null || cssText === void 0 ? void 0 : cssText.includes("".concat(node.simpleSelector(), " {"))) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    cssModel.setStyleSheetText(styleSheetHeader.id, "".concat(cssText, "\n").concat(node.simpleSelector(), " {}"), false)
                                ];
                            case 3:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                }));
            }
        },
        {
            key: "modelRemoved",
            value: function modelRemoved(domModel) {
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.Events.DocumentUpdated, this.documentUpdatedEvent, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.Events.NodeInserted, this.handleNodeInserted, this);
                var treeOutline = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(domModel);
                if (!treeOutline) {
                    return;
                }
                treeOutline.unwireFromDOMModel(domModel);
                if (domModel.parentModel()) {
                    return;
                }
                this.treeOutlines.delete(treeOutline);
                treeOutline.element.remove();
                this.removeStyleTracking(domModel.cssModel());
            }
        },
        {
            key: "targetNameChanged",
            value: function targetNameChanged(target) {
                var domModel = target.model(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModel);
                if (!domModel) {
                    return;
                }
                var treeOutline = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(domModel);
                if (!treeOutline) {
                    return;
                }
            }
        },
        {
            key: "updateTreeOutlineVisibleWidth",
            value: function updateTreeOutlineVisibleWidth() {
                if (!this.treeOutlines.size) {
                    return;
                }
                var width = this.splitWidget.element.offsetWidth;
                if (this.splitWidget.isVertical()) {
                    width -= this.splitWidget.sidebarSize();
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        treeOutline.setVisibleWidth(width);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "focus",
            value: function focus() {
                if (this.treeOutlines.size) {
                    this.treeOutlines.values().next().value.focus();
                } else {
                    this.domTreeContainer.focus();
                }
            }
        },
        {
            key: "searchableView",
            value: function searchableView() {
                return this.searchableViewInternal;
            }
        },
        {
            key: "wasShown",
            value: function wasShown() {
                _get(_get_prototype_of(ElementsPanel.prototype), "wasShown", this).call(this);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Context.Context.instance().setFlavor(ElementsPanel, this);
                this.registerCSSFiles([
                    _elementsPanel_css_js__WEBPACK_IMPORTED_MODULE_15__["default"]
                ]);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        // Attach heavy component lazily
                        if (treeOutline.element.parentElement !== this.domTreeContainer) {
                            this.domTreeContainer.appendChild(treeOutline.element);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var domModels = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.TargetManager.TargetManager.instance().models(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModel, {
                    scoped: true
                });
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = domModels[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var domModel = _step1.value;
                        if (domModel.parentModel()) {
                            continue;
                        }
                        var treeOutline1 = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(domModel);
                        if (!treeOutline1) {
                            continue;
                        }
                        treeOutline1.setVisible(true);
                        if (!treeOutline1.rootDOMNode) {
                            if (domModel.existingDocument()) {
                                treeOutline1.rootDOMNode = domModel.existingDocument();
                                this.documentUpdated(domModel);
                            } else {
                                void domModel.requestDocument();
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
            }
        },
        {
            key: "willHide",
            value: function willHide() {
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        treeOutline.setVisible(false);
                        // Detach heavy component on hide
                        this.domTreeContainer.removeChild(treeOutline.element);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                _get(_get_prototype_of(ElementsPanel.prototype), "willHide", this).call(this);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Context.Context.instance().setFlavor(ElementsPanel, null);
            }
        },
        {
            key: "onResize",
            value: function onResize() {
                this.element.window().requestAnimationFrame(this.updateSidebarPosition.bind(this)); // Do not force layout.
                this.updateTreeOutlineVisibleWidth();
            }
        },
        {
            key: "selectedNodeChanged",
            value: function selectedNodeChanged(event) {
                var selectedNode = event.data.node;
                // If the selectedNode is a pseudoNode, we want to ensure that it has a valid parentNode
                if (selectedNode && selectedNode.pseudoType() && !selectedNode.parentNode) {
                    selectedNode = null;
                }
                var focus = event.data.focus;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        if (!selectedNode || _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(selectedNode.domModel()) !== treeOutline) {
                            treeOutline.selectDOMNode(null);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (selectedNode) {
                    var activeNode = _components_components_js__WEBPACK_IMPORTED_MODULE_13__.Helper.legacyNodeToElementsComponentsNode(selectedNode);
                    var crumbs = [
                        activeNode
                    ];
                    for(var current = selectedNode.parentNode; current; current = current.parentNode){
                        crumbs.push(_components_components_js__WEBPACK_IMPORTED_MODULE_13__.Helper.legacyNodeToElementsComponentsNode(current));
                    }
                    this.breadcrumbs.data = {
                        crumbs: crumbs,
                        selectedNode: _components_components_js__WEBPACK_IMPORTED_MODULE_13__.Helper.legacyNodeToElementsComponentsNode(selectedNode)
                    };
                    if (this.accessibilityTreeView) {
                        void this.accessibilityTreeView.selectedNodeChanged(selectedNode);
                    }
                } else {
                    this.breadcrumbs.data = {
                        crumbs: [],
                        selectedNode: null
                    };
                }
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Context.Context.instance().setFlavor(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMNode, selectedNode);
                if (!selectedNode) {
                    return;
                }
                void selectedNode.setAsInspectedNode();
                if (focus) {
                    this.selectedNodeOnReset = selectedNode;
                    this.hasNonDefaultSelectedNode = true;
                }
                var executionContexts = selectedNode.domModel().runtimeModel().executionContexts();
                var nodeFrameId = selectedNode.frameId();
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = executionContexts[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var context = _step1.value;
                        if (context.frameId === nodeFrameId) {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Context.Context.instance().setFlavor(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.RuntimeModel.ExecutionContext, context);
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
            }
        },
        {
            key: "documentUpdatedEvent",
            value: function documentUpdatedEvent(event) {
                var domModel = event.data;
                this.documentUpdated(domModel);
                this.removeStyleTracking(domModel.cssModel());
                this.setupStyleTracking(domModel.cssModel());
            }
        },
        {
            key: "documentUpdated",
            value: function documentUpdated(domModel) {
                this.searchableViewInternal.cancelSearch();
                if (!domModel.existingDocument()) {
                    if (this.isShowing()) {
                        void domModel.requestDocument();
                    }
                    return;
                }
                this.hasNonDefaultSelectedNode = false;
                if (this.omitDefaultSelection) {
                    return;
                }
                var savedSelectedNodeOnReset = this.selectedNodeOnReset;
                void restoreNode.call(this, domModel, this.selectedNodeOnReset || null);
                function restoreNode(domModel, staleNode) {
                    return _restoreNode.apply(this, arguments);
                }
                function _restoreNode() {
                    _restoreNode = _async_to_generator(function(domModel, staleNode) {
                        var nodePath, restoredNodeId, _tmp, node, inspectedDocument;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    nodePath = staleNode ? staleNode.path() : null;
                                    if (!nodePath) return [
                                        3,
                                        2
                                    ];
                                    return [
                                        4,
                                        domModel.pushNodeByPathToFrontend(nodePath)
                                    ];
                                case 1:
                                    _tmp = _state.sent();
                                    return [
                                        3,
                                        3
                                    ];
                                case 2:
                                    _tmp = null;
                                    _state.label = 3;
                                case 3:
                                    restoredNodeId = _tmp;
                                    if (savedSelectedNodeOnReset !== this.selectedNodeOnReset) {
                                        return [
                                            2
                                        ];
                                    }
                                    node = restoredNodeId ? domModel.nodeForId(restoredNodeId) : null;
                                    if (!node) {
                                        inspectedDocument = domModel.existingDocument();
                                        node = inspectedDocument ? inspectedDocument.body || inspectedDocument.documentElement : null;
                                    }
                                    // If `node` is null here, the document hasn't been transmitted from the backend yet
                                    // and isn't in a valid state to have a default-selected node. Another document update
                                    // should be forthcoming. In the meantime, don't set the default-selected node or notify
                                    // the test that it's ready, because it isn't.
                                    if (node) {
                                        this.setDefaultSelectedNode(node);
                                        this.lastSelectedNodeSelectedForTest();
                                    }
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                    return _restoreNode.apply(this, arguments);
                }
            }
        },
        {
            key: "lastSelectedNodeSelectedForTest",
            value: function lastSelectedNodeSelectedForTest() {}
        },
        {
            key: "setDefaultSelectedNode",
            value: function setDefaultSelectedNode(node) {
                if (!node || this.hasNonDefaultSelectedNode || this.pendingNodeReveal) {
                    return;
                }
                var treeOutline = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(node.domModel());
                if (!treeOutline) {
                    return;
                }
                this.selectDOMNode(node);
                if (treeOutline.selectedTreeElement) {
                    treeOutline.selectedTreeElement.expand();
                }
            }
        },
        {
            key: "onSearchClosed",
            value: function onSearchClosed() {
                var selectedNode = this.selectedDOMNode();
                if (!selectedNode) {
                    return;
                }
                var treeElement = this.treeElementForNode(selectedNode);
                if (!treeElement) {
                    return;
                }
                treeElement.select();
            }
        },
        {
            key: "onSearchCanceled",
            value: function onSearchCanceled() {
                this.searchConfig = undefined;
                this.hideSearchHighlights();
                this.searchableViewInternal.updateSearchMatchesCount(0);
                this.currentSearchResultIndex = -1;
                delete this.searchResults;
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModel.cancelSearch();
            }
        },
        {
            key: "performSearch",
            value: function performSearch(searchConfig, shouldJump, jumpBackwards) {
                var _this = this;
                var query = searchConfig.query;
                var whitespaceTrimmedQuery = query.trim();
                if (!whitespaceTrimmedQuery.length) {
                    return;
                }
                if (!this.searchConfig || this.searchConfig.query !== query) {
                    this.onSearchCanceled();
                } else {
                    this.hideSearchHighlights();
                }
                this.searchConfig = searchConfig;
                var showUAShadowDOM = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('show-ua-shadow-dom').get();
                var domModels = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.TargetManager.TargetManager.instance().models(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModel, {
                    scoped: true
                });
                var promises = domModels.map(function(domModel) {
                    return domModel.performSearch(whitespaceTrimmedQuery, showUAShadowDOM);
                });
                void Promise.all(promises).then(function(resultCounts) {
                    _this.searchResults = [];
                    for(var i = 0; i < resultCounts.length; ++i){
                        var resultCount = resultCounts[i];
                        for(var j = 0; j < resultCount; ++j){
                            _this.searchResults.push({
                                domModel: domModels[i],
                                index: j,
                                node: undefined
                            });
                        }
                    }
                    _this.searchableViewInternal.updateSearchMatchesCount(_this.searchResults.length);
                    if (!_this.searchResults.length) {
                        return;
                    }
                    if (_this.currentSearchResultIndex >= _this.searchResults.length) {
                        _this.currentSearchResultIndex = -1;
                    }
                    var index = _this.currentSearchResultIndex;
                    if (shouldJump) {
                        if (_this.currentSearchResultIndex === -1) {
                            index = jumpBackwards ? -1 : 0;
                        } else {
                            index = jumpBackwards ? index - 1 : index + 1;
                        }
                        _this.jumpToSearchResult(index);
                    }
                });
            }
        },
        {
            key: "domWordWrapSettingChanged",
            value: function domWordWrapSettingChanged(event) {
                this.domTreeContainer.classList.toggle('elements-wrap', event.data);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        treeOutline.setWordWrap(event.data);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "switchToAndFocus",
            value: function switchToAndFocus(node) {
                var _this = this;
                // Reset search restore.
                this.searchableViewInternal.cancelSearch();
                void _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ViewManager.ViewManager.instance().showView('elements').then(function() {
                    return _this.selectDOMNode(node, true);
                });
            }
        },
        {
            key: "jumpToSearchResult",
            value: function jumpToSearchResult(index) {
                if (!this.searchResults) {
                    return;
                }
                this.currentSearchResultIndex = (index + this.searchResults.length) % this.searchResults.length;
                this.highlightCurrentSearchResult();
            }
        },
        {
            key: "jumpToNextSearchResult",
            value: function jumpToNextSearchResult() {
                if (!this.searchResults || !this.searchConfig) {
                    return;
                }
                this.performSearch(this.searchConfig, true);
            }
        },
        {
            key: "jumpToPreviousSearchResult",
            value: function jumpToPreviousSearchResult() {
                if (!this.searchResults || !this.searchConfig) {
                    return;
                }
                this.performSearch(this.searchConfig, true, true);
            }
        },
        {
            key: "supportsCaseSensitiveSearch",
            value: function supportsCaseSensitiveSearch() {
                return false;
            }
        },
        {
            key: "supportsRegexSearch",
            value: function supportsRegexSearch() {
                return false;
            }
        },
        {
            key: "highlightCurrentSearchResult",
            value: function highlightCurrentSearchResult() {
                var _this = this;
                var index = this.currentSearchResultIndex;
                var searchResults = this.searchResults;
                if (!searchResults) {
                    return;
                }
                var searchResult = searchResults[index];
                this.searchableViewInternal.updateCurrentMatchIndex(index);
                if (searchResult.node === null) {
                    return;
                }
                if (typeof searchResult.node === 'undefined') {
                    // No data for slot, request it.
                    void searchResult.domModel.searchResult(searchResult.index).then(function(node) {
                        searchResult.node = node;
                        // If any of these properties are undefined or reset to an invalid value,
                        // this means the search/highlight request is outdated.
                        var highlightRequestValid = _this.searchConfig && _this.searchResults && _this.currentSearchResultIndex !== -1;
                        if (highlightRequestValid) {
                            _this.highlightCurrentSearchResult();
                        }
                    });
                    return;
                }
                var treeElement = this.treeElementForNode(searchResult.node);
                void searchResult.node.scrollIntoView();
                if (treeElement) {
                    this.searchConfig && treeElement.highlightSearchResults(this.searchConfig.query);
                    treeElement.reveal();
                    var matches = treeElement.listItemElement.getElementsByClassName(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.highlightedSearchResultClassName);
                    if (matches.length) {
                        matches[0].scrollIntoViewIfNeeded(false);
                    }
                    treeElement.select(/* omitFocus */ true);
                }
            }
        },
        {
            key: "hideSearchHighlights",
            value: function hideSearchHighlights() {
                if (!this.searchResults || !this.searchResults.length || this.currentSearchResultIndex === -1) {
                    return;
                }
                var searchResult = this.searchResults[this.currentSearchResultIndex];
                if (!searchResult.node) {
                    return;
                }
                var treeElement = this.treeElementForNode(searchResult.node);
                if (treeElement) {
                    treeElement.hideSearchHighlights();
                }
            }
        },
        {
            key: "selectedDOMNode",
            value: function selectedDOMNode() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        if (treeOutline.selectedDOMNode()) {
                            return treeOutline.selectedDOMNode();
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return null;
            }
        },
        {
            key: "selectDOMNode",
            value: function selectDOMNode(node, focus) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        var outline = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(node.domModel());
                        if (outline === treeOutline) {
                            treeOutline.selectDOMNode(node, focus);
                        } else {
                            treeOutline.selectDOMNode(null);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "selectAndShowSidebarTab",
            value: function selectAndShowSidebarTab(tabId) {
                if (!this.sidebarPaneView) {
                    return;
                }
                this.sidebarPaneView.tabbedPane().selectTab(tabId);
                if (!this.isShowing()) {
                    void _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ViewManager.ViewManager.instance().showView('elements');
                }
            }
        },
        {
            key: "updateBreadcrumbIfNeeded",
            value: function updateBreadcrumbIfNeeded(event) {
                var nodes = event.data;
                /* If we don't have a selected node then we can tell the breadcrumbs that & bail. */ var selectedNode = this.selectedDOMNode();
                if (!selectedNode) {
                    this.breadcrumbs.data = {
                        crumbs: [],
                        selectedNode: null
                    };
                    return;
                }
                /* This function gets called whenever the tree outline is updated
         * and contains any nodes that have changed.
         * What we need to do is construct the new set of breadcrumb nodes, combining the Nodes
         * that we had before with the new nodes, and pass them into the breadcrumbs component.
         */ // Get the current set of active crumbs
                var activeNode = _components_components_js__WEBPACK_IMPORTED_MODULE_13__.Helper.legacyNodeToElementsComponentsNode(selectedNode);
                var existingCrumbs = [
                    activeNode
                ];
                for(var current = selectedNode.parentNode; current; current = current.parentNode){
                    existingCrumbs.push(_components_components_js__WEBPACK_IMPORTED_MODULE_13__.Helper.legacyNodeToElementsComponentsNode(current));
                }
                /* Get the change nodes from the event & convert them to breadcrumb nodes */ var newNodes = nodes.map(_components_components_js__WEBPACK_IMPORTED_MODULE_13__.Helper.legacyNodeToElementsComponentsNode);
                var nodesThatHaveChangedMap = new Map();
                newNodes.forEach(function(crumb) {
                    return nodesThatHaveChangedMap.set(crumb.id, crumb);
                });
                /* Loop over our existing crumbs, and if any have an ID that matches an ID from the new nodes
         * that we have, use the new node, rather than the one we had, because it's changed.
         */ var newSetOfCrumbs = existingCrumbs.map(function(crumb) {
                    var replacement = nodesThatHaveChangedMap.get(crumb.id);
                    return replacement || crumb;
                });
                this.breadcrumbs.data = {
                    crumbs: newSetOfCrumbs,
                    selectedNode: activeNode
                };
            }
        },
        {
            key: "crumbNodeSelected",
            value: function crumbNodeSelected(event) {
                this.selectDOMNode(event.legacyDomNode, true);
            }
        },
        {
            key: "treeOutlineForNode",
            value: function treeOutlineForNode(node) {
                if (!node) {
                    return null;
                }
                return _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(node.domModel());
            }
        },
        {
            key: "treeElementForNode",
            value: function treeElementForNode(node) {
                var treeOutline = this.treeOutlineForNode(node);
                if (!treeOutline) {
                    return null;
                }
                return treeOutline.findTreeElement(node);
            }
        },
        {
            key: "leaveUserAgentShadowDOM",
            value: function leaveUserAgentShadowDOM(node) {
                var userAgentShadowRoot;
                while((userAgentShadowRoot = node.ancestorUserAgentShadowRoot()) && userAgentShadowRoot.parentNode){
                    node = userAgentShadowRoot.parentNode;
                }
                return node;
            }
        },
        {
            key: "revealAndSelectNode",
            value: function revealAndSelectNode(nodeToReveal, focus, omitHighlight) {
                var _this = this;
                return _async_to_generator(function() {
                    var node;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.omitDefaultSelection = true;
                                node = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('show-ua-shadow-dom').get() ? nodeToReveal : _this.leaveUserAgentShadowDOM(nodeToReveal);
                                if (!omitHighlight) {
                                    node.highlightForTwoSeconds();
                                }
                                if (_this.accessibilityTreeView) {
                                    void _this.accessibilityTreeView.revealAndSelectNode(nodeToReveal);
                                }
                                return [
                                    4,
                                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ViewManager.ViewManager.instance().showView('elements', false, !focus)
                                ];
                            case 1:
                                _state.sent();
                                _this.selectDOMNode(node, focus);
                                delete _this.omitDefaultSelection;
                                if (!_this.notFirstInspectElement) {
                                    ElementsPanel.firstInspectElementNodeNameForTest = node.nodeName();
                                    ElementsPanel.firstInspectElementCompletedForTest();
                                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.inspectElementCompleted();
                                }
                                _this.notFirstInspectElement = true;
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "showUAShadowDOMChanged",
            value: function showUAShadowDOMChanged() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutlines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var treeOutline = _step.value;
                        treeOutline.update();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "setupTextSelectionHack",
            value: function setupTextSelectionHack(stylePaneWrapperElement) {
                var _this = this;
                // We "extend" the sidebar area when dragging, in order to keep smooth text
                // selection. It should be replaced by 'user-select: contain' in the future.
                var uninstallHackBound = uninstallHack.bind(this);
                // Fallback to cover unforeseen cases where text selection has ended.
                var uninstallHackOnMousemove = function(event) {
                    if (event.buttons === 0) {
                        uninstallHack.call(_this);
                    }
                };
                stylePaneWrapperElement.addEventListener('mousedown', function(event) {
                    if (event.button !== 0) {
                        return;
                    }
                    _this.splitWidget.element.classList.add('disable-resizer-for-elements-hack');
                    stylePaneWrapperElement.style.setProperty('height', "".concat(stylePaneWrapperElement.offsetHeight, "px"));
                    var largeLength = 1000000;
                    stylePaneWrapperElement.style.setProperty('left', "".concat(-1 * largeLength, "px"));
                    stylePaneWrapperElement.style.setProperty('padding-left', "".concat(largeLength, "px"));
                    stylePaneWrapperElement.style.setProperty('width', "calc(100% + ".concat(largeLength, "px)"));
                    stylePaneWrapperElement.style.setProperty('position', 'fixed');
                    stylePaneWrapperElement.window().addEventListener('blur', uninstallHackBound);
                    stylePaneWrapperElement.window().addEventListener('contextmenu', uninstallHackBound, true);
                    stylePaneWrapperElement.window().addEventListener('dragstart', uninstallHackBound, true);
                    stylePaneWrapperElement.window().addEventListener('mousemove', uninstallHackOnMousemove, true);
                    stylePaneWrapperElement.window().addEventListener('mouseup', uninstallHackBound, true);
                    stylePaneWrapperElement.window().addEventListener('visibilitychange', uninstallHackBound);
                }, true);
                function uninstallHack() {
                    this.splitWidget.element.classList.remove('disable-resizer-for-elements-hack');
                    stylePaneWrapperElement.style.removeProperty('left');
                    stylePaneWrapperElement.style.removeProperty('padding-left');
                    stylePaneWrapperElement.style.removeProperty('width');
                    stylePaneWrapperElement.style.removeProperty('position');
                    stylePaneWrapperElement.window().removeEventListener('blur', uninstallHackBound);
                    stylePaneWrapperElement.window().removeEventListener('contextmenu', uninstallHackBound, true);
                    stylePaneWrapperElement.window().removeEventListener('dragstart', uninstallHackBound, true);
                    stylePaneWrapperElement.window().removeEventListener('mousemove', uninstallHackOnMousemove, true);
                    stylePaneWrapperElement.window().removeEventListener('mouseup', uninstallHackBound, true);
                    stylePaneWrapperElement.window().removeEventListener('visibilitychange', uninstallHackBound);
                }
            }
        },
        {
            key: "initializeSidebarPanes",
            value: function initializeSidebarPanes(splitMode) {
                var _this = this;
                this.splitWidget.setVertical(splitMode === "Vertical" /* SplitMode.Vertical */ );
                this.showToolbarPane(null, null);
                var matchedStylePanesWrapper = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Widget.VBox();
                matchedStylePanesWrapper.element.classList.add('style-panes-wrapper');
                matchedStylePanesWrapper.element.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__.pane('styles').track({
                    resize: true
                })));
                this.stylesWidget.show(matchedStylePanesWrapper.element);
                this.setupTextSelectionHack(matchedStylePanesWrapper.element);
                var computedStylePanesWrapper = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Widget.VBox();
                computedStylePanesWrapper.element.classList.add('style-panes-wrapper');
                computedStylePanesWrapper.element.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__.pane('computed').track({
                    resize: true
                })));
                this.computedStyleWidget.show(computedStylePanesWrapper.element);
                var stylesSplitWidget = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.SplitWidget.SplitWidget(true, true, 'elements.styles.sidebar.width', 100);
                stylesSplitWidget.setMainWidget(matchedStylePanesWrapper);
                stylesSplitWidget.hideSidebar();
                stylesSplitWidget.enableShowModeSaving();
                stylesSplitWidget.addEventListener("ShowModeChanged" /* UI.SplitWidget.Events.ShowModeChanged */ , function() {
                    showMetricsWidgetInStylesPane();
                });
                this.stylesWidget.addEventListener("InitialUpdateCompleted" /* StylesSidebarPaneEvents.InitialUpdateCompleted */ , function() {
                    _this.stylesWidget.appendToolbarItem(stylesSplitWidget.createShowHideSidebarButton(i18nString(UIStrings.showComputedStylesSidebar), i18nString(UIStrings.hideComputedStylesSidebar), i18nString(UIStrings.computedStylesShown), i18nString(UIStrings.computedStylesHidden), 'computed-styles'));
                });
                var showMetricsWidgetInComputedPane = function() {
                    _this.metricsWidget.show(computedStylePanesWrapper.element, _this.computedStyleWidget.element);
                    _this.metricsWidget.toggleVisibility(true);
                    _this.stylesWidget.removeEventListener("StylesUpdateCompleted" /* StylesSidebarPaneEvents.StylesUpdateCompleted */ , toggleMetricsWidget);
                };
                var showMetricsWidgetInStylesPane = function() {
                    var showMergedComputedPane = stylesSplitWidget.showMode() === "Both" /* UI.SplitWidget.ShowMode.Both */ ;
                    if (showMergedComputedPane) {
                        showMetricsWidgetInComputedPane();
                    } else {
                        _this.metricsWidget.show(matchedStylePanesWrapper.element);
                        if (!_this.stylesWidget.hasMatchedStyles) {
                            _this.metricsWidget.toggleVisibility(false);
                        }
                        _this.stylesWidget.addEventListener("StylesUpdateCompleted" /* StylesSidebarPaneEvents.StylesUpdateCompleted */ , toggleMetricsWidget);
                    }
                };
                var toggleMetricsWidget = function(event) {
                    _this.metricsWidget.toggleVisibility(event.data.hasMatchedStyles);
                };
                var tabSelected = function(event) {
                    var tabId = event.data.tabId;
                    if (tabId === "computed" /* SidebarPaneTabId.Computed */ ) {
                        computedStylePanesWrapper.show(computedView.element);
                        showMetricsWidgetInComputedPane();
                    } else if (tabId === "styles" /* SidebarPaneTabId.Styles */ ) {
                        stylesSplitWidget.setSidebarWidget(computedStylePanesWrapper);
                        showMetricsWidgetInStylesPane();
                    }
                };
                this.sidebarPaneView = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ViewManager.ViewManager.instance().createTabbedLocation(function() {
                    return _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ViewManager.ViewManager.instance().showView('elements');
                }, 'styles-pane-sidebar', true, true);
                var tabbedPane = this.sidebarPaneView.tabbedPane();
                tabbedPane.headerElement().setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__.toolbar('sidebar').track({
                    keydown: 'ArrowUp|ArrowLeft|ArrowDown|ArrowRight|Enter|Space'
                })));
                if (this.splitMode !== "Vertical" /* SplitMode.Vertical */ ) {
                    this.splitWidget.installResizer(tabbedPane.headerElement());
                }
                var headerElement = tabbedPane.headerElement();
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.markAsNavigation(headerElement);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.setLabel(headerElement, i18nString(UIStrings.sidePanelToolbar));
                var contentElement = tabbedPane.tabbedPaneContentElement();
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.markAsComplementary(contentElement);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.setLabel(contentElement, i18nString(UIStrings.sidePanelContent));
                var stylesView = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.View.SimpleView(i18nString(UIStrings.styles), /* isWebComponent */ undefined, "styles" /* SidebarPaneTabId.Styles */ );
                this.sidebarPaneView.appendView(stylesView);
                stylesView.element.classList.add('flex-auto');
                stylesSplitWidget.show(stylesView.element);
                var computedView = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.View.SimpleView(i18nString(UIStrings.computed), /* isWebComponent */ undefined, "computed" /* SidebarPaneTabId.Computed */ );
                computedView.element.classList.add('composite', 'fill');
                tabbedPane.addEventListener(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TabbedPane.Events.TabSelected, tabSelected, this);
                this.sidebarPaneView.appendView(computedView);
                this.stylesViewToReveal = stylesView;
                this.sidebarPaneView.appendApplicableItems('elements-sidebar');
                var extensionSidebarPanes = _models_extensions_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionServer.ExtensionServer.instance().sidebarPanes();
                for(var i = 0; i < extensionSidebarPanes.length; ++i){
                    this.addExtensionSidebarPane(extensionSidebarPanes[i]);
                }
                this.splitWidget.setSidebarWidget(this.sidebarPaneView.tabbedPane());
            }
        },
        {
            key: "updateSidebarPosition",
            value: function updateSidebarPosition() {
                if (this.sidebarPaneView && this.sidebarPaneView.tabbedPane().shouldHideOnDetach()) {
                    return;
                } // We can't reparent extension iframes.
                var position = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('sidebar-position').get();
                var splitMode = "Horizontal" /* SplitMode.Horizontal */ ;
                if (position === 'right' || position === 'auto' && _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.InspectorView.InspectorView.instance().element.offsetWidth > 680) {
                    splitMode = "Vertical" /* SplitMode.Vertical */ ;
                }
                if (!this.sidebarPaneView) {
                    this.initializeSidebarPanes(splitMode);
                    return;
                }
                if (splitMode === this.splitMode) {
                    return;
                }
                this.splitMode = splitMode;
                var tabbedPane = this.sidebarPaneView.tabbedPane();
                this.splitWidget.uninstallResizer(tabbedPane.headerElement());
                this.splitWidget.setVertical(this.splitMode === "Vertical" /* SplitMode.Vertical */ );
                this.showToolbarPane(null, null);
                if (this.splitMode !== "Vertical" /* SplitMode.Vertical */ ) {
                    this.splitWidget.installResizer(tabbedPane.headerElement());
                }
            }
        },
        {
            key: "extensionSidebarPaneAdded",
            value: function extensionSidebarPaneAdded(event) {
                this.addExtensionSidebarPane(event.data);
            }
        },
        {
            key: "addExtensionSidebarPane",
            value: function addExtensionSidebarPane(pane) {
                if (this.sidebarPaneView && pane.panelName() === this.name) {
                    this.sidebarPaneView.appendView(pane);
                }
            }
        },
        {
            key: "getComputedStyleWidget",
            value: function getComputedStyleWidget() {
                return this.computedStyleWidget;
            }
        },
        {
            key: "setupStyleTracking",
            value: function setupStyleTracking(cssModel) {
                var cssPropertyTracker = cssModel.createCSSPropertyTracker(TrackedCSSProperties);
                cssPropertyTracker.start();
                this.cssStyleTrackerByCSSModel.set(cssModel, cssPropertyTracker);
                cssPropertyTracker.addEventListener("TrackedCSSPropertiesUpdated" /* SDK.CSSModel.CSSPropertyTrackerEvents.TrackedCSSPropertiesUpdated */ , this.trackedCSSPropertiesUpdated, this);
            }
        },
        {
            key: "removeStyleTracking",
            value: function removeStyleTracking(cssModel) {
                var cssPropertyTracker = this.cssStyleTrackerByCSSModel.get(cssModel);
                if (!cssPropertyTracker) {
                    return;
                }
                cssPropertyTracker.stop();
                this.cssStyleTrackerByCSSModel.delete(cssModel);
                cssPropertyTracker.removeEventListener("TrackedCSSPropertiesUpdated" /* SDK.CSSModel.CSSPropertyTrackerEvents.TrackedCSSPropertiesUpdated */ , this.trackedCSSPropertiesUpdated, this);
            }
        },
        {
            key: "trackedCSSPropertiesUpdated",
            value: function trackedCSSPropertiesUpdated(param) {
                var domNodes = param.data;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = domNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var domNode = _step.value;
                        if (!domNode) {
                            continue;
                        }
                        var treeElement = this.treeElementForNode(domNode);
                        if (treeElement) {
                            void treeElement.updateStyleAdorners();
                        }
                        void _components_components_js__WEBPACK_IMPORTED_MODULE_13__.LayoutPane.LayoutPane.instance().render();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "showAdornerSettingsPane",
            value: function showAdornerSettingsPane() {
                var _this = this;
                // Delay the initialization of the pane to the first showing
                // since usually this pane won't be used.
                if (!this.adornerSettingsPane) {
                    this.adornerSettingsPane = new _components_components_js__WEBPACK_IMPORTED_MODULE_13__.AdornerSettingsPane.AdornerSettingsPane();
                    this.adornerSettingsPane.addEventListener('adornersettingupdated', function(event) {
                        var _event_data = event.data, adornerName = _event_data.adornerName, isEnabledNow = _event_data.isEnabledNow, newSettings = _event_data.newSettings;
                        var adornersToUpdate = _this.adornersByName.get(adornerName);
                        if (adornersToUpdate) {
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            try {
                                for(var _iterator = adornersToUpdate[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var adorner = _step.value;
                                    isEnabledNow ? adorner.show() : adorner.hide();
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        }
                        _this.adornerManager.updateSettings(newSettings);
                    });
                    this.searchableViewInternal.element.prepend(this.adornerSettingsPane);
                }
                var adornerSettings = this.adornerManager.getSettings();
                this.adornerSettingsPane.data = {
                    settings: adornerSettings
                };
                this.adornerSettingsPane.show();
            }
        },
        {
            key: "isAdornerEnabled",
            value: function isAdornerEnabled(adornerText) {
                return this.adornerManager.isAdornerEnabled(adornerText);
            }
        },
        {
            key: "registerAdorner",
            value: function registerAdorner(adorner) {
                var adornerSet = this.adornersByName.get(adorner.name);
                if (!adornerSet) {
                    adornerSet = new Set();
                    this.adornersByName.set(adorner.name, adornerSet);
                }
                adornerSet.add(adorner);
                if (!this.isAdornerEnabled(adorner.name)) {
                    adorner.hide();
                }
            }
        },
        {
            key: "deregisterAdorner",
            value: function deregisterAdorner(adorner) {
                var adornerSet = this.adornersByName.get(adorner.name);
                if (!adornerSet) {
                    return;
                }
                adornerSet.delete(adorner);
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!elementsPanelInstance || forceNew) {
                    elementsPanelInstance = new ElementsPanel();
                }
                return elementsPanelInstance;
            }
        }
    ]);
    return ElementsPanel;
}(_UI_Panel_Panel = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Panel.Panel);
_define_property(ElementsPanel, "firstInspectElementCompletedForTest", function() {});
_define_property(ElementsPanel, "firstInspectElementNodeNameForTest", '');
// @ts-ignore exported for Tests.js
globalThis.Elements = globalThis.Elements || {};
// @ts-ignore exported for Tests.js
globalThis.Elements.ElementsPanel = ElementsPanel;
var TrackedCSSProperties = [
    {
        name: 'display',
        value: 'grid'
    },
    {
        name: 'display',
        value: 'inline-grid'
    },
    {
        name: 'display',
        value: 'flex'
    },
    {
        name: 'display',
        value: 'inline-flex'
    },
    {
        name: 'container-type',
        value: 'inline-size'
    },
    {
        name: 'container-type',
        value: 'block-size'
    },
    {
        name: 'container-type',
        value: 'size'
    }
];
var ContextMenuProvider = /*#__PURE__*/ function() {
    "use strict";
    function ContextMenuProvider() {
        _class_call_check(this, ContextMenuProvider);
    }
    _create_class(ContextMenuProvider, [
        {
            key: "appendApplicableItems",
            value: function appendApplicableItems(event, contextMenu, object) {
                if (_instanceof(object, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.RemoteObject.RemoteObject) && !object.isNode()) {
                    return;
                }
                if (ElementsPanel.instance().element.isAncestor(event.target)) {
                    return;
                }
                contextMenu.revealSection().appendItem(i18nString(UIStrings.revealInElementsPanel), function() {
                    return _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(object);
                }, {
                    jslogContext: 'elements.reveal-node'
                });
            }
        }
    ]);
    return ContextMenuProvider;
}();
var DOMNodeRevealer = /*#__PURE__*/ function() {
    "use strict";
    function DOMNodeRevealer() {
        _class_call_check(this, DOMNodeRevealer);
    }
    _create_class(DOMNodeRevealer, [
        {
            key: "reveal",
            value: function reveal(node, omitFocus) {
                var panel = ElementsPanel.instance();
                panel.pendingNodeReveal = true;
                return new Promise(revealPromise).catch(function(reason) {
                    var message;
                    if (_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.UserVisibleError.isUserVisibleError(reason)) {
                        message = reason.message;
                    } else {
                        message = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);
                    }
                    _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Console.Console.instance().warn(message);
                    // Blink tests expect an exception to be raised and unhandled here to detect that the node
                    // was actually not successfully viewed.
                    throw reason;
                });
                function revealPromise(resolve, reject) {
                    if (_instanceof(node, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMNode)) {
                        onNodeResolved(node);
                    } else if (_instanceof(node, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DeferredDOMNode)) {
                        node.resolve(checkDeferredDOMNodeThenReveal);
                    } else {
                        var domModel = node.runtimeModel().target().model(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModel);
                        if (domModel) {
                            void domModel.pushObjectAsNodeToFrontend(node).then(checkRemoteObjectThenReveal);
                        } else {
                            var msg = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);
                            reject(new _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.UserVisibleError.UserVisibleError(msg));
                        }
                    }
                    function onNodeResolved(resolvedNode) {
                        panel.pendingNodeReveal = false;
                        // A detached node could still have a parent and ownerDocument
                        // properties, which means stepping up through the hierarchy to ensure
                        // that the root node is the document itself. Any break implies
                        // detachment.
                        var currentNode = resolvedNode;
                        while(currentNode.parentNode){
                            currentNode = currentNode.parentNode;
                        }
                        var isDetached = !_instanceof(currentNode, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMDocument);
                        var isDocument = _instanceof(node, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMDocument);
                        if (!isDocument && isDetached) {
                            var msg = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);
                            reject(new _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.UserVisibleError.UserVisibleError(msg));
                            return;
                        }
                        if (resolvedNode) {
                            void panel.revealAndSelectNode(resolvedNode, !omitFocus).then(resolve);
                            return;
                        }
                        var msg1 = i18nString(UIStrings.nodeCannotBeFoundInTheCurrent);
                        reject(new _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.UserVisibleError.UserVisibleError(msg1));
                    }
                    function checkRemoteObjectThenReveal(resolvedNode) {
                        if (!resolvedNode) {
                            var msg = i18nString(UIStrings.theRemoteObjectCouldNotBe);
                            reject(new _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.UserVisibleError.UserVisibleError(msg));
                            return;
                        }
                        onNodeResolved(resolvedNode);
                    }
                    function checkDeferredDOMNodeThenReveal(resolvedNode) {
                        if (!resolvedNode) {
                            var msg = i18nString(UIStrings.theDeferredDomNodeCouldNotBe);
                            reject(new _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.UserVisibleError.UserVisibleError(msg));
                            return;
                        }
                        onNodeResolved(resolvedNode);
                    }
                }
            }
        }
    ]);
    return DOMNodeRevealer;
}();
var CSSPropertyRevealer = /*#__PURE__*/ function() {
    "use strict";
    function CSSPropertyRevealer() {
        _class_call_check(this, CSSPropertyRevealer);
    }
    _create_class(CSSPropertyRevealer, [
        {
            key: "reveal",
            value: function reveal(property) {
                var panel = ElementsPanel.instance();
                return panel.revealProperty(property);
            }
        }
    ]);
    return CSSPropertyRevealer;
}();
var ElementsActionDelegate = /*#__PURE__*/ function() {
    "use strict";
    function ElementsActionDelegate() {
        _class_call_check(this, ElementsActionDelegate);
    }
    _create_class(ElementsActionDelegate, [
        {
            key: "handleAction",
            value: function handleAction(context, actionId) {
                var node = context.flavor(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMNode);
                if (!node) {
                    return true;
                }
                var treeOutline = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_17__.ElementsTreeOutline.forDOMModel(node.domModel());
                if (!treeOutline) {
                    return true;
                }
                switch(actionId){
                    case 'elements.hide-element':
                        void treeOutline.toggleHideElement(node);
                        return true;
                    case 'elements.edit-as-html':
                        treeOutline.toggleEditAsHTML(node);
                        return true;
                    case 'elements.duplicate-element':
                        treeOutline.duplicateNode(node);
                        return true;
                    case 'elements.copy-styles':
                        var _treeOutline_findTreeElement;
                        void ((_treeOutline_findTreeElement = treeOutline.findTreeElement(node)) === null || _treeOutline_findTreeElement === void 0 ? void 0 : _treeOutline_findTreeElement.copyStyles());
                        return true;
                    case 'elements.undo':
                        void _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModelUndoStack.instance().undo();
                        ElementsPanel.instance().stylesWidget.forceUpdate();
                        return true;
                    case 'elements.redo':
                        void _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMModelUndoStack.instance().redo();
                        ElementsPanel.instance().stylesWidget.forceUpdate();
                        return true;
                    case 'elements.show-styles':
                        ElementsPanel.instance().selectAndShowSidebarTab("styles" /* SidebarPaneTabId.Styles */ );
                        return true;
                    case 'elements.show-computed':
                        ElementsPanel.instance().selectAndShowSidebarTab("computed" /* SidebarPaneTabId.Computed */ );
                        return true;
                    case 'elements.toggle-eye-dropper':
                        {
                            var colorSwatchPopoverIcon = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Context.Context.instance().flavor(_ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_12__.ColorSwatchPopoverIcon);
                            if (!colorSwatchPopoverIcon) {
                                return false;
                            }
                            void colorSwatchPopoverIcon.toggleEyeDropper();
                        }
                }
                return false;
            }
        }
    ]);
    return ElementsActionDelegate;
}();
var pseudoStateMarkerDecoratorInstance;
var PseudoStateMarkerDecorator = /*#__PURE__*/ function() {
    "use strict";
    function PseudoStateMarkerDecorator() {
        _class_call_check(this, PseudoStateMarkerDecorator);
    }
    _create_class(PseudoStateMarkerDecorator, [
        {
            key: "decorate",
            value: function decorate(node) {
                var pseudoState = node.domModel().cssModel().pseudoState(node);
                if (!pseudoState) {
                    return null;
                }
                return {
                    color: '--sys-color-orange-bright',
                    title: i18nString(UIStrings.elementStateS, {
                        PH1: ':' + pseudoState.join(', :')
                    })
                };
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!pseudoStateMarkerDecoratorInstance || forceNew) {
                    pseudoStateMarkerDecoratorInstance = new PseudoStateMarkerDecorator();
                }
                return pseudoStateMarkerDecoratorInstance;
            }
        }
    ]);
    return PseudoStateMarkerDecorator;
} //# sourceMappingURL=ElementsPanel.js.map
();


}),
"./panels/elements/ElementsTreeElement.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  EditTagBlocklist: function() { return EditTagBlocklist; },
  ElementsTreeElement: function() { return ElementsTreeElement; },
  ForbiddenClosingTagElements: function() { return ForbiddenClosingTagElements; },
  InitialChildrenLimit: function() { return InitialChildrenLimit; },
  adornerComparator: function() { return adornerComparator; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/host/host.js */ "./core/host/host.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../models/text_utils/text_utils.js */ "./models/text_utils/text_utils.js");
/* harmony import */var _third_party_codemirror_next_codemirror_next_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../third_party/codemirror.next/codemirror.next.js */ "./third_party/codemirror.next/codemirror.next.js");
/* harmony import */var _ui_components_adorners_adorners_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/components/adorners/adorners.js */ "./ui/components/adorners/adorners.js");
/* harmony import */var _ui_components_code_highlighter_code_highlighter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/components/code_highlighter/code_highlighter.js */ "./ui/components/code_highlighter/code_highlighter.js");
/* harmony import */var _ui_components_highlighting_highlighting_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/components/highlighting/highlighting.js */ "./ui/components/highlighting/highlighting.js");
/* harmony import */var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */var _ui_components_text_editor_text_editor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/components/text_editor/text_editor.js */ "./ui/components/text_editor/text_editor.js");
/* harmony import */var _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/legacy/components/utils/utils.js */ "./ui/legacy/components/utils/utils.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _emulation_emulation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../emulation/emulation.js */ "./panels/emulation/emulation.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _DOMPath_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./DOMPath.js */ "./panels/elements/DOMPath.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
/* harmony import */var _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ElementsTreeOutline.js */ "./panels/elements/ElementsTreeOutline.js");
/* harmony import */var _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ImagePreviewPopover.js */ "./panels/elements/ImagePreviewPopover.js");
/* harmony import */var _MarkerDecorator_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./MarkerDecorator.js */ "./panels/elements/MarkerDecorator.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*
 * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.
 * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _class_private_method_get(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _class_private_method_init(obj, privateSet) {
    _check_private_redeclaration(obj, privateSet);
    privateSet.add(obj);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






















var UIStrings = {
    /**
     *@description Title for Ad adorner. This iframe is marked as advertisement frame.
     */ thisFrameWasIdentifiedAsAnAd: 'This frame was identified as an ad frame',
    /**
     *@description A context menu item in the Elements panel. Force is used as a verb, indicating intention to make the state change.
     */ forceState: 'Force state',
    /**
     *@description Hint element title in Elements Tree Element of the Elements panel
     *@example {0} PH1
     */ useSInTheConsoleToReferToThis: 'Use {PH1} in the console to refer to this element.',
    /**
     *@description A context menu item in the Elements Tree Element of the Elements panel
     */ addAttribute: 'Add attribute',
    /**
     *@description Text to modify the attribute of an item
     */ editAttribute: 'Edit attribute',
    /**
     *@description Text to focus on something
     */ focus: 'Focus',
    /**
     *@description Text to scroll the displayed content into view
     */ scrollIntoView: 'Scroll into view',
    /**
     *@description A context menu item in the Elements Tree Element of the Elements panel
     */ editText: 'Edit text',
    /**
     *@description A context menu item in the Elements Tree Element of the Elements panel
     */ editAsHtml: 'Edit as HTML',
    /**
     *@description Text to cut an element, cut should be used as a verb
     */ cut: 'Cut',
    /**
     *@description Text for copying, copy should be used as a verb
     */ copy: 'Copy',
    /**
     *@description Text to paste an element, paste should be used as a verb
     */ paste: 'Paste',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copyOuterhtml: 'Copy outerHTML',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copySelector: 'Copy `selector`',
    /**
     *@description Text in Elements Tree Element of the Elements panel
     */ copyJsPath: 'Copy JS path',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copyStyles: 'Copy styles',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copyXpath: 'Copy XPath',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copyFullXpath: 'Copy full XPath',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copyElement: 'Copy element',
    /**
     *@description A context menu item in the Elements Tree Element of the Elements panel
     */ duplicateElement: 'Duplicate element',
    /**
     *@description Text to hide an element
     */ hideElement: 'Hide element',
    /**
     *@description A context menu item in the Elements Tree Element of the Elements panel
     */ deleteElement: 'Delete element',
    /**
     *@description Text to expand something recursively
     */ expandRecursively: 'Expand recursively',
    /**
     *@description Text to collapse children of a parent group
     */ collapseChildren: 'Collapse children',
    /**
     *@description Title of an action in the emulation tool to capture node screenshot
     */ captureNodeScreenshot: 'Capture node screenshot',
    /**
     *@description Title of a context menu item. When clicked DevTools goes to the Application panel and shows this specific iframe's details
     */ showFrameDetails: 'Show `iframe` details',
    /**
     *@description Text in Elements Tree Element of the Elements panel
     */ valueIsTooLargeToEdit: '<value is too large to edit>',
    /**
     *@description Element text content in Elements Tree Element of the Elements panel
     */ children: 'Children:',
    /**
     *@description ARIA label for Elements Tree adorners
     */ enableGridMode: 'Enable grid mode',
    /**
     *@description ARIA label for Elements Tree adorners
     */ disableGridMode: 'Disable grid mode',
    /**
     *@description Label of the adorner for flex elements in the Elements panel
     */ enableFlexMode: 'Enable flex mode',
    /**
     *@description Label of the adorner for flex elements in the Elements panel
     */ disableFlexMode: 'Disable flex mode',
    /**
     *@description Label of an adorner in the Elements panel. When clicked, it enables
     * the overlay showing CSS scroll snapping for the current element.
     */ enableScrollSnap: 'Enable scroll-snap overlay',
    /**
     *@description Label of an adorner in the Elements panel. When clicked, it disables
     * the overlay showing CSS scroll snapping for the current element.
     */ disableScrollSnap: 'Disable scroll-snap overlay',
    /**
     *@description Label of an adorner in the Elements panel. When clicked, it redirects
     * to the Media Panel.
     */ openMediaPanel: 'Jump to Media panel',
    /**
     *@description Text of a tooltip to redirect to another element in the Elements panel
     */ showPopoverTarget: 'Show popover target'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.registerUIStrings('panels/elements/ElementsTreeElement.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.getLocalizedString.bind(undefined, str_);
function isOpeningTag(context) {
    return context.tagType === "OPENING_TAG" /* TagType.OPENING */ ;
}
var _elementIssues = /*#__PURE__*/ new WeakMap(), _nodeElementToIssue = /*#__PURE__*/ new WeakMap(), _highlights = /*#__PURE__*/ new WeakMap(), _applyIssueStyleAndTooltip = /*#__PURE__*/ new WeakSet(), _highlightViolatingAttr = /*#__PURE__*/ new WeakSet(), _highlightTagAsViolating = /*#__PURE__*/ new WeakSet();
var ElementsTreeElement = /*#__PURE__*/ function(_UI_TreeOutline_TreeElement) {
    "use strict";
    _inherits(ElementsTreeElement, _UI_TreeOutline_TreeElement);
    var _super = _create_super(ElementsTreeElement);
    function ElementsTreeElement(node, isClosingTag) {
        _class_call_check(this, ElementsTreeElement);
        var _this;
        // The title will be updated in onattach.
        _this = _super.call(this);
        _class_private_method_init(_assert_this_initialized(_this), _applyIssueStyleAndTooltip);
        _class_private_method_init(_assert_this_initialized(_this), _highlightViolatingAttr);
        _class_private_method_init(_assert_this_initialized(_this), _highlightTagAsViolating);
        _define_property(_assert_this_initialized(_this), "nodeInternal", void 0);
        _define_property(_assert_this_initialized(_this), "treeOutline", void 0);
        _define_property(_assert_this_initialized(_this), "gutterContainer", void 0);
        _define_property(_assert_this_initialized(_this), "decorationsElement", void 0);
        _define_property(_assert_this_initialized(_this), "searchQuery", void 0);
        _define_property(_assert_this_initialized(_this), "expandedChildrenLimitInternal", void 0);
        _define_property(_assert_this_initialized(_this), "decorationsThrottler", void 0);
        _define_property(_assert_this_initialized(_this), "inClipboard", void 0);
        _define_property(_assert_this_initialized(_this), "hoveredInternal", void 0);
        _define_property(_assert_this_initialized(_this), "editing", void 0);
        _define_property(_assert_this_initialized(_this), "htmlEditElement", void 0);
        _define_property(_assert_this_initialized(_this), "expandAllButtonElement", void 0);
        _define_property(_assert_this_initialized(_this), "selectionElement", void 0);
        _define_property(_assert_this_initialized(_this), "hintElement", void 0);
        _define_property(_assert_this_initialized(_this), "contentElement", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _elementIssues, {
            writable: true,
            value: new Map()
        });
        _class_private_field_init(_assert_this_initialized(_this), _nodeElementToIssue, {
            writable: true,
            value: new Map()
        });
        _class_private_field_init(_assert_this_initialized(_this), _highlights, {
            writable: true,
            value: []
        });
        _define_property(_assert_this_initialized(_this), "tagTypeContext", void 0);
        _this.nodeInternal = node;
        _this.treeOutline = null;
        _this.listItemElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.treeItem().parent('elementsTreeOutline').track({
            keydown: 'ArrowUp|ArrowDown|ArrowLeft|ArrowRight|Backspace|Delete|Enter|Space|Home|End',
            drag: true,
            click: true
        })));
        _this.contentElement = _this.listItemElement.createChild('div');
        _this.gutterContainer = _this.contentElement.createChild('div', 'gutter-container');
        _this.gutterContainer.addEventListener('click', _this.showContextMenu.bind(_assert_this_initialized(_this)));
        var gutterMenuIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_10__.Icon.Icon();
        gutterMenuIcon.data = {
            color: 'var(--icon-default)',
            iconName: 'dots-horizontal',
            height: '16px',
            width: '16px'
        };
        _this.gutterContainer.append(gutterMenuIcon);
        _this.decorationsElement = _this.gutterContainer.createChild('div', 'hidden');
        _this.searchQuery = null;
        _this.expandedChildrenLimitInternal = InitialChildrenLimit;
        _this.decorationsThrottler = new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Throttler.Throttler(100);
        _this.inClipboard = false;
        _this.hoveredInternal = false;
        _this.editing = null;
        if (isClosingTag) {
            _this.tagTypeContext = {
                tagType: "CLOSING_TAG" /* TagType.CLOSING */ 
            };
        } else {
            _this.tagTypeContext = {
                tagType: "OPENING_TAG" /* TagType.OPENING */ ,
                adornerContainer: _this.contentElement.createChild('div', 'adorner-container hidden'),
                adorners: [],
                styleAdorners: [],
                adornersThrottler: new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Throttler.Throttler(100),
                canAddAttributes: _this.nodeInternal.nodeType() === Node.ELEMENT_NODE
            };
            void _this.updateStyleAdorners();
            if (node.isAdFrameNode()) {
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.AD);
                var adorner = _this.adorn(config);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.Tooltip.Tooltip.install(adorner, i18nString(UIStrings.thisFrameWasIdentifiedAsAnAd));
            }
        }
        _this.expandAllButtonElement = null;
        return _this;
    }
    _create_class(ElementsTreeElement, [
        {
            key: "isClosingTag",
            value: function isClosingTag() {
                return !isOpeningTag(this.tagTypeContext);
            }
        },
        {
            key: "node",
            value: function node() {
                return this.nodeInternal;
            }
        },
        {
            key: "isEditing",
            value: function isEditing() {
                return Boolean(this.editing);
            }
        },
        {
            key: "highlightSearchResults",
            value: function highlightSearchResults(searchQuery) {
                this.searchQuery = searchQuery;
                if (!this.editing) {
                    this.highlightSearchResultsInternal();
                }
            }
        },
        {
            key: "hideSearchHighlights",
            value: function hideSearchHighlights() {
                _ui_components_highlighting_highlighting_js__WEBPACK_IMPORTED_MODULE_9__.HighlightManager.HighlightManager.instance().removeHighlights(_class_private_field_get(this, _highlights));
                _class_private_field_set(this, _highlights, []);
            }
        },
        {
            key: "setInClipboard",
            value: function setInClipboard(inClipboard) {
                if (this.inClipboard === inClipboard) {
                    return;
                }
                this.inClipboard = inClipboard;
                this.listItemElement.classList.toggle('in-clipboard', inClipboard);
            }
        },
        {
            key: "hovered",
            get: function get() {
                return this.hoveredInternal;
            },
            set: function set(isHovered) {
                if (this.hoveredInternal === isHovered) {
                    return;
                }
                this.hoveredInternal = isHovered;
                if (this.listItemElement) {
                    if (isHovered) {
                        this.createSelection();
                        this.listItemElement.classList.add('hovered');
                    } else {
                        this.listItemElement.classList.remove('hovered');
                    }
                }
            }
        },
        {
            key: "addIssue",
            value: function addIssue(newIssue) {
                if (_class_private_field_get(this, _elementIssues).has(newIssue.primaryKey())) {
                    return;
                }
                _class_private_field_get(this, _elementIssues).set(newIssue.primaryKey(), newIssue);
                _class_private_method_get(this, _applyIssueStyleAndTooltip, applyIssueStyleAndTooltip).call(this, newIssue);
            }
        },
        {
            key: "issuesByNodeElement",
            get: function get() {
                return _class_private_field_get(this, _nodeElementToIssue);
            }
        },
        {
            key: "expandedChildrenLimit",
            value: function expandedChildrenLimit() {
                return this.expandedChildrenLimitInternal;
            }
        },
        {
            key: "setExpandedChildrenLimit",
            value: function setExpandedChildrenLimit(expandedChildrenLimit) {
                this.expandedChildrenLimitInternal = expandedChildrenLimit;
            }
        },
        {
            key: "createSlotLink",
            value: function createSlotLink(nodeShortcut) {
                if (!isOpeningTag(this.tagTypeContext)) {
                    return;
                }
                if (nodeShortcut) {
                    var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.SLOT);
                    this.tagTypeContext.slot = this.adornSlot(config, this.tagTypeContext);
                    var deferredNode = nodeShortcut.deferredNode;
                    this.tagTypeContext.slot.addEventListener('click', function() {
                        deferredNode.resolve(function(node) {
                            void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(node);
                        });
                    });
                    this.tagTypeContext.slot.addEventListener('mousedown', function(e) {
                        return e.consume();
                    }, false);
                }
            }
        },
        {
            key: "createSelection",
            value: function createSelection() {
                var contentElement = this.contentElement;
                if (!contentElement) {
                    return;
                }
                if (!this.selectionElement) {
                    this.selectionElement = document.createElement('div');
                    this.selectionElement.className = 'selection fill';
                    this.selectionElement.style.setProperty('margin-left', -this.computeLeftIndent() + 'px');
                    contentElement.prepend(this.selectionElement);
                }
            }
        },
        {
            key: "createHint",
            value: function createHint() {
                if (this.contentElement && !this.hintElement) {
                    this.hintElement = this.contentElement.createChild('span', 'selected-hint');
                    var selectedElementCommand = '$0';
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.Tooltip.Tooltip.install(this.hintElement, i18nString(UIStrings.useSInTheConsoleToReferToThis, {
                        PH1: selectedElementCommand
                    }));
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ARIAUtils.markAsHidden(this.hintElement);
                }
            }
        },
        {
            key: "onbind",
            value: function onbind() {
                if (this.treeOutline && !this.isClosingTag()) {
                    this.treeOutline.treeElementByNode.set(this.nodeInternal, this);
                }
            }
        },
        {
            key: "onunbind",
            value: function onunbind() {
                if (this.editing) {
                    this.editing.cancel();
                }
                if (this.treeOutline && this.treeOutline.treeElementByNode.get(this.nodeInternal) === this) {
                    this.treeOutline.treeElementByNode.delete(this.nodeInternal);
                }
            }
        },
        {
            key: "onattach",
            value: function onattach() {
                if (this.hoveredInternal) {
                    this.createSelection();
                    this.listItemElement.classList.add('hovered');
                }
                this.updateTitle();
                this.listItemElement.draggable = true;
            }
        },
        {
            key: "onpopulate",
            value: function onpopulate() {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        if (_this.treeOutline) {
                            return [
                                2,
                                _this.treeOutline.populateTreeElement(_this)
                            ];
                        }
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "expandRecursively",
            value: function expandRecursively() {
                var _this = this;
                var _this1 = this, _superprop_get_expandRecursively = function() {
                    return _get(_get_prototype_of(ElementsTreeElement.prototype), "expandRecursively", _this);
                };
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this1.nodeInternal.getSubtree(-1, true)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    4,
                                    _superprop_get_expandRecursively().call(_this1, Number.MAX_VALUE)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "onexpand",
            value: function onexpand() {
                if (this.isClosingTag()) {
                    return;
                }
                this.updateTitle();
            }
        },
        {
            key: "oncollapse",
            value: function oncollapse() {
                if (this.isClosingTag()) {
                    return;
                }
                this.updateTitle();
            }
        },
        {
            key: "select",
            value: function select(omitFocus, selectedByUser) {
                if (this.editing) {
                    return false;
                }
                return _get(_get_prototype_of(ElementsTreeElement.prototype), "select", this).call(this, omitFocus, selectedByUser);
            }
        },
        {
            key: "onselect",
            value: function onselect(selectedByUser) {
                if (!this.treeOutline) {
                    return false;
                }
                this.treeOutline.suppressRevealAndSelect = true;
                this.treeOutline.selectDOMNode(this.nodeInternal, selectedByUser);
                if (selectedByUser) {
                    this.nodeInternal.highlight();
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.actionTaken(_core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.UserMetrics.Action.ChangeInspectedNodeInElementsPanel);
                }
                this.createSelection();
                this.createHint();
                this.treeOutline.suppressRevealAndSelect = false;
                return true;
            }
        },
        {
            key: "ondelete",
            value: function ondelete() {
                if (!this.treeOutline) {
                    return false;
                }
                var startTagTreeElement = this.treeOutline.findTreeElement(this.nodeInternal);
                startTagTreeElement ? startTagTreeElement.remove() : this.remove();
                return true;
            }
        },
        {
            key: "onenter",
            value: function onenter() {
                // On Enter or Return start editing the first attribute
                // or create a new attribute on the selected element.
                if (this.editing) {
                    return false;
                }
                this.startEditing();
                // prevent a newline from being immediately inserted
                return true;
            }
        },
        {
            key: "selectOnMouseDown",
            value: function selectOnMouseDown(event) {
                _get(_get_prototype_of(ElementsTreeElement.prototype), "selectOnMouseDown", this).call(this, event);
                if (this.editing) {
                    return;
                }
                // Prevent selecting the nearest word on double click.
                if (event.detail >= 2) {
                    event.preventDefault();
                }
            }
        },
        {
            key: "ondblclick",
            value: function ondblclick(event) {
                if (this.editing || this.isClosingTag()) {
                    return false;
                }
                if (this.startEditingTarget(event.target)) {
                    return false;
                }
                if (this.isExpandable() && !this.expanded) {
                    this.expand();
                }
                return false;
            }
        },
        {
            key: "hasEditableNode",
            value: function hasEditableNode() {
                return !this.nodeInternal.isShadowRoot() && !this.nodeInternal.ancestorUserAgentShadowRoot();
            }
        },
        {
            key: "insertInLastAttributePosition",
            value: function insertInLastAttributePosition(tag, node) {
                if (tag.getElementsByClassName('webkit-html-attribute').length > 0) {
                    tag.insertBefore(node, tag.lastChild);
                } else if (tag.textContent !== null) {
                    var matchResult = tag.textContent.match(/^<(.*?)>$/);
                    if (!matchResult) {
                        return;
                    }
                    var nodeName = matchResult[1];
                    tag.textContent = '';
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(tag, '<' + nodeName);
                    tag.appendChild(node);
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(tag, '>');
                }
            }
        },
        {
            key: "startEditingTarget",
            value: function startEditingTarget(eventTarget) {
                if (!this.treeOutline || this.treeOutline.selectedDOMNode() !== this.nodeInternal) {
                    return false;
                }
                if (this.nodeInternal.nodeType() !== Node.ELEMENT_NODE && this.nodeInternal.nodeType() !== Node.TEXT_NODE) {
                    return false;
                }
                var textNode = eventTarget.enclosingNodeOrSelfWithClass('webkit-html-text-node');
                if (textNode) {
                    return this.startEditingTextNode(textNode);
                }
                var attribute = eventTarget.enclosingNodeOrSelfWithClass('webkit-html-attribute');
                if (attribute) {
                    return this.startEditingAttribute(attribute, eventTarget);
                }
                var tagName = eventTarget.enclosingNodeOrSelfWithClass('webkit-html-tag-name');
                if (tagName) {
                    return this.startEditingTagName(tagName);
                }
                var newAttribute = eventTarget.enclosingNodeOrSelfWithClass('add-attribute');
                if (newAttribute) {
                    return this.addNewAttribute();
                }
                return false;
            }
        },
        {
            key: "showContextMenu",
            value: function showContextMenu(event) {
                this.treeOutline && this.treeOutline.showContextMenu(this, event);
            }
        },
        {
            key: "populateTagContextMenu",
            value: function populateTagContextMenu(contextMenu, event) {
                // Add attribute-related actions.
                var treeElement = this.isClosingTag() && this.treeOutline ? this.treeOutline.findTreeElement(this.nodeInternal) : this;
                if (!treeElement) {
                    return;
                }
                contextMenu.editSection().appendItem(i18nString(UIStrings.addAttribute), treeElement.addNewAttribute.bind(treeElement), {
                    jslogContext: 'add-attribute'
                });
                var target = event.target;
                var attribute = target.enclosingNodeOrSelfWithClass('webkit-html-attribute');
                var newAttribute = target.enclosingNodeOrSelfWithClass('add-attribute');
                if (attribute && !newAttribute) {
                    contextMenu.editSection().appendItem(i18nString(UIStrings.editAttribute), this.startEditingAttribute.bind(this, attribute, target), {
                        jslogContext: 'edit-attribute'
                    });
                }
                this.populateNodeContextMenu(contextMenu);
                ElementsTreeElement.populateForcedPseudoStateItems(contextMenu, treeElement.node());
                this.populateScrollIntoView(contextMenu);
                var _this = this;
                contextMenu.viewSection().appendItem(i18nString(UIStrings.focus), /*#__PURE__*/ _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.nodeInternal.focus()
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                }), {
                    jslogContext: 'focus'
                });
            }
        },
        {
            key: "populatePseudoElementContextMenu",
            value: function populatePseudoElementContextMenu(contextMenu) {
                if (this.childCount() !== 0) {
                    this.populateExpandRecursively(contextMenu);
                }
                this.populateScrollIntoView(contextMenu);
            }
        },
        {
            key: "populateExpandRecursively",
            value: function populateExpandRecursively(contextMenu) {
                contextMenu.viewSection().appendItem(i18nString(UIStrings.expandRecursively), this.expandRecursively.bind(this), {
                    jslogContext: 'expand-recursively'
                });
            }
        },
        {
            key: "populateScrollIntoView",
            value: function populateScrollIntoView(contextMenu) {
                var _this = this;
                contextMenu.viewSection().appendItem(i18nString(UIStrings.scrollIntoView), function() {
                    return _this.nodeInternal.scrollIntoView();
                }, {
                    jslogContext: 'scroll-into-view'
                });
            }
        },
        {
            key: "populateTextContextMenu",
            value: function populateTextContextMenu(contextMenu, textNode) {
                if (!this.editing) {
                    contextMenu.editSection().appendItem(i18nString(UIStrings.editText), this.startEditingTextNode.bind(this, textNode), {
                        jslogContext: 'edit-text'
                    });
                }
                this.populateNodeContextMenu(contextMenu);
            }
        },
        {
            key: "populateNodeContextMenu",
            value: function populateNodeContextMenu(contextMenu) {
                var _this = this;
                // Add free-form node-related actions.
                var isEditable = this.hasEditableNode();
                // clang-format off
                if (isEditable && !this.editing) {
                    contextMenu.editSection().appendItem(i18nString(UIStrings.editAsHtml), this.editAsHTML.bind(this), {
                        jslogContext: 'elements.edit-as-html'
                    });
                }
                // clang-format on
                var isShadowRoot = this.nodeInternal.isShadowRoot();
                var createShortcut = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.KeyboardShortcut.KeyboardShortcut.shortcutToString.bind(null);
                var modifier = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.KeyboardShortcut.Modifiers.CtrlOrMeta;
                var treeOutline = this.treeOutline;
                if (!treeOutline) {
                    return;
                }
                var menuItem;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ActionRegistry.ActionRegistry.instance().hasAction('freestyler.element-panel-context')) {
                    contextMenu.headerSection().appendAction('freestyler.element-panel-context');
                }
                menuItem = contextMenu.clipboardSection().appendItem(i18nString(UIStrings.cut), treeOutline.performCopyOrCut.bind(treeOutline, true, this.nodeInternal), {
                    disabled: !this.hasEditableNode(),
                    jslogContext: 'cut'
                });
                menuItem.setShortcut(createShortcut('X', modifier));
                // Place it here so that all "Copy"-ing items stick together.
                var copyMenu = contextMenu.clipboardSection().appendSubMenuItem(i18nString(UIStrings.copy), false, 'copy');
                var section = copyMenu.section();
                if (!isShadowRoot) {
                    menuItem = section.appendItem(i18nString(UIStrings.copyOuterhtml), treeOutline.performCopyOrCut.bind(treeOutline, false, this.nodeInternal), {
                        jslogContext: 'copy-outer-html'
                    });
                    menuItem.setShortcut(createShortcut('V', modifier));
                }
                if (this.nodeInternal.nodeType() === Node.ELEMENT_NODE) {
                    section.appendItem(i18nString(UIStrings.copySelector), this.copyCSSPath.bind(this), {
                        jslogContext: 'copy-selector'
                    });
                    section.appendItem(i18nString(UIStrings.copyJsPath), this.copyJSPath.bind(this), {
                        disabled: !(0,_DOMPath_js__WEBPACK_IMPORTED_MODULE_17__.canGetJSPath)(this.nodeInternal),
                        jslogContext: 'copy-js-path'
                    });
                    section.appendItem(i18nString(UIStrings.copyStyles), this.copyStyles.bind(this), {
                        jslogContext: 'elements.copy-styles'
                    });
                }
                if (!isShadowRoot) {
                    section.appendItem(i18nString(UIStrings.copyXpath), this.copyXPath.bind(this), {
                        jslogContext: 'copy-xpath'
                    });
                    section.appendItem(i18nString(UIStrings.copyFullXpath), this.copyFullXPath.bind(this), {
                        jslogContext: 'copy-full-xpath'
                    });
                }
                if (!isShadowRoot) {
                    menuItem = copyMenu.clipboardSection().appendItem(i18nString(UIStrings.copyElement), treeOutline.performCopyOrCut.bind(treeOutline, false, this.nodeInternal), {
                        jslogContext: 'copy-element'
                    });
                    menuItem.setShortcut(createShortcut('C', modifier));
                    // Duplicate element, disabled on root element and ShadowDOM.
                    var isRootElement = !this.nodeInternal.parentNode || this.nodeInternal.parentNode.nodeName() === '#document';
                    menuItem = contextMenu.editSection().appendItem(i18nString(UIStrings.duplicateElement), treeOutline.duplicateNode.bind(treeOutline, this.nodeInternal), {
                        disabled: this.nodeInternal.isInShadowTree() || isRootElement,
                        jslogContext: 'elements.duplicate-element'
                    });
                }
                menuItem = contextMenu.clipboardSection().appendItem(i18nString(UIStrings.paste), treeOutline.pasteNode.bind(treeOutline, this.nodeInternal), {
                    disabled: !treeOutline.canPaste(this.nodeInternal),
                    jslogContext: 'paste'
                });
                menuItem.setShortcut(createShortcut('V', modifier));
                menuItem = contextMenu.debugSection().appendCheckboxItem(i18nString(UIStrings.hideElement), treeOutline.toggleHideElement.bind(treeOutline, this.nodeInternal), {
                    checked: treeOutline.isToggledToHidden(this.nodeInternal),
                    jslogContext: 'elements.hide-element'
                });
                menuItem.setShortcut(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ShortcutRegistry.ShortcutRegistry.instance().shortcutTitleForAction('elements.hide-element') || '');
                if (isEditable) {
                    contextMenu.editSection().appendItem(i18nString(UIStrings.deleteElement), this.remove.bind(this), {
                        jslogContext: 'delete-element'
                    });
                }
                this.populateExpandRecursively(contextMenu);
                contextMenu.viewSection().appendItem(i18nString(UIStrings.collapseChildren), this.collapseChildren.bind(this), {
                    jslogContext: 'collapse-children'
                });
                var deviceModeWrapperAction = new _emulation_emulation_js__WEBPACK_IMPORTED_MODULE_15__.DeviceModeWrapper.ActionDelegate();
                contextMenu.viewSection().appendItem(i18nString(UIStrings.captureNodeScreenshot), deviceModeWrapperAction.handleAction.bind(null, _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.Context.Context.instance(), 'emulation.capture-node-screenshot'), {
                    jslogContext: 'emulation.capture-node-screenshot'
                });
                if (this.nodeInternal.frameOwnerFrameId()) {
                    contextMenu.viewSection().appendItem(i18nString(UIStrings.showFrameDetails), function() {
                        var frameOwnerFrameId = _this.nodeInternal.frameOwnerFrameId();
                        if (frameOwnerFrameId) {
                            var frame = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_4__.FrameManager.FrameManager.instance().getFrame(frameOwnerFrameId);
                            void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(frame);
                        }
                    }, {
                        jslogContext: 'show-frame-details'
                    });
                }
            }
        },
        {
            key: "startEditing",
            value: function startEditing() {
                if (!this.treeOutline || this.treeOutline.selectedDOMNode() !== this.nodeInternal) {
                    return;
                }
                var listItem = this.listItemElement;
                if (isOpeningTag(this.tagTypeContext) && this.tagTypeContext.canAddAttributes) {
                    var attribute = listItem.getElementsByClassName('webkit-html-attribute')[0];
                    if (attribute) {
                        return this.startEditingAttribute(attribute, attribute.getElementsByClassName('webkit-html-attribute-value')[0]);
                    }
                    return this.addNewAttribute();
                }
                if (this.nodeInternal.nodeType() === Node.TEXT_NODE) {
                    var textNode = listItem.getElementsByClassName('webkit-html-text-node')[0];
                    if (textNode) {
                        return this.startEditingTextNode(textNode);
                    }
                }
                return;
            }
        },
        {
            key: "addNewAttribute",
            value: function addNewAttribute() {
                // Cannot just convert the textual html into an element without
                // a parent node. Use a temporary span container for the HTML.
                var container = document.createElement('span');
                var attr = this.buildAttributeDOM(container, ' ', '', null);
                attr.style.marginLeft = '2px'; // overrides the .editing margin rule
                attr.style.marginRight = '2px'; // overrides the .editing margin rule
                attr.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value('new-attribute').track({
                    change: true,
                    resize: true
                })));
                var tag = this.listItemElement.getElementsByClassName('webkit-html-tag')[0];
                this.insertInLastAttributePosition(tag, attr);
                attr.scrollIntoViewIfNeeded(true);
                return this.startEditingAttribute(attr, attr);
            }
        },
        {
            key: "triggerEditAttribute",
            value: function triggerEditAttribute(attributeName) {
                var attributeElements = this.listItemElement.getElementsByClassName('webkit-html-attribute-name');
                for(var i = 0, len = attributeElements.length; i < len; ++i){
                    if (attributeElements[i].textContent === attributeName) {
                        for(var elem = attributeElements[i].nextSibling; elem; elem = elem.nextSibling){
                            if (elem.nodeType !== Node.ELEMENT_NODE) {
                                continue;
                            }
                            if (elem.classList.contains('webkit-html-attribute-value')) {
                                return this.startEditingAttribute(elem.parentElement, elem);
                            }
                        }
                    }
                }
                return;
            }
        },
        {
            key: "startEditingAttribute",
            value: function startEditingAttribute(attribute, elementForSelection) {
                var _this_nodeInternal_getAttribute;
                console.assert(this.listItemElement.isAncestor(attribute));
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.isBeingEdited(attribute)) {
                    return true;
                }
                var attributeNameElement = attribute.getElementsByClassName('webkit-html-attribute-name')[0];
                if (!attributeNameElement) {
                    return false;
                }
                var attributeName = attributeNameElement.textContent;
                var attributeValueElement = attribute.getElementsByClassName('webkit-html-attribute-value')[0];
                // Make sure elementForSelection is not a child of attributeValueElement.
                elementForSelection = attributeValueElement.isAncestor(elementForSelection) ? attributeValueElement : elementForSelection;
                function removeZeroWidthSpaceRecursive(node) {
                    if (node.nodeType === Node.TEXT_NODE) {
                        node.nodeValue = node.nodeValue ? node.nodeValue.replace(/\u200B/g, '') : '';
                        return;
                    }
                    if (node.nodeType !== Node.ELEMENT_NODE) {
                        return;
                    }
                    for(var child = node.firstChild; child; child = child.nextSibling){
                        removeZeroWidthSpaceRecursive(child);
                    }
                }
                var attributeValue = attributeName && attributeValueElement ? (_this_nodeInternal_getAttribute = this.nodeInternal.getAttribute(attributeName)) === null || _this_nodeInternal_getAttribute === void 0 ? void 0 : _this_nodeInternal_getAttribute.replaceAll('"', '&quot;') : undefined;
                if (attributeValue !== undefined) {
                    attributeValueElement.setTextContentTruncatedIfNeeded(attributeValue, i18nString(UIStrings.valueIsTooLargeToEdit));
                }
                // Remove zero-width spaces that were added by nodeTitleInfo.
                removeZeroWidthSpaceRecursive(attribute);
                var config = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.InplaceEditor.Config(this.attributeEditingCommitted.bind(this), this.editingCancelled.bind(this), attributeName || undefined);
                function postKeyDownFinishHandler(event) {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.handleElementValueModifications(event, attribute);
                    return '';
                }
                if (!_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.ParsedURL.ParsedURL.fromString(attributeValueElement.textContent || '')) {
                    config.setPostKeydownFinishHandler(postKeyDownFinishHandler);
                }
                this.updateEditorHandles(attribute, config);
                var componentSelection = this.listItemElement.getComponentSelection();
                componentSelection && componentSelection.selectAllChildren(elementForSelection);
                return true;
            }
        },
        {
            key: "startEditingTextNode",
            value: function startEditingTextNode(textNodeElement) {
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.isBeingEdited(textNodeElement)) {
                    return true;
                }
                var textNode = this.nodeInternal;
                // We only show text nodes inline in elements if the element only
                // has a single child, and that child is a text node.
                if (textNode.nodeType() === Node.ELEMENT_NODE && textNode.firstChild) {
                    textNode = textNode.firstChild;
                }
                var container = textNodeElement.enclosingNodeOrSelfWithClass('webkit-html-text-node');
                if (container) {
                    container.textContent = textNode.nodeValue();
                } // Strip the CSS or JS highlighting if present.
                var config = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.InplaceEditor.Config(this.textNodeEditingCommitted.bind(this, textNode), this.editingCancelled.bind(this));
                this.updateEditorHandles(textNodeElement, config);
                var componentSelection = this.listItemElement.getComponentSelection();
                componentSelection && componentSelection.selectAllChildren(textNodeElement);
                return true;
            }
        },
        {
            key: "startEditingTagName",
            value: function startEditingTagName(tagNameElement) {
                var _this = this;
                if (!tagNameElement) {
                    tagNameElement = this.listItemElement.getElementsByClassName('webkit-html-tag-name')[0];
                    if (!tagNameElement) {
                        return false;
                    }
                }
                var tagName = tagNameElement.textContent;
                if (tagName !== null && EditTagBlocklist.has(tagName.toLowerCase())) {
                    return false;
                }
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.isBeingEdited(tagNameElement)) {
                    return true;
                }
                var closingTagElement = this.distinctClosingTagElement();
                function keyupListener() {
                    if (closingTagElement && tagNameElement) {
                        closingTagElement.textContent = '</' + tagNameElement.textContent + '>';
                    }
                }
                var keydownListener = function(event) {
                    if (event.key !== ' ') {
                        return;
                    }
                    _this.editing && _this.editing.commit();
                    event.consume(true);
                };
                function editingCommitted(element, newTagName, oldText, tagName, moveDirection) {
                    if (!tagNameElement) {
                        return;
                    }
                    tagNameElement.removeEventListener('keyup', keyupListener, false);
                    tagNameElement.removeEventListener('keydown', keydownListener, false);
                    this.tagNameEditingCommitted(element, newTagName, oldText, tagName, moveDirection);
                }
                function editingCancelled(element, tagName) {
                    if (!tagNameElement) {
                        return;
                    }
                    tagNameElement.removeEventListener('keyup', keyupListener, false);
                    tagNameElement.removeEventListener('keydown', keydownListener, false);
                    this.editingCancelled(element, tagName);
                }
                tagNameElement.addEventListener('keyup', keyupListener, false);
                tagNameElement.addEventListener('keydown', keydownListener, false);
                var config = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.InplaceEditor.Config(editingCommitted.bind(this), editingCancelled.bind(this), tagName);
                this.updateEditorHandles(tagNameElement, config);
                var componentSelection = this.listItemElement.getComponentSelection();
                componentSelection && componentSelection.selectAllChildren(tagNameElement);
                return true;
            }
        },
        {
            key: "updateEditorHandles",
            value: function updateEditorHandles(element, config) {
                var editorHandles = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.InplaceEditor.InplaceEditor.startEditing(element, config);
                if (!editorHandles) {
                    this.editing = null;
                } else {
                    this.editing = {
                        commit: editorHandles.commit,
                        cancel: editorHandles.cancel,
                        editor: undefined,
                        resize: function() {}
                    };
                }
            }
        },
        {
            key: "startEditingAsHTML",
            value: function startEditingAsHTML(commitCallback, disposeCallback, maybeInitialValue) {
                var _this = this;
                return _async_to_generator(function() {
                    var initialValue, child, editor;
                    function resize() {
                        if (this.treeOutline && this.htmlEditElement) {
                            this.htmlEditElement.style.width = this.treeOutline.visibleWidth() - this.computeLeftIndent() - 30 + 'px';
                        }
                    }
                    function commit() {
                        if (this.editing && this.editing.editor) {
                            commitCallback(initialValue, this.editing.editor.state.doc.toString());
                        }
                        dispose.call(this);
                    }
                    function dispose() {
                        if (!this.editing || !this.editing.editor) {
                            return;
                        }
                        this.editing = null;
                        // Remove editor.
                        if (this.htmlEditElement) {
                            this.listItemElement.removeChild(this.htmlEditElement);
                        }
                        this.htmlEditElement = undefined;
                        // Unhide children item.
                        if (this.childrenListElement) {
                            this.childrenListElement.style.removeProperty('display');
                        }
                        // Unhide header items.
                        var child = this.listItemElement.firstChild;
                        while(child){
                            child.style.removeProperty('display');
                            child = child.nextSibling;
                        }
                        if (this.treeOutline) {
                            this.treeOutline.setMultilineEditing(null);
                            this.treeOutline.focus();
                        }
                        disposeCallback();
                    }
                    return _ts_generator(this, function(_state) {
                        if (maybeInitialValue === null) {
                            return [
                                2
                            ];
                        }
                        if (_this.editing) {
                            return [
                                2
                            ];
                        }
                        initialValue = _this.convertWhitespaceToEntities(maybeInitialValue).text;
                        _this.htmlEditElement = document.createElement('div');
                        _this.htmlEditElement.className = 'source-code elements-tree-editor';
                        // Hide header items.
                        child = _this.listItemElement.firstChild;
                        while(child){
                            child.style.display = 'none';
                            child = child.nextSibling;
                        }
                        // Hide children item.
                        if (_this.childrenListElement) {
                            _this.childrenListElement.style.display = 'none';
                        }
                        // Append editor.
                        _this.listItemElement.append(_this.htmlEditElement);
                        _this.htmlEditElement.addEventListener('keydown', function(event) {
                            if (event.key === 'Escape') {
                                event.consume(true);
                            }
                        });
                        editor = new _ui_components_text_editor_text_editor_js__WEBPACK_IMPORTED_MODULE_11__.TextEditor.TextEditor(_third_party_codemirror_next_codemirror_next_js__WEBPACK_IMPORTED_MODULE_6__.EditorState.create({
                            doc: initialValue,
                            extensions: [
                                _third_party_codemirror_next_codemirror_next_js__WEBPACK_IMPORTED_MODULE_6__.keymap.of([
                                    {
                                        key: 'Mod-Enter',
                                        run: function() {
                                            var _this_editing;
                                            (_this_editing = _this.editing) === null || _this_editing === void 0 ? void 0 : _this_editing.commit();
                                            return true;
                                        }
                                    },
                                    {
                                        key: 'Escape',
                                        run: function() {
                                            var _this_editing;
                                            (_this_editing = _this.editing) === null || _this_editing === void 0 ? void 0 : _this_editing.cancel();
                                            return true;
                                        }
                                    }
                                ]),
                                _ui_components_text_editor_text_editor_js__WEBPACK_IMPORTED_MODULE_11__.Config.baseConfiguration(initialValue),
                                _ui_components_text_editor_text_editor_js__WEBPACK_IMPORTED_MODULE_11__.Config.closeBrackets.instance(),
                                _ui_components_text_editor_text_editor_js__WEBPACK_IMPORTED_MODULE_11__.Config.autocompletion.instance(),
                                _third_party_codemirror_next_codemirror_next_js__WEBPACK_IMPORTED_MODULE_6__.html.html({
                                    autoCloseTags: false,
                                    selfClosingTags: true
                                }),
                                _ui_components_text_editor_text_editor_js__WEBPACK_IMPORTED_MODULE_11__.Config.domWordWrap.instance(),
                                _third_party_codemirror_next_codemirror_next_js__WEBPACK_IMPORTED_MODULE_6__.EditorView.theme({
                                    '&.cm-editor': {
                                        maxHeight: '300px'
                                    },
                                    '.cm-scroller': {
                                        overflowY: 'auto'
                                    }
                                }),
                                _third_party_codemirror_next_codemirror_next_js__WEBPACK_IMPORTED_MODULE_6__.EditorView.domEventHandlers({
                                    focusout: function(event) {
                                        // The relatedTarget is null when no element gains focus, e.g. switching windows.
                                        var relatedTarget = event.relatedTarget;
                                        if (relatedTarget && !relatedTarget.isSelfOrDescendant(editor)) {
                                            _this.editing && _this.editing.commit();
                                        }
                                    }
                                })
                            ]
                        }));
                        _this.editing = {
                            commit: commit.bind(_this),
                            cancel: dispose.bind(_this),
                            editor: editor,
                            resize: resize.bind(_this)
                        };
                        resize.call(_this);
                        _this.htmlEditElement.appendChild(editor);
                        editor.editor.focus();
                        _this.treeOutline && _this.treeOutline.setMultilineEditing(_this.editing);
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "attributeEditingCommitted",
            value: function attributeEditingCommitted(element, newText, oldText, attributeName, moveDirection) {
                this.editing = null;
                var treeOutline = this.treeOutline;
                function moveToNextAttributeIfNeeded(error) {
                    if (error) {
                        this.editingCancelled(element, attributeName);
                    }
                    if (!moveDirection) {
                        return;
                    }
                    if (treeOutline) {
                        treeOutline.runPendingUpdates();
                        treeOutline.focus();
                    }
                    // Search for the attribute's position, and then decide where to move to.
                    var attributes = this.nodeInternal.attributes();
                    for(var i = 0; i < attributes.length; ++i){
                        if (attributes[i].name !== attributeName) {
                            continue;
                        }
                        if (moveDirection === 'backward') {
                            if (i === 0) {
                                this.startEditingTagName();
                            } else {
                                this.triggerEditAttribute(attributes[i - 1].name);
                            }
                        } else {
                            if (i === attributes.length - 1) {
                                this.addNewAttribute();
                            } else {
                                this.triggerEditAttribute(attributes[i + 1].name);
                            }
                        }
                        return;
                    }
                    // Moving From the "New Attribute" position.
                    if (moveDirection === 'backward') {
                        if (newText === ' ') {
                            // Moving from "New Attribute" that was not edited
                            if (attributes.length > 0) {
                                this.triggerEditAttribute(attributes[attributes.length - 1].name);
                            }
                        } else {
                            // Moving from "New Attribute" that holds new value
                            if (attributes.length > 1) {
                                this.triggerEditAttribute(attributes[attributes.length - 2].name);
                            }
                        }
                    } else if (moveDirection === 'forward') {
                        if (!_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.isWhitespace(newText)) {
                            this.addNewAttribute();
                        } else {
                            this.startEditingTagName();
                        }
                    }
                }
                if ((attributeName.trim() || newText.trim()) && oldText !== newText) {
                    this.nodeInternal.setAttribute(attributeName, newText, moveToNextAttributeIfNeeded.bind(this));
                    return;
                }
                this.updateTitle();
                moveToNextAttributeIfNeeded.call(this);
            }
        },
        {
            key: "tagNameEditingCommitted",
            value: function tagNameEditingCommitted(element, newText, oldText, tagName, moveDirection) {
                this.editing = null;
                var self = this;
                function cancel() {
                    var closingTagElement = self.distinctClosingTagElement();
                    if (closingTagElement) {
                        closingTagElement.textContent = '</' + tagName + '>';
                    }
                    self.editingCancelled(element, tagName);
                    moveToNextAttributeIfNeeded.call(self);
                }
                function moveToNextAttributeIfNeeded() {
                    if (moveDirection !== 'forward') {
                        this.addNewAttribute();
                        return;
                    }
                    var attributes = this.nodeInternal.attributes();
                    if (attributes.length > 0) {
                        this.triggerEditAttribute(attributes[0].name);
                    } else {
                        this.addNewAttribute();
                    }
                }
                newText = newText.trim();
                if (newText === oldText) {
                    cancel();
                    return;
                }
                var treeOutline = this.treeOutline;
                var wasExpanded = this.expanded;
                this.nodeInternal.setNodeName(newText, function(error, newNode) {
                    if (error || !newNode) {
                        cancel();
                        return;
                    }
                    if (!treeOutline) {
                        return;
                    }
                    var newTreeItem = treeOutline.selectNodeAfterEdit(wasExpanded, error, newNode);
                    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration
                    // @ts-expect-error
                    moveToNextAttributeIfNeeded.call(newTreeItem);
                });
            }
        },
        {
            key: "textNodeEditingCommitted",
            value: function textNodeEditingCommitted(textNode, element, newText) {
                this.editing = null;
                function callback() {
                    this.updateTitle();
                }
                textNode.setNodeValue(newText, callback.bind(this));
            }
        },
        {
            key: "editingCancelled",
            value: function editingCancelled(_element, _tagName) {
                this.editing = null;
                // Need to restore attributes structure.
                this.updateTitle();
            }
        },
        {
            key: "distinctClosingTagElement",
            value: function distinctClosingTagElement() {
                // FIXME: Improve the Tree Element / Outline Abstraction to prevent crawling the DOM
                // For an expanded element, it will be the last element with class "close"
                // in the child element list.
                if (this.expanded) {
                    var closers = this.childrenListElement.querySelectorAll('.close');
                    return closers[closers.length - 1];
                }
                // Remaining cases are single line non-expanded elements with a closing
                // tag, or HTML elements without a closing tag (such as <br>). Return
                // null in the case where there isn't a closing tag.
                var tags = this.listItemElement.getElementsByClassName('webkit-html-tag');
                return tags.length === 1 ? null : tags[tags.length - 1];
            }
        },
        {
            key: "updateTitle",
            value: function updateTitle(updateRecord) {
                // If we are editing, return early to prevent canceling the edit.
                // After editing is committed updateTitle will be called.
                if (this.editing) {
                    return;
                }
                var nodeInfo = this.nodeTitleInfo(updateRecord || null);
                if (this.nodeInternal.nodeType() === Node.DOCUMENT_FRAGMENT_NODE && this.nodeInternal.isInShadowTree() && this.nodeInternal.shadowRootType()) {
                    this.childrenListElement.classList.add('shadow-root');
                    var depth = 4;
                    for(var node = this.nodeInternal; depth && node; node = node.parentNode){
                        if (node.nodeType() === Node.DOCUMENT_FRAGMENT_NODE) {
                            depth--;
                        }
                    }
                    if (!depth) {
                        this.childrenListElement.classList.add('shadow-root-deep');
                    } else {
                        this.childrenListElement.classList.add('shadow-root-depth-' + depth);
                    }
                }
                this.contentElement.removeChildren();
                var highlightElement = this.contentElement.createChild('span', 'highlight');
                highlightElement.append(nodeInfo);
                // fixme: make it clear that `this.title = x` is a setter with significant side effects
                this.title = this.contentElement;
                this.updateDecorations();
                this.contentElement.prepend(this.gutterContainer);
                if (isOpeningTag(this.tagTypeContext)) {
                    this.contentElement.append(this.tagTypeContext.adornerContainer);
                    if (this.tagTypeContext.slot) {
                        this.contentElement.append(this.tagTypeContext.slot);
                    }
                }
                delete this.selectionElement;
                delete this.hintElement;
                if (this.selected) {
                    this.createSelection();
                    this.createHint();
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    // If there is an issue with this node, make sure to update it.
                    for(var _iterator = _class_private_field_get(this, _elementIssues).values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var issue = _step.value;
                        _class_private_method_get(this, _applyIssueStyleAndTooltip, applyIssueStyleAndTooltip).call(this, issue);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.highlightSearchResultsInternal();
            }
        },
        {
            key: "computeLeftIndent",
            value: function computeLeftIndent() {
                var treeElement = this.parent;
                var depth = 0;
                while(treeElement !== null){
                    depth++;
                    treeElement = treeElement.parent;
                }
                /** Keep it in sync with elementsTreeOutline.css **/ return 12 * (depth - 2) + (this.isExpandable() && this.isCollapsible() ? 1 : 12);
            }
        },
        {
            key: "updateDecorations",
            value: function updateDecorations() {
                var indent = this.computeLeftIndent();
                this.gutterContainer.style.left = -indent + 'px';
                this.listItemElement.style.setProperty('--indent', indent + 'px');
                if (this.isClosingTag()) {
                    return;
                }
                if (this.nodeInternal.nodeType() !== Node.ELEMENT_NODE) {
                    return;
                }
                void this.decorationsThrottler.schedule(this.updateDecorationsInternal.bind(this));
            }
        },
        {
            key: "updateDecorationsInternal",
            value: function updateDecorationsInternal() {
                if (!this.treeOutline) {
                    return Promise.resolve();
                }
                var node = this.nodeInternal;
                if (!this.treeOutline.decoratorExtensions) {
                    this.treeOutline.decoratorExtensions = (0,_MarkerDecorator_js__WEBPACK_IMPORTED_MODULE_21__.getRegisteredDecorators)();
                }
                var markerToExtension = new Map();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.treeOutline.decoratorExtensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var decoratorExtension = _step.value;
                        markerToExtension.set(decoratorExtension.marker, decoratorExtension);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var promises = [];
                var decorations = [];
                var descendantDecorations = [];
                node.traverseMarkers(visitor);
                function visitor(n, marker) {
                    var extension = markerToExtension.get(marker);
                    if (!extension) {
                        return;
                    }
                    promises.push(Promise.resolve(extension.decorator()).then(collectDecoration.bind(null, n)));
                }
                function collectDecoration(n, decorator) {
                    var decoration = decorator.decorate(n);
                    if (!decoration) {
                        return;
                    }
                    (n === node ? decorations : descendantDecorations).push(decoration);
                }
                return Promise.all(promises).then(updateDecorationsUI.bind(this));
                function updateDecorationsUI() {
                    this.decorationsElement.removeChildren();
                    this.decorationsElement.classList.add('hidden');
                    this.gutterContainer.classList.toggle('has-decorations', Boolean(decorations.length || descendantDecorations.length));
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ARIAUtils.setLabel(this.decorationsElement, '');
                    if (!decorations.length && !descendantDecorations.length) {
                        return;
                    }
                    var colors = new Set();
                    var titles = document.createElement('div');
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = decorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var decoration = _step.value;
                            var titleElement = titles.createChild('div');
                            titleElement.textContent = decoration.title;
                            colors.add(decoration.color);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (this.expanded && !decorations.length) {
                        return;
                    }
                    var descendantColors = new Set();
                    if (descendantDecorations.length) {
                        var element = titles.createChild('div');
                        element.textContent = i18nString(UIStrings.children);
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = descendantDecorations[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var decoration1 = _step1.value;
                                element = titles.createChild('div');
                                element.style.marginLeft = '15px';
                                element.textContent = decoration1.title;
                                descendantColors.add(decoration1.color);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                    var offset = 0;
                    processColors.call(this, colors, 'elements-gutter-decoration');
                    if (!this.expanded) {
                        processColors.call(this, descendantColors, 'elements-gutter-decoration elements-has-decorated-children');
                    }
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.Tooltip.Tooltip.install(this.decorationsElement, titles.textContent);
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ARIAUtils.setLabel(this.decorationsElement, titles.textContent || '');
                    function processColors(colors, className) {
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = colors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var color = _step.value;
                                var child = this.decorationsElement.createChild('div', className);
                                this.decorationsElement.classList.remove('hidden');
                                child.style.backgroundColor = color;
                                child.style.borderColor = color;
                                if (offset) {
                                    child.style.marginLeft = offset + 'px';
                                }
                                offset += 3;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            key: "buildAttributeDOM",
            value: function buildAttributeDOM(parentElement, name, value, updateRecord, forceValue, node) {
                var closingPunctuationRegex = /[\/;:\)\]\}]/g;
                var highlightIndex = 0;
                var highlightCount = 0;
                var additionalHighlightOffset = 0;
                function setValueWithEntities(element, value) {
                    var result = this.convertWhitespaceToEntities(value);
                    highlightCount = result.entityRanges.length;
                    value = result.text.replace(closingPunctuationRegex, function(match, replaceOffset) {
                        while(highlightIndex < highlightCount && result.entityRanges[highlightIndex].offset < replaceOffset){
                            result.entityRanges[highlightIndex].offset += additionalHighlightOffset;
                            ++highlightIndex;
                        }
                        additionalHighlightOffset += 1;
                        return match + '\u200B';
                    });
                    while(highlightIndex < highlightCount){
                        result.entityRanges[highlightIndex].offset += additionalHighlightOffset;
                        ++highlightIndex;
                    }
                    element.setTextContentTruncatedIfNeeded(value);
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.highlightRangesWithStyleClass(element, result.entityRanges, 'webkit-html-entity-value');
                }
                var hasText = forceValue || value.length > 0;
                var attrSpanElement = parentElement.createChild('span', 'webkit-html-attribute');
                attrSpanElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value(name === 'style' ? 'style-attribute' : 'attribute').track({
                    change: true,
                    dblclick: true
                })));
                var attrNameElement = attrSpanElement.createChild('span', 'webkit-html-attribute-name');
                attrNameElement.textContent = name;
                if (hasText) {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(attrSpanElement, '=\u200B"');
                }
                var attrValueElement = attrSpanElement.createChild('span', 'webkit-html-attribute-value');
                if (updateRecord && updateRecord.isAttributeModified(name)) {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.runCSSAnimationOnce(hasText ? attrValueElement : attrNameElement, 'dom-update-highlight');
                }
                function linkifyValue(value) {
                    var rewrittenHref = node ? node.resolveURL(value) : null;
                    if (rewrittenHref === null) {
                        var span = document.createElement('span');
                        setValueWithEntities.call(this, span, value);
                        return span;
                    }
                    value = value.replace(closingPunctuationRegex, '$&\u200B');
                    if (value.startsWith('data:')) {
                        value = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.trimMiddle(value, 60);
                    }
                    var link = node && node.nodeName().toLowerCase() === 'a' ? _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.XLink.XLink.create(rewrittenHref, value, '', true, 'image-url') : _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_12__.Linkifier.Linkifier.linkifyURL(rewrittenHref, {
                        text: value,
                        preventClick: true,
                        showColumnNumber: false,
                        inlineFrameIndex: 0
                    });
                    return _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_20__.ImagePreviewPopover.setImageUrl(link, rewrittenHref);
                }
                var nodeName = node ? node.nodeName().toLowerCase() : '';
                // If the href/src attribute has a value, attempt to link it.
                // There's no point trying to link it if the value is empty (e.g. <a href=''>).
                if (nodeName && (name === 'src' || name === 'href') && value) {
                    attrValueElement.appendChild(linkifyValue.call(this, value));
                } else if ((nodeName === 'img' || nodeName === 'source') && name === 'srcset') {
                    attrValueElement.appendChild(linkifySrcset.call(this, value));
                } else if (nodeName === 'image' && (name === 'xlink:href' || name === 'href')) {
                    attrValueElement.appendChild(linkifySrcset.call(this, value));
                } else {
                    setValueWithEntities.call(this, attrValueElement, value);
                }
                if (name === 'popovertarget') {
                    var linkedPart = value ? attrValueElement : attrNameElement;
                    void this.linkifyElementByRelation(linkedPart, "PopoverTarget" /* Protocol.DOM.GetElementByRelationRequestRelation.PopoverTarget */ , i18nString(UIStrings.showPopoverTarget));
                }
                if (hasText) {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(attrSpanElement, '"');
                }
                function linkifySrcset(value) {
                    // Splitting normally on commas or spaces will break on valid srcsets "foo 1x,bar 2x" and "data:,foo 1x".
                    // 1) Let the index of the next space be `indexOfSpace`.
                    // 2a) If the character at `indexOfSpace - 1` is a comma, collect the preceding characters up to
                    //     `indexOfSpace - 1` as a URL and repeat step 1).
                    // 2b) Else, collect the preceding characters as a URL.
                    // 3) Collect the characters from `indexOfSpace` up to the next comma as the size descriptor and repeat step 1).
                    // https://html.spec.whatwg.org/C/#parse-a-srcset-attribute
                    var fragment = document.createDocumentFragment();
                    var i = 0;
                    while(value.length){
                        if (i++ > 0) {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(fragment, ' ');
                        }
                        value = value.trim();
                        // The url and descriptor may end with a separating comma.
                        var url = '';
                        var descriptor = '';
                        var indexOfSpace = value.search(/\s/);
                        if (indexOfSpace === -1) {
                            url = value;
                        } else if (indexOfSpace > 0 && value[indexOfSpace - 1] === ',') {
                            url = value.substring(0, indexOfSpace);
                        } else {
                            url = value.substring(0, indexOfSpace);
                            var indexOfComma = value.indexOf(',', indexOfSpace);
                            if (indexOfComma !== -1) {
                                descriptor = value.substring(indexOfSpace, indexOfComma + 1);
                            } else {
                                descriptor = value.substring(indexOfSpace);
                            }
                        }
                        if (url) {
                            // Up to one trailing comma should be removed from `url`.
                            if (url.endsWith(',')) {
                                fragment.appendChild(linkifyValue.call(this, url.substring(0, url.length - 1)));
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(fragment, ',');
                            } else {
                                fragment.appendChild(linkifyValue.call(this, url));
                            }
                        }
                        if (descriptor) {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(fragment, descriptor);
                        }
                        value = value.substring(url.length + descriptor.length);
                    }
                    return fragment;
                }
                return attrSpanElement;
            }
        },
        {
            key: "linkifyElementByRelation",
            value: function linkifyElementByRelation(linkContainer, relation, tooltip) {
                var _this = this;
                return _async_to_generator(function() {
                    var relatedElementId, relatedElement, link;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.nodeInternal.domModel().getElementByRelation(_this.nodeInternal.id, relation)
                                ];
                            case 1:
                                relatedElementId = _state.sent();
                                relatedElement = _this.nodeInternal.domModel().nodeForId(relatedElementId);
                                if (!relatedElement) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Linkifier.Linkifier.linkify(relatedElement, {
                                        preventKeyboardFocus: true,
                                        tooltip: tooltip,
                                        textContent: linkContainer.textContent || undefined,
                                        isDynamicLink: true
                                    })
                                ];
                            case 2:
                                link = _state.sent();
                                linkContainer.removeChildren();
                                linkContainer.append(link);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "buildPseudoElementDOM",
            value: function buildPseudoElementDOM(parentElement, pseudoElementName) {
                var pseudoElement = parentElement.createChild('span', 'webkit-html-pseudo-element');
                pseudoElement.textContent = '::' + pseudoElementName;
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(parentElement, '\u200B');
            }
        },
        {
            key: "buildTagDOM",
            value: function buildTagDOM(parentElement, tagName, isClosingTag, isDistinctTreeElement, updateRecord) {
                var node = this.nodeInternal;
                var classes = [
                    'webkit-html-tag'
                ];
                if (isClosingTag && isDistinctTreeElement) {
                    classes.push('close');
                }
                var tagElement = parentElement.createChild('span', classes.join(' '));
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(tagElement, '<');
                var tagNameElement = tagElement.createChild('span', isClosingTag ? 'webkit-html-close-tag-name' : 'webkit-html-tag-name');
                if (!isClosingTag) {
                    tagNameElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value('tag-name').track({
                        change: true,
                        dblclick: true
                    })));
                }
                tagNameElement.textContent = (isClosingTag ? '/' : '') + tagName;
                if (!isClosingTag) {
                    if (node.hasAttributes()) {
                        var attributes = node.attributes();
                        for(var i = 0; i < attributes.length; ++i){
                            var attr = attributes[i];
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(tagElement, ' ');
                            this.buildAttributeDOM(tagElement, attr.name, attr.value, updateRecord, false, node);
                        }
                    }
                    if (updateRecord) {
                        var hasUpdates = updateRecord.hasRemovedAttributes() || updateRecord.hasRemovedChildren();
                        hasUpdates = hasUpdates || !this.expanded && updateRecord.hasChangedChildren();
                        if (hasUpdates) {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.runCSSAnimationOnce(tagNameElement, 'dom-update-highlight');
                        }
                    }
                }
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(tagElement, '>');
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(parentElement, '\u200B');
                if (tagElement.textContent) {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ARIAUtils.setLabel(tagElement, tagElement.textContent);
                }
            }
        },
        {
            key: "convertWhitespaceToEntities",
            value: function convertWhitespaceToEntities(text) {
                var result = '';
                var lastIndexAfterEntity = 0;
                var entityRanges = [];
                var charToEntity = _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_19__.MappedCharToEntity;
                for(var i = 0, size = text.length; i < size; ++i){
                    var char = text.charAt(i);
                    if (charToEntity.has(char)) {
                        result += text.substring(lastIndexAfterEntity, i);
                        var entityValue = '&' + charToEntity.get(char) + ';';
                        entityRanges.push(new _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_5__.TextRange.SourceRange(result.length, entityValue.length));
                        result += entityValue;
                        lastIndexAfterEntity = i + 1;
                    }
                }
                if (result) {
                    result += text.substring(lastIndexAfterEntity);
                }
                return {
                    text: result || text,
                    entityRanges: entityRanges
                };
            }
        },
        {
            key: "nodeTitleInfo",
            value: function nodeTitleInfo(updateRecord) {
                var _this = this;
                var node = this.nodeInternal;
                var titleDOM = document.createDocumentFragment();
                var updateSearchHighlight = function() {
                    _this.highlightSearchResultsInternal();
                };
                switch(node.nodeType()){
                    case Node.ATTRIBUTE_NODE:
                        this.buildAttributeDOM(titleDOM, node.name, node.value, updateRecord, true);
                        break;
                    case Node.ELEMENT_NODE:
                        {
                            var pseudoElementName = node.pseudoType();
                            if (pseudoElementName) {
                                var pseudoIdentifier = node.pseudoIdentifier();
                                if (pseudoIdentifier) {
                                    pseudoElementName += "(".concat(pseudoIdentifier, ")");
                                }
                                this.buildPseudoElementDOM(titleDOM, pseudoElementName);
                                break;
                            }
                            var tagName = node.nodeNameInCorrectCase();
                            if (this.isClosingTag()) {
                                this.buildTagDOM(titleDOM, tagName, true, true, updateRecord);
                                break;
                            }
                            this.buildTagDOM(titleDOM, tagName, false, false, updateRecord);
                            if (this.isExpandable()) {
                                if (!this.expanded) {
                                    var expandButton = new _components_components_js__WEBPACK_IMPORTED_MODULE_16__.ElementsTreeExpandButton.ElementsTreeExpandButton();
                                    expandButton.data = {
                                        clickHandler: function() {
                                            return _this.expand();
                                        }
                                    };
                                    titleDOM.appendChild(expandButton);
                                    // This hidden span with … is for blink layout tests.
                                    // The method dumpElementsTree(front_end/legacy_test_runner/elements_test_runner/ElementsTestRunner.js)
                                    // dumps … to identify expandable element.
                                    var hidden = document.createElement('span');
                                    hidden.textContent = '…';
                                    hidden.style.fontSize = '0';
                                    titleDOM.appendChild(hidden);
                                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(titleDOM, '\u200B');
                                    this.buildTagDOM(titleDOM, tagName, true, false, updateRecord);
                                }
                                break;
                            }
                            if (ElementsTreeElement.canShowInlineText(node)) {
                                var textNodeElement = titleDOM.createChild('span', 'webkit-html-text-node');
                                textNodeElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value('text-node').track({
                                    change: true,
                                    dblclick: true
                                })));
                                var firstChild = node.firstChild;
                                if (!firstChild) {
                                    throw new Error('ElementsTreeElement._nodeTitleInfo expects node.firstChild to be defined.');
                                }
                                var result = this.convertWhitespaceToEntities(firstChild.nodeValue());
                                textNodeElement.textContent = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.collapseWhitespace(result.text);
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.highlightRangesWithStyleClass(textNodeElement, result.entityRanges, 'webkit-html-entity-value');
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(titleDOM, '\u200B');
                                this.buildTagDOM(titleDOM, tagName, true, false, updateRecord);
                                if (updateRecord && updateRecord.hasChangedChildren()) {
                                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.runCSSAnimationOnce(textNodeElement, 'dom-update-highlight');
                                }
                                if (updateRecord && updateRecord.isCharDataModified()) {
                                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.runCSSAnimationOnce(textNodeElement, 'dom-update-highlight');
                                }
                                break;
                            }
                            if (this.treeOutline && this.treeOutline.isXMLMimeType || !ForbiddenClosingTagElements.has(tagName)) {
                                this.buildTagDOM(titleDOM, tagName, true, false, updateRecord);
                            }
                            break;
                        }
                    case Node.TEXT_NODE:
                        if (node.parentNode && node.parentNode.nodeName().toLowerCase() === 'script') {
                            var newNode = titleDOM.createChild('span', 'webkit-html-text-node webkit-html-js-node');
                            newNode.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value('script-text-node').track({
                                change: true,
                                dblclick: true
                            })));
                            var text = node.nodeValue();
                            newNode.textContent = text.replace(/^[\n\r]+|\s+$/g, '');
                            void _ui_components_code_highlighter_code_highlighter_js__WEBPACK_IMPORTED_MODULE_8__.CodeHighlighter.highlightNode(newNode, 'text/javascript').then(updateSearchHighlight);
                        } else if (node.parentNode && node.parentNode.nodeName().toLowerCase() === 'style') {
                            var newNode1 = titleDOM.createChild('span', 'webkit-html-text-node webkit-html-css-node');
                            newNode1.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value('css-text-node').track({
                                change: true,
                                dblclick: true
                            })));
                            var text1 = node.nodeValue();
                            newNode1.textContent = text1.replace(/^[\n\r]+|\s+$/g, '');
                            void _ui_components_code_highlighter_code_highlighter_js__WEBPACK_IMPORTED_MODULE_8__.CodeHighlighter.highlightNode(newNode1, 'text/css').then(updateSearchHighlight);
                        } else {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(titleDOM, '"');
                            var textNodeElement1 = titleDOM.createChild('span', 'webkit-html-text-node');
                            textNodeElement1.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.value('text-node').track({
                                change: true,
                                dblclick: true
                            })));
                            var result1 = this.convertWhitespaceToEntities(node.nodeValue());
                            textNodeElement1.textContent = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.collapseWhitespace(result1.text);
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.highlightRangesWithStyleClass(textNodeElement1, result1.entityRanges, 'webkit-html-entity-value');
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(titleDOM, '"');
                            if (updateRecord && updateRecord.isCharDataModified()) {
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.runCSSAnimationOnce(textNodeElement1, 'dom-update-highlight');
                            }
                        }
                        break;
                    case Node.COMMENT_NODE:
                        {
                            var commentElement = titleDOM.createChild('span', 'webkit-html-comment');
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(commentElement, '<!--' + node.nodeValue() + '-->');
                            break;
                        }
                    case Node.DOCUMENT_TYPE_NODE:
                        {
                            var docTypeElement = titleDOM.createChild('span', 'webkit-html-doctype');
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(docTypeElement, '<!DOCTYPE ' + node.nodeName());
                            if (node.publicId) {
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(docTypeElement, ' PUBLIC "' + node.publicId + '"');
                                if (node.systemId) {
                                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(docTypeElement, ' "' + node.systemId + '"');
                                }
                            } else if (node.systemId) {
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(docTypeElement, ' SYSTEM "' + node.systemId + '"');
                            }
                            if (node.internalSubset) {
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(docTypeElement, ' [' + node.internalSubset + ']');
                            }
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(docTypeElement, '>');
                            break;
                        }
                    case Node.CDATA_SECTION_NODE:
                        {
                            var cdataElement = titleDOM.createChild('span', 'webkit-html-text-node');
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(cdataElement, '<![CDATA[' + node.nodeValue() + ']]>');
                            break;
                        }
                    case Node.DOCUMENT_NODE:
                        {
                            var documentElement = titleDOM.createChild('span');
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(documentElement, '#document (');
                            var text2 = node.documentURL;
                            documentElement.appendChild(_ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_12__.Linkifier.Linkifier.linkifyURL(text2, {
                                text: text2,
                                preventClick: true,
                                showColumnNumber: false,
                                inlineFrameIndex: 0
                            }));
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(documentElement, ')');
                            break;
                        }
                    case Node.DOCUMENT_FRAGMENT_NODE:
                        {
                            var fragmentElement = titleDOM.createChild('span', 'webkit-html-fragment');
                            fragmentElement.textContent = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.collapseWhitespace(node.nodeNameInCorrectCase());
                            break;
                        }
                    default:
                        {
                            var nameWithSpaceCollapsed = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.collapseWhitespace(node.nodeNameInCorrectCase());
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.createTextChild(titleDOM, nameWithSpaceCollapsed);
                        }
                }
                return titleDOM;
            }
        },
        {
            key: "remove",
            value: function remove() {
                if (this.nodeInternal.pseudoType()) {
                    return;
                }
                var parentElement = this.parent;
                if (!parentElement) {
                    return;
                }
                if (!this.nodeInternal.parentNode || this.nodeInternal.parentNode.nodeType() === Node.DOCUMENT_NODE) {
                    return;
                }
                void this.nodeInternal.removeNode();
            }
        },
        {
            key: "toggleEditAsHTML",
            value: function toggleEditAsHTML(callback, startEditing) {
                if (this.editing && this.htmlEditElement) {
                    this.editing.commit();
                    return;
                }
                if (startEditing === false) {
                    return;
                }
                function selectNode(error) {
                    if (callback) {
                        callback(!error);
                    }
                }
                function commitChange(initialValue, value) {
                    if (initialValue !== value) {
                        node.setOuterHTML(value, selectNode);
                    }
                }
                function disposeCallback() {
                    if (callback) {
                        callback(false);
                    }
                }
                var node = this.nodeInternal;
                void node.getOuterHTML().then(this.startEditingAsHTML.bind(this, commitChange, disposeCallback));
            }
        },
        {
            key: "copyCSSPath",
            value: function copyCSSPath() {
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((0,_DOMPath_js__WEBPACK_IMPORTED_MODULE_17__.cssPath)(this.nodeInternal, true));
            }
        },
        {
            key: "copyJSPath",
            value: function copyJSPath() {
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((0,_DOMPath_js__WEBPACK_IMPORTED_MODULE_17__.jsPath)(this.nodeInternal, true));
            }
        },
        {
            key: "copyXPath",
            value: function copyXPath() {
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((0,_DOMPath_js__WEBPACK_IMPORTED_MODULE_17__.xPath)(this.nodeInternal, true));
            }
        },
        {
            key: "copyFullXPath",
            value: function copyFullXPath() {
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText((0,_DOMPath_js__WEBPACK_IMPORTED_MODULE_17__.xPath)(this.nodeInternal, false));
            }
        },
        {
            key: "copyStyles",
            value: function copyStyles() {
                var _this = this;
                return _async_to_generator(function() {
                    var node, cssModel, cascade, indent, lines, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, style, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, property;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                node = _this.nodeInternal;
                                cssModel = node.domModel().cssModel();
                                return [
                                    4,
                                    cssModel.cachedMatchedCascadeForNode(node)
                                ];
                            case 1:
                                cascade = _state.sent();
                                if (!cascade) {
                                    return [
                                        2
                                    ];
                                }
                                indent = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').get();
                                lines = [];
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = cascade.nodeStyles().reverse()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        style = _step.value;
                                        _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                        try {
                                            for(_iterator1 = style.leadingProperties()[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                                property = _step1.value;
                                                if (!property.parsedOk || property.disabled || !property.activeInStyle() || property.implicit) {
                                                    continue;
                                                }
                                                if (cascade.isInherited(style) && !_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_4__.CSSMetadata.cssMetadata().isPropertyInherited(property.name)) {
                                                    continue;
                                                }
                                                if (style.parentRule && style.parentRule.isUserAgent()) {
                                                    continue;
                                                }
                                                if (cascade.propertyState(property) !== "Active" /* SDK.CSSMatchedStyles.PropertyState.Active */ ) {
                                                    continue;
                                                }
                                                lines.push("".concat(indent).concat(property.name, ": ").concat(property.value, ";"));
                                            }
                                        } catch (err) {
                                            _didIteratorError1 = true;
                                            _iteratorError1 = err;
                                        } finally{
                                            try {
                                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                                    _iterator1.return();
                                                }
                                            } finally{
                                                if (_didIteratorError1) {
                                                    throw _iteratorError1;
                                                }
                                            }
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(lines.join('\n'));
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "highlightSearchResultsInternal",
            value: function highlightSearchResultsInternal() {
                this.hideSearchHighlights();
                if (!this.searchQuery) {
                    return;
                }
                var text = this.listItemElement.textContent || '';
                var regexObject = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.createPlainTextSearchRegex(this.searchQuery, 'gi');
                var matchRanges = [];
                var match = regexObject.exec(text);
                while(match){
                    matchRanges.push(new _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_5__.TextRange.SourceRange(match.index, match[0].length));
                    match = regexObject.exec(text);
                }
                // Fall back for XPath, etc. matches.
                if (!matchRanges.length) {
                    matchRanges.push(new _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_5__.TextRange.SourceRange(0, text.length));
                }
                _class_private_field_set(this, _highlights, _ui_components_highlighting_highlighting_js__WEBPACK_IMPORTED_MODULE_9__.HighlightManager.HighlightManager.instance().highlightOrderedTextRanges(this.listItemElement, matchRanges));
            }
        },
        {
            key: "editAsHTML",
            value: function editAsHTML() {
                var promise = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(this.node());
                void promise.then(function() {
                    var action = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ActionRegistry.ActionRegistry.instance().getAction('elements.edit-as-html');
                    return action.execute();
                });
            }
        },
        {
            // TODO: add unit tests for adorner-related methods after component and TypeScript works are done
            key: "adorn",
            value: function adorn(param, content) {
                var name = param.name;
                var adornerContent = content;
                if (!adornerContent) {
                    adornerContent = document.createElement('span');
                    adornerContent.textContent = name;
                }
                var adorner = new _ui_components_adorners_adorners_js__WEBPACK_IMPORTED_MODULE_7__.Adorner.Adorner();
                adorner.data = {
                    name: name,
                    content: adornerContent,
                    jslogContext: name
                };
                if (isOpeningTag(this.tagTypeContext)) {
                    this.tagTypeContext.adorners.push(adorner);
                    _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_18__.ElementsPanel.instance().registerAdorner(adorner);
                    this.updateAdorners(this.tagTypeContext);
                }
                return adorner;
            }
        },
        {
            key: "adornSlot",
            value: function adornSlot(param, context) {
                var name = param.name;
                var linkIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_10__.Icon.Icon();
                linkIcon.name = 'select-element';
                var slotText = document.createElement('span');
                slotText.textContent = name;
                var adornerContent = document.createElement('span');
                adornerContent.append(linkIcon);
                adornerContent.append(slotText);
                adornerContent.classList.add('adorner-with-icon');
                var adorner = new _ui_components_adorners_adorners_js__WEBPACK_IMPORTED_MODULE_7__.Adorner.Adorner();
                adorner.data = {
                    name: name,
                    content: adornerContent,
                    jslogContext: 'slot'
                };
                context.adorners.push(adorner);
                _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_18__.ElementsPanel.instance().registerAdorner(adorner);
                this.updateAdorners(context);
                return adorner;
            }
        },
        {
            key: "adornMedia",
            value: function adornMedia(param) {
                var name = param.name;
                var adornerContent = document.createElement('span');
                adornerContent.textContent = name;
                adornerContent.classList.add('adorner-with-icon');
                var linkIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_10__.Icon.Icon();
                linkIcon.name = 'select-element';
                adornerContent.append(linkIcon);
                var adorner = new _ui_components_adorners_adorners_js__WEBPACK_IMPORTED_MODULE_7__.Adorner.Adorner();
                adorner.data = {
                    name: name,
                    content: adornerContent,
                    jslogContext: 'media'
                };
                if (isOpeningTag(this.tagTypeContext)) {
                    this.tagTypeContext.adorners.push(adorner);
                    _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_18__.ElementsPanel.instance().registerAdorner(adorner);
                    this.updateAdorners(this.tagTypeContext);
                }
                return adorner;
            }
        },
        {
            key: "removeAdorner",
            value: function removeAdorner(adornerToRemove, context) {
                var adorners = context.adorners;
                _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_18__.ElementsPanel.instance().deregisterAdorner(adornerToRemove);
                adornerToRemove.remove();
                for(var i = 0; i < adorners.length; ++i){
                    if (adorners[i] === adornerToRemove) {
                        adorners.splice(i, 1);
                        this.updateAdorners(context);
                        return;
                    }
                }
            }
        },
        {
            key: "removeAllAdorners",
            value: function removeAllAdorners() {
                if (isOpeningTag(this.tagTypeContext)) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.tagTypeContext.adorners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var adorner = _step.value;
                            _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_18__.ElementsPanel.instance().deregisterAdorner(adorner);
                            adorner.remove();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    this.tagTypeContext.adorners = [];
                    this.updateAdorners(this.tagTypeContext);
                }
            }
        },
        {
            key: "updateAdorners",
            value: function updateAdorners(context) {
                void context.adornersThrottler.schedule(this.updateAdornersInternal.bind(null, context));
            }
        },
        {
            key: "updateAdornersInternal",
            value: function updateAdornersInternal(context) {
                var adornerContainer = context.adornerContainer;
                if (!adornerContainer) {
                    return Promise.resolve();
                }
                var adorners = context.adorners;
                if (adorners.length === 0) {
                    adornerContainer.classList.add('hidden');
                    return Promise.resolve();
                }
                adorners.sort(adornerComparator);
                adornerContainer.removeChildren();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = adorners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var adorner = _step.value;
                        adornerContainer.appendChild(adorner);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                adornerContainer.classList.remove('hidden');
                return Promise.resolve();
            }
        },
        {
            key: "updateStyleAdorners",
            value: function updateStyleAdorners() {
                var _this = this;
                return _async_to_generator(function() {
                    var _styles_get, _styles_get1, node, nodeId, styles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, styleAdorner, display, isGrid, isFlex, _ref, isSubgrid, containerType, contain, isContainer;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!isOpeningTag(_this.tagTypeContext)) {
                                    return [
                                        2
                                    ];
                                }
                                node = _this.node();
                                nodeId = node.id;
                                if (node.nodeType() === Node.COMMENT_NODE || node.nodeType() === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType() === Node.TEXT_NODE || nodeId === undefined) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    node.domModel().cssModel().getComputedStyle(nodeId)
                                ];
                            case 1:
                                styles = _state.sent();
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = _this.tagTypeContext.styleAdorners[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        styleAdorner = _step.value;
                                        _this.removeAdorner(styleAdorner, _this.tagTypeContext);
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                _this.tagTypeContext.styleAdorners = [];
                                if (!styles) {
                                    return [
                                        2
                                    ];
                                }
                                display = styles.get('display');
                                isGrid = display === 'grid' || display === 'inline-grid';
                                isFlex = display === 'flex' || display === 'inline-flex';
                                isSubgrid = (_ref = isGrid && (((_styles_get = styles.get('grid-template-columns')) === null || _styles_get === void 0 ? void 0 : _styles_get.startsWith('subgrid')) || ((_styles_get1 = styles.get('grid-template-rows')) === null || _styles_get1 === void 0 ? void 0 : _styles_get1.startsWith('subgrid')))) !== null && _ref !== void 0 ? _ref : false;
                                containerType = styles.get('container-type');
                                contain = styles.get('contain');
                                isContainer = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_4__.CSSContainerQuery.getQueryAxis("".concat(containerType, " ").concat(contain)) !== "" /* SDK.CSSContainerQuery.QueryAxis.None */ ;
                                if (isGrid) {
                                    _this.pushGridAdorner(_this.tagTypeContext, isSubgrid);
                                }
                                if (isFlex) {
                                    _this.pushFlexAdorner(_this.tagTypeContext);
                                }
                                if (styles.get('scroll-snap-type') && styles.get('scroll-snap-type') !== 'none') {
                                    _this.pushScrollSnapAdorner(_this.tagTypeContext);
                                }
                                if (isContainer) {
                                    _this.pushContainerAdorner(_this.tagTypeContext);
                                }
                                if (node.isMediaNode()) {
                                    _this.pushMediaAdorner(_this.tagTypeContext);
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "pushGridAdorner",
            value: function pushGridAdorner(context, isSubgrid) {
                var node = this.node();
                var nodeId = node.id;
                if (!nodeId) {
                    return;
                }
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(isSubgrid ? _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.SUBGRID : _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.GRID);
                var adorner = this.adorn(config);
                adorner.classList.add('grid');
                var onClick = function() {
                    if (adorner.isActive()) {
                        node.domModel().overlayModel().highlightGridInPersistentOverlay(nodeId);
                    } else {
                        node.domModel().overlayModel().hideGridInPersistentOverlay(nodeId);
                    }
                };
                adorner.addInteraction(onClick, {
                    isToggle: true,
                    shouldPropagateOnKeydown: false,
                    ariaLabelDefault: i18nString(UIStrings.enableGridMode),
                    ariaLabelActive: i18nString(UIStrings.disableGridMode)
                });
                node.domModel().overlayModel().addEventListener("PersistentGridOverlayStateChanged" /* SDK.OverlayModel.Events.PersistentGridOverlayStateChanged */ , function(event) {
                    var _event_data = event.data, eventNodeId = _event_data.nodeId, enabled = _event_data.enabled;
                    if (eventNodeId !== nodeId) {
                        return;
                    }
                    adorner.toggle(enabled);
                });
                context.styleAdorners.push(adorner);
                if (node.domModel().overlayModel().isHighlightedGridInPersistentOverlay(nodeId)) {
                    adorner.toggle(true);
                }
            }
        },
        {
            key: "pushScrollSnapAdorner",
            value: function pushScrollSnapAdorner(context) {
                var node = this.node();
                var nodeId = node.id;
                if (!nodeId) {
                    return;
                }
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.SCROLL_SNAP);
                var adorner = this.adorn(config);
                adorner.classList.add('scroll-snap');
                var onClick = function() {
                    var model = node.domModel().overlayModel();
                    if (adorner.isActive()) {
                        model.highlightScrollSnapInPersistentOverlay(nodeId);
                    } else {
                        model.hideScrollSnapInPersistentOverlay(nodeId);
                    }
                };
                adorner.addInteraction(onClick, {
                    isToggle: true,
                    shouldPropagateOnKeydown: false,
                    ariaLabelDefault: i18nString(UIStrings.enableScrollSnap),
                    ariaLabelActive: i18nString(UIStrings.disableScrollSnap)
                });
                node.domModel().overlayModel().addEventListener("PersistentScrollSnapOverlayStateChanged" /* SDK.OverlayModel.Events.PersistentScrollSnapOverlayStateChanged */ , function(event) {
                    var _event_data = event.data, eventNodeId = _event_data.nodeId, enabled = _event_data.enabled;
                    if (eventNodeId !== nodeId) {
                        return;
                    }
                    adorner.toggle(enabled);
                });
                context.styleAdorners.push(adorner);
                if (node.domModel().overlayModel().isHighlightedScrollSnapInPersistentOverlay(nodeId)) {
                    adorner.toggle(true);
                }
            }
        },
        {
            key: "pushFlexAdorner",
            value: function pushFlexAdorner(context) {
                var node = this.node();
                var nodeId = node.id;
                if (!nodeId) {
                    return;
                }
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.FLEX);
                var adorner = this.adorn(config);
                adorner.classList.add('flex');
                var onClick = function() {
                    var model = node.domModel().overlayModel();
                    if (adorner.isActive()) {
                        model.highlightFlexContainerInPersistentOverlay(nodeId);
                    } else {
                        model.hideFlexContainerInPersistentOverlay(nodeId);
                    }
                };
                adorner.addInteraction(onClick, {
                    isToggle: true,
                    shouldPropagateOnKeydown: false,
                    ariaLabelDefault: i18nString(UIStrings.enableFlexMode),
                    ariaLabelActive: i18nString(UIStrings.disableFlexMode)
                });
                node.domModel().overlayModel().addEventListener("PersistentFlexContainerOverlayStateChanged" /* SDK.OverlayModel.Events.PersistentFlexContainerOverlayStateChanged */ , function(event) {
                    var _event_data = event.data, eventNodeId = _event_data.nodeId, enabled = _event_data.enabled;
                    if (eventNodeId !== nodeId) {
                        return;
                    }
                    adorner.toggle(enabled);
                });
                context.styleAdorners.push(adorner);
                if (node.domModel().overlayModel().isHighlightedFlexContainerInPersistentOverlay(nodeId)) {
                    adorner.toggle(true);
                }
            }
        },
        {
            key: "pushContainerAdorner",
            value: function pushContainerAdorner(context) {
                var node = this.node();
                var nodeId = node.id;
                if (!nodeId) {
                    return;
                }
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.CONTAINER);
                var adorner = this.adorn(config);
                adorner.classList.add('container');
                var onClick = function() {
                    var model = node.domModel().overlayModel();
                    if (adorner.isActive()) {
                        model.highlightContainerQueryInPersistentOverlay(nodeId);
                    } else {
                        model.hideContainerQueryInPersistentOverlay(nodeId);
                    }
                };
                adorner.addInteraction(onClick, {
                    isToggle: true,
                    shouldPropagateOnKeydown: false,
                    ariaLabelDefault: i18nString(UIStrings.enableScrollSnap),
                    ariaLabelActive: i18nString(UIStrings.disableScrollSnap)
                });
                node.domModel().overlayModel().addEventListener("PersistentContainerQueryOverlayStateChanged" /* SDK.OverlayModel.Events.PersistentContainerQueryOverlayStateChanged */ , function(event) {
                    var _event_data = event.data, eventNodeId = _event_data.nodeId, enabled = _event_data.enabled;
                    if (eventNodeId !== nodeId) {
                        return;
                    }
                    adorner.toggle(enabled);
                });
                context.styleAdorners.push(adorner);
                if (node.domModel().overlayModel().isHighlightedContainerQueryInPersistentOverlay(nodeId)) {
                    adorner.toggle(true);
                }
            }
        },
        {
            key: "pushMediaAdorner",
            value: function pushMediaAdorner(context) {
                var node = this.node();
                var nodeId = node.id;
                if (!nodeId) {
                    return;
                }
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.RegisteredAdorners.MEDIA);
                var adorner = this.adornMedia(config);
                adorner.classList.add('media');
                var onClick = function() {
                    void _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.ViewManager.ViewManager.instance().showView('medias');
                };
                adorner.addInteraction(onClick, {
                    isToggle: false,
                    shouldPropagateOnKeydown: false,
                    ariaLabelDefault: i18nString(UIStrings.openMediaPanel),
                    ariaLabelActive: i18nString(UIStrings.openMediaPanel)
                });
                context.styleAdorners.push(adorner);
            }
        }
    ], [
        {
            key: "animateOnDOMUpdate",
            value: function animateOnDOMUpdate(treeElement) {
                var tagName = treeElement.listItemElement.querySelector('.webkit-html-tag-name');
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.UIUtils.runCSSAnimationOnce(tagName || treeElement.listItemElement, 'dom-update-highlight');
            }
        },
        {
            key: "visibleShadowRoots",
            value: function visibleShadowRoots(node) {
                var roots = node.shadowRoots();
                if (roots.length && !_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('show-ua-shadow-dom').get()) {
                    roots = roots.filter(filter);
                }
                function filter(root) {
                    return root.shadowRootType() !== _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_4__.DOMModel.DOMNode.ShadowRootTypes.UserAgent;
                }
                return roots;
            }
        },
        {
            key: "canShowInlineText",
            value: function canShowInlineText(node) {
                if (node.contentDocument() || node.templateContent() || ElementsTreeElement.visibleShadowRoots(node).length || node.hasPseudoElements()) {
                    return false;
                }
                if (node.nodeType() !== Node.ELEMENT_NODE) {
                    return false;
                }
                if (!node.firstChild || node.firstChild !== node.lastChild || node.firstChild.nodeType() !== Node.TEXT_NODE) {
                    return false;
                }
                var textChild = node.firstChild;
                var maxInlineTextChildLength = 80;
                if (textChild.nodeValue().length < maxInlineTextChildLength) {
                    return true;
                }
                return false;
            }
        },
        {
            key: "populateForcedPseudoStateItems",
            value: function populateForcedPseudoStateItems(contextMenu, node) {
                var pseudoClasses = [
                    'active',
                    'hover',
                    'focus',
                    'visited',
                    'focus-within',
                    'focus-visible'
                ];
                var forcedPseudoState = node.domModel().cssModel().pseudoState(node);
                var stateMenu = contextMenu.debugSection().appendSubMenuItem(i18nString(UIStrings.forceState), false, 'force-state');
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = pseudoClasses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var pseudoClass = _step.value;
                        var pseudoClassForced = forcedPseudoState ? forcedPseudoState.indexOf(pseudoClass) >= 0 : false;
                        stateMenu.defaultSection().appendCheckboxItem(':' + pseudoClass, setPseudoStateCallback.bind(null, pseudoClass, !pseudoClassForced), {
                            checked: pseudoClassForced,
                            jslogContext: pseudoClass
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                function setPseudoStateCallback(pseudoState, enabled) {
                    node.domModel().cssModel().forcePseudoState(node, pseudoState, enabled);
                }
            }
        }
    ]);
    return ElementsTreeElement;
}(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.TreeOutline.TreeElement);
function applyIssueStyleAndTooltip(issue) {
    var issueDetails = issue.details();
    if (issueDetails.violatingNodeAttribute) {
        _class_private_method_get(this, _highlightViolatingAttr, highlightViolatingAttr).call(this, issueDetails.violatingNodeAttribute, issue);
    } else {
        _class_private_method_get(this, _highlightTagAsViolating, highlightTagAsViolating).call(this, issue);
    }
}
function highlightViolatingAttr(name, issue) {
    var tag = this.listItemElement.getElementsByClassName('webkit-html-tag')[0];
    var attributes = tag.getElementsByClassName('webkit-html-attribute');
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var attribute = _step.value;
            if (attribute.getElementsByClassName('webkit-html-attribute-name')[0].textContent === name) {
                var attributeElement = attribute.getElementsByClassName('webkit-html-attribute-name')[0];
                attributeElement.classList.add('violating-element');
                _class_private_field_get(this, _nodeElementToIssue).set(attributeElement, issue);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function highlightTagAsViolating(issue) {
    var tagElement = this.listItemElement.getElementsByClassName('webkit-html-tag-name')[0];
    tagElement.classList.add('violating-element');
    _class_private_field_get(this, _nodeElementToIssue).set(tagElement, issue);
}
var InitialChildrenLimit = 500;
// A union of HTML4 and HTML5-Draft elements that explicitly
// or implicitly (for HTML5) forbid the closing tag.
var ForbiddenClosingTagElements = new Set([
    'area',
    'base',
    'basefont',
    'br',
    'canvas',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'img',
    'input',
    'keygen',
    'link',
    'menuitem',
    'meta',
    'param',
    'source',
    'track',
    'wbr'
]);
// These tags we do not allow editing their tag name.
var EditTagBlocklist = new Set([
    'html',
    'head',
    'body'
]);
function adornerComparator(adornerA, adornerB) {
    var compareCategories = _components_components_js__WEBPACK_IMPORTED_MODULE_16__.AdornerManager.compareAdornerNamesByCategory(adornerB.name, adornerB.name);
    if (compareCategories === 0) {
        return adornerA.name.localeCompare(adornerB.name);
    }
    return compareCategories;
}
// As a privacy measure we are logging elements tree outline as a flat list where every tree item is a
// child of a tree outline.
function loggingParentProvider(e) {
    var _treeElement_treeOutline;
    var treeElement = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_13__.TreeOutline.TreeElement.getTreeElementBylistItemNode(e);
    return treeElement === null || treeElement === void 0 ? void 0 : (_treeElement_treeOutline = treeElement.treeOutline) === null || _treeElement_treeOutline === void 0 ? void 0 : _treeElement_treeOutline.contentElement;
}
_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_14__.registerParentProvider('elementsTreeOutline', loggingParentProvider); //# sourceMappingURL=ElementsTreeElement.js.map


}),
"./panels/elements/ElementsTreeElementHighlighter.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ElementsTreeElementHighlighter: function() { return ElementsTreeElementHighlighter; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ElementsTreeElement.js */ "./panels/elements/ElementsTreeElement.js");
/* harmony import */var _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ElementsTreeOutline.js */ "./panels/elements/ElementsTreeOutline.js");
// Copyright (c) 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var ElementsTreeElementHighlighter = /*#__PURE__*/ function() {
    "use strict";
    function ElementsTreeElementHighlighter(treeOutline, throttler) {
        _class_call_check(this, ElementsTreeElementHighlighter);
        _define_property(this, "throttler", void 0);
        _define_property(this, "treeOutline", void 0);
        _define_property(this, "currentHighlightedElement", void 0);
        _define_property(this, "alreadyExpandedParentElement", void 0);
        _define_property(this, "pendingHighlightNode", void 0);
        _define_property(this, "isModifyingTreeOutline", void 0);
        this.throttler = throttler;
        this.treeOutline = treeOutline;
        this.treeOutline.addEventListener(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_2__.TreeOutline.Events.ElementExpanded, this.clearState, this);
        this.treeOutline.addEventListener(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_2__.TreeOutline.Events.ElementCollapsed, this.clearState, this);
        this.treeOutline.addEventListener(_ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_4__.ElementsTreeOutline.Events.SelectedNodeChanged, this.clearState, this);
        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.TargetManager.TargetManager.instance().addModelListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.OverlayModel.OverlayModel, "HighlightNodeRequested" /* SDK.OverlayModel.Events.HighlightNodeRequested */ , this.highlightNode, this, {
            scoped: true
        });
        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.TargetManager.TargetManager.instance().addModelListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.OverlayModel.OverlayModel, "InspectModeWillBeToggled" /* SDK.OverlayModel.Events.InspectModeWillBeToggled */ , this.clearState, this, {
            scoped: true
        });
        this.currentHighlightedElement = null;
        this.alreadyExpandedParentElement = null;
        this.pendingHighlightNode = null;
        this.isModifyingTreeOutline = false;
    }
    _create_class(ElementsTreeElementHighlighter, [
        {
            key: "highlightNode",
            value: function highlightNode(event) {
                if (!_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('highlight-node-on-hover-in-overlay').get()) {
                    return;
                }
                var domNode = event.data;
                var _this = this;
                void this.throttler.schedule(/*#__PURE__*/ _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        _this.highlightNodeInternal(_this.pendingHighlightNode);
                        _this.pendingHighlightNode = null;
                        return [
                            2
                        ];
                    });
                }));
                this.pendingHighlightNode = this.treeOutline === _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_4__.ElementsTreeOutline.forDOMModel(domNode.domModel()) ? domNode : null;
            }
        },
        {
            key: "highlightNodeInternal",
            value: function highlightNodeInternal(node) {
                this.isModifyingTreeOutline = true;
                var treeElement = null;
                if (this.currentHighlightedElement) {
                    var currentTreeElement = this.currentHighlightedElement;
                    while(currentTreeElement && currentTreeElement !== this.alreadyExpandedParentElement){
                        if (currentTreeElement.expanded) {
                            currentTreeElement.collapse();
                        }
                        var parent = currentTreeElement.parent;
                        currentTreeElement = _instanceof(parent, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_3__.ElementsTreeElement) ? parent : null;
                    }
                }
                this.currentHighlightedElement = null;
                this.alreadyExpandedParentElement = null;
                if (node) {
                    var deepestExpandedParent = node;
                    var treeElementByNode = this.treeOutline.treeElementByNode;
                    var treeIsNotExpanded = function(deepestExpandedParent) {
                        var element = treeElementByNode.get(deepestExpandedParent);
                        return element ? !element.expanded : true;
                    };
                    while(deepestExpandedParent && treeIsNotExpanded(deepestExpandedParent)){
                        deepestExpandedParent = deepestExpandedParent.parentNode;
                    }
                    this.alreadyExpandedParentElement = deepestExpandedParent ? treeElementByNode.get(deepestExpandedParent) : this.treeOutline.rootElement();
                    treeElement = this.treeOutline.createTreeElementFor(node);
                }
                this.currentHighlightedElement = treeElement;
                this.treeOutline.setHoverEffect(treeElement);
                if (treeElement) {
                    treeElement.reveal(true);
                }
                this.isModifyingTreeOutline = false;
            }
        },
        {
            key: "clearState",
            value: function clearState() {
                if (this.isModifyingTreeOutline) {
                    return;
                }
                this.currentHighlightedElement = null;
                this.alreadyExpandedParentElement = null;
                this.pendingHighlightNode = null;
            }
        }
    ]);
    return ElementsTreeElementHighlighter;
} //# sourceMappingURL=ElementsTreeElementHighlighter.js.map
();


}),
"./panels/elements/ElementsTreeOutline.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ElementsTreeOutline: function() { return ElementsTreeOutline; },
  MappedCharToEntity: function() { return MappedCharToEntity; },
  Renderer: function() { return Renderer; },
  ShortcutTreeElement: function() { return ShortcutTreeElement; },
  UpdateRecord: function() { return UpdateRecord; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_root_root_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/root/root.js */ "./core/root/root.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _models_issues_manager_issues_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/issues_manager/issues_manager.js */ "./models/issues_manager/issues_manager.js");
/* harmony import */var _ui_components_adorners_adorners_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/components/adorners/adorners.js */ "./ui/components/adorners/adorners.js");
/* harmony import */var _ui_components_code_highlighter_code_highlighter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ui/components/code_highlighter/code_highlighter.js */ "./ui/components/code_highlighter/code_highlighter.js");
/* harmony import */var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */var _ui_components_issue_counter_issue_counter_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/components/issue_counter/issue_counter.js */ "./ui/components/issue_counter/issue_counter.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
/* harmony import */var _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ElementsTreeElement.js */ "./panels/elements/ElementsTreeElement.js");
/* harmony import */var _elementsTreeOutline_css_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./elementsTreeOutline.css.js */ "./panels/elements/elementsTreeOutline.css.js");
/* harmony import */var _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ImagePreviewPopover.js */ "./panels/elements/ImagePreviewPopover.js");
/* harmony import */var _TopLayerContainer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./TopLayerContainer.js */ "./panels/elements/TopLayerContainer.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*
 * Copyright (C) 2007, 2008 Apple Inc.  All rights reserved.
 * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _class_private_method_get(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _class_private_method_init(obj, privateSet) {
    _check_private_redeclaration(obj, privateSet);
    privateSet.add(obj);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

















var UIStrings = {
    /**
     *@description ARIA accessible name in Elements Tree Outline of the Elements panel
     */ pageDom: 'Page DOM',
    /**
     *@description A context menu item to store a value as a global variable the Elements Panel
     */ storeAsGlobalVariable: 'Store as global variable',
    /**
     *@description Tree element expand all button element button text content in Elements Tree Outline of the Elements panel
     *@example {3} PH1
     */ showAllNodesDMore: 'Show all nodes ({PH1} more)',
    /**
     *@description Link text content in Elements Tree Outline of the Elements panel
     */ reveal: 'reveal',
    /**
     * @description A context menu item to open the badge settings pane
     */ adornerSettings: 'Badge settings\u2026'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/elements/ElementsTreeOutline.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
var elementsTreeOutlineByDOMModel = new WeakMap();
var populatedTreeElements = new Set();
var _genericIssues = /*#__PURE__*/ new WeakMap(), _topLayerContainerByParent = /*#__PURE__*/ new WeakMap(), _issuesManager = /*#__PURE__*/ new WeakMap(), _popupHelper = /*#__PURE__*/ new WeakMap(), _nodeElementToIssue = /*#__PURE__*/ new WeakMap(), _issueCodeToTooltipTitle = /*#__PURE__*/ new WeakSet(), _onIssueEventReceived = /*#__PURE__*/ new WeakSet(), _onIssueAdded = /*#__PURE__*/ new WeakSet(), _addAllElementIssues = /*#__PURE__*/ new WeakSet(), _addTreeElementIssue = /*#__PURE__*/ new WeakSet(), _Common_ObjectWrapper_eventMixin;
var ElementsTreeOutline = /*#__PURE__*/ function(_superClass) {
    "use strict";
    _inherits(ElementsTreeOutline, _superClass);
    var _super = _create_super(ElementsTreeOutline);
    function ElementsTreeOutline(omitRootDOMNode, selectEnabled, hideGutter) {
        _class_call_check(this, ElementsTreeOutline);
        var _this;
        _this = _super.call(this);
        _class_private_method_init(_assert_this_initialized(_this), _issueCodeToTooltipTitle);
        _class_private_method_init(_assert_this_initialized(_this), _onIssueEventReceived);
        _class_private_method_init(_assert_this_initialized(_this), _onIssueAdded);
        _class_private_method_init(_assert_this_initialized(_this), _addAllElementIssues);
        _class_private_method_init(_assert_this_initialized(_this), _addTreeElementIssue);
        _define_property(_assert_this_initialized(_this), "treeElementByNode", void 0);
        _define_property(_assert_this_initialized(_this), "shadowRoot", void 0);
        _define_property(_assert_this_initialized(_this), "elementInternal", void 0);
        _define_property(_assert_this_initialized(_this), "includeRootDOMNode", void 0);
        _define_property(_assert_this_initialized(_this), "selectEnabled", void 0);
        _define_property(_assert_this_initialized(_this), "rootDOMNodeInternal", void 0);
        _define_property(_assert_this_initialized(_this), "selectedDOMNodeInternal", void 0);
        _define_property(_assert_this_initialized(_this), "visible", void 0);
        _define_property(_assert_this_initialized(_this), "imagePreviewPopover", void 0);
        _define_property(_assert_this_initialized(_this), "updateRecords", void 0);
        _define_property(_assert_this_initialized(_this), "treeElementsBeingUpdated", void 0);
        _define_property(_assert_this_initialized(_this), "decoratorExtensions", void 0);
        _define_property(_assert_this_initialized(_this), "showHTMLCommentsSetting", void 0);
        _define_property(_assert_this_initialized(_this), "multilineEditing", void 0);
        _define_property(_assert_this_initialized(_this), "visibleWidthInternal", void 0);
        _define_property(_assert_this_initialized(_this), "clipboardNodeData", void 0);
        _define_property(_assert_this_initialized(_this), "isXMLMimeTypeInternal", void 0);
        _define_property(_assert_this_initialized(_this), "suppressRevealAndSelect", false);
        _define_property(_assert_this_initialized(_this), "previousHoveredElement", void 0);
        _define_property(_assert_this_initialized(_this), "treeElementBeingDragged", void 0);
        _define_property(_assert_this_initialized(_this), "dragOverTreeElement", void 0);
        _define_property(_assert_this_initialized(_this), "updateModifiedNodesTimeout", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _genericIssues, {
            writable: true,
            value: []
        });
        _class_private_field_init(_assert_this_initialized(_this), _topLayerContainerByParent, {
            writable: true,
            value: new Map()
        });
        _class_private_field_init(_assert_this_initialized(_this), _issuesManager, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _popupHelper, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _nodeElementToIssue, {
            writable: true,
            value: new Map()
        });
        if (_core_root_root_js__WEBPACK_IMPORTED_MODULE_2__.Runtime.experiments.isEnabled("highlight-errors-elements-panel" /* Root.Runtime.ExperimentName.HIGHLIGHT_ERRORS_ELEMENTS_PANEL */ )) {
            _class_private_field_set(_assert_this_initialized(_this), _issuesManager, _models_issues_manager_issues_manager_js__WEBPACK_IMPORTED_MODULE_4__.IssuesManager.IssuesManager.instance());
            _class_private_field_get(_this, _issuesManager).addEventListener("IssueAdded" /* IssuesManager.IssuesManager.Events.IssueAdded */ , _class_private_method_get(_assert_this_initialized(_this), _onIssueEventReceived, onIssueEventReceived), _assert_this_initialized(_this));
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = _class_private_field_get(_this, _issuesManager).issues()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var issue = _step.value;
                    if (_instanceof(issue, _models_issues_manager_issues_manager_js__WEBPACK_IMPORTED_MODULE_4__.GenericIssue.GenericIssue)) {
                        _class_private_method_get(_this, _onIssueAdded, onIssueAdded).call(_assert_this_initialized(_this), issue);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        _this.treeElementByNode = new WeakMap();
        var shadowContainer = document.createElement('div');
        _this.shadowRoot = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.createShadowRootWithCoreStyles(shadowContainer, {
            cssFile: [
                _elementsTreeOutline_css_js__WEBPACK_IMPORTED_MODULE_14__["default"],
                _ui_components_code_highlighter_code_highlighter_js__WEBPACK_IMPORTED_MODULE_6__.Style["default"]
            ],
            delegatesFocus: undefined
        });
        var outlineDisclosureElement = _this.shadowRoot.createChild('div', 'elements-disclosure');
        _this.elementInternal = _this.element;
        _this.elementInternal.classList.add('elements-tree-outline', 'source-code');
        if (hideGutter) {
            _this.elementInternal.classList.add('elements-hide-gutter');
        }
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.setLabel(_this.elementInternal, i18nString(UIStrings.pageDom));
        _this.elementInternal.addEventListener('focusout', _this.onfocusout.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('mousedown', _this.onmousedown.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('mousemove', _this.onmousemove.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('mouseleave', _this.onmouseleave.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('dragstart', _this.ondragstart.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('dragover', _this.ondragover.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('dragleave', _this.ondragleave.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('drop', _this.ondrop.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('dragend', _this.ondragend.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('contextmenu', _this.contextMenuEventFired.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('clipboard-beforecopy', _this.onBeforeCopy.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('clipboard-copy', _this.onCopyOrCut.bind(_assert_this_initialized(_this), false), false);
        _this.elementInternal.addEventListener('clipboard-cut', _this.onCopyOrCut.bind(_assert_this_initialized(_this), true), false);
        _this.elementInternal.addEventListener('clipboard-paste', _this.onPaste.bind(_assert_this_initialized(_this)), false);
        _this.elementInternal.addEventListener('keydown', _this.onKeyDown.bind(_assert_this_initialized(_this)), false);
        outlineDisclosureElement.appendChild(_this.elementInternal);
        _this.element = shadowContainer;
        _this.contentElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__.tree('elements')));
        _this.includeRootDOMNode = !omitRootDOMNode;
        _this.selectEnabled = selectEnabled;
        _this.rootDOMNodeInternal = null;
        _this.selectedDOMNodeInternal = null;
        _this.visible = false;
        _this.imagePreviewPopover = new _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_15__.ImagePreviewPopover(_this.contentElement, function(event) {
            var link = event.target;
            while(link && !_ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_15__.ImagePreviewPopover.getImageURL(link)){
                link = link.parentElementOrShadowHost();
            }
            return link;
        }, function(link) {
            var listItem = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.enclosingNodeOrSelfWithNodeName(link, 'li');
            if (!listItem) {
                return null;
            }
            var treeElement = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TreeOutline.TreeElement.getTreeElementBylistItemNode(listItem);
            if (!treeElement) {
                return null;
            }
            return treeElement.node();
        });
        _this.updateRecords = new Map();
        _this.treeElementsBeingUpdated = new Set();
        _this.decoratorExtensions = null;
        _this.showHTMLCommentsSetting = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('show-html-comments');
        _this.showHTMLCommentsSetting.addChangeListener(_this.onShowHTMLCommentsChange.bind(_assert_this_initialized(_this)));
        _this.setUseLightSelectionColor(true);
        if (_core_root_root_js__WEBPACK_IMPORTED_MODULE_2__.Runtime.experiments.isEnabled("highlight-errors-elements-panel" /* Root.Runtime.ExperimentName.HIGHLIGHT_ERRORS_ELEMENTS_PANEL */ )) {
            _class_private_field_set(_assert_this_initialized(_this), _popupHelper, new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.PopoverHelper.PopoverHelper(_this.elementInternal, function(event) {
                var hoveredNode = event.composedPath()[0];
                if (!hoveredNode || !hoveredNode.matches('.violating-element')) {
                    return null;
                }
                var issue = _class_private_field_get(_this, _nodeElementToIssue).get(hoveredNode);
                if (!issue) {
                    return null;
                }
                var issueDetails = issue.details();
                var tooltipTitle = _class_private_method_get(_this, _issueCodeToTooltipTitle, issueCodeToTooltipTitle).call(_assert_this_initialized(_this), issueDetails.errorType);
                var issueKindIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon();
                issueKindIcon.data = _ui_components_issue_counter_issue_counter_js__WEBPACK_IMPORTED_MODULE_8__.IssueCounter.getIssueKindIconData(issue.getKind());
                issueKindIcon.style.cursor = 'pointer';
                var viewIssueElement = document.createElement('a');
                viewIssueElement.href = '#';
                viewIssueElement.textContent = 'View issue:';
                var issueTitle = document.createElement('span');
                issueTitle.textContent = tooltipTitle;
                var element = document.createElement('div');
                element.appendChild(issueKindIcon);
                element.appendChild(viewIssueElement);
                element.appendChild(issueTitle);
                element.style.display = 'flex';
                element.style.alignItems = 'center';
                element.style.gap = '5px';
                return {
                    box: hoveredNode.boxInWindow(),
                    show: function() {
                        var _ref = _async_to_generator(function(popover) {
                            var openIssueEvent;
                            return _ts_generator(this, function(_state) {
                                popover.setIgnoreLeftMargin(true);
                                openIssueEvent = function() {
                                    return _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(issue);
                                };
                                viewIssueElement.addEventListener('click', function() {
                                    return openIssueEvent();
                                });
                                issueKindIcon.addEventListener('click', function() {
                                    return openIssueEvent();
                                });
                                popover.contentElement.appendChild(element);
                                return [
                                    2,
                                    true
                                ];
                            });
                        });
                        return function(popover) {
                            return _ref.apply(this, arguments);
                        };
                    }()
                };
            }, 'elements.issue'));
            _class_private_field_get(_this, _popupHelper).setTimeout(300);
            _class_private_field_get(_this, _popupHelper).setHasPadding(true);
        }
        return _this;
    }
    _create_class(ElementsTreeOutline, [
        {
            key: "onShowHTMLCommentsChange",
            value: function onShowHTMLCommentsChange() {
                var selectedNode = this.selectedDOMNode();
                if (selectedNode && selectedNode.nodeType() === Node.COMMENT_NODE && !this.showHTMLCommentsSetting.get()) {
                    this.selectDOMNode(selectedNode.parentNode);
                }
                this.update();
            }
        },
        {
            key: "setWordWrap",
            value: function setWordWrap(wrap) {
                this.elementInternal.classList.toggle('elements-tree-nowrap', !wrap);
            }
        },
        {
            key: "setMultilineEditing",
            value: function setMultilineEditing(multilineEditing) {
                this.multilineEditing = multilineEditing;
            }
        },
        {
            key: "visibleWidth",
            value: function visibleWidth() {
                return this.visibleWidthInternal || 0;
            }
        },
        {
            key: "setVisibleWidth",
            value: function setVisibleWidth(width) {
                this.visibleWidthInternal = width;
                if (this.multilineEditing) {
                    this.multilineEditing.resize();
                }
            }
        },
        {
            key: "setClipboardData",
            value: function setClipboardData(data) {
                if (this.clipboardNodeData) {
                    var treeElement = this.findTreeElement(this.clipboardNodeData.node);
                    if (treeElement) {
                        treeElement.setInClipboard(false);
                    }
                    delete this.clipboardNodeData;
                }
                if (data) {
                    var treeElement1 = this.findTreeElement(data.node);
                    if (treeElement1) {
                        treeElement1.setInClipboard(true);
                    }
                    this.clipboardNodeData = data;
                }
            }
        },
        {
            key: "resetClipboardIfNeeded",
            value: function resetClipboardIfNeeded(removedNode) {
                if (this.clipboardNodeData && this.clipboardNodeData.node === removedNode) {
                    this.setClipboardData(null);
                }
            }
        },
        {
            key: "onBeforeCopy",
            value: function onBeforeCopy(event) {
                event.handled = true;
            }
        },
        {
            key: "onCopyOrCut",
            value: function onCopyOrCut(isCut, event) {
                this.setClipboardData(null);
                // @ts-ignore this bound in the main entry point
                var originalEvent = event['original'];
                if (!originalEvent || !originalEvent.target) {
                    return;
                }
                // Don't prevent the normal copy if the user has a selection.
                if (_instanceof(originalEvent.target, Node) && originalEvent.target.hasSelection()) {
                    return;
                }
                // Do not interfere with text editing.
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isEditing()) {
                    return;
                }
                var targetNode = this.selectedDOMNode();
                if (!targetNode) {
                    return;
                }
                if (!originalEvent.clipboardData) {
                    return;
                }
                originalEvent.clipboardData.clearData();
                event.handled = true;
                this.performCopyOrCut(isCut, targetNode);
            }
        },
        {
            key: "performCopyOrCut",
            value: function performCopyOrCut(isCut, node) {
                if (!node) {
                    return;
                }
                if (isCut && (node.isShadowRoot() || node.ancestorUserAgentShadowRoot())) {
                    return;
                }
                void node.copyNode();
                this.setClipboardData({
                    node: node,
                    isCut: isCut
                });
            }
        },
        {
            key: "canPaste",
            value: function canPaste(targetNode) {
                if (targetNode.isShadowRoot() || targetNode.ancestorUserAgentShadowRoot()) {
                    return false;
                }
                if (!this.clipboardNodeData) {
                    return false;
                }
                var node = this.clipboardNodeData.node;
                if (this.clipboardNodeData.isCut && (node === targetNode || node.isAncestor(targetNode))) {
                    return false;
                }
                if (targetNode.domModel() !== node.domModel()) {
                    return false;
                }
                return true;
            }
        },
        {
            key: "pasteNode",
            value: function pasteNode(targetNode) {
                if (this.canPaste(targetNode)) {
                    this.performPaste(targetNode);
                }
            }
        },
        {
            key: "duplicateNode",
            value: function duplicateNode(targetNode) {
                this.performDuplicate(targetNode);
            }
        },
        {
            key: "onPaste",
            value: function onPaste(event) {
                // Do not interfere with text editing.
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isEditing()) {
                    return;
                }
                var targetNode = this.selectedDOMNode();
                if (!targetNode || !this.canPaste(targetNode)) {
                    return;
                }
                event.handled = true;
                this.performPaste(targetNode);
            }
        },
        {
            key: "performPaste",
            value: function performPaste(targetNode) {
                if (!this.clipboardNodeData) {
                    return;
                }
                if (this.clipboardNodeData.isCut) {
                    this.clipboardNodeData.node.moveTo(targetNode, null, expandCallback.bind(this));
                    this.setClipboardData(null);
                } else {
                    this.clipboardNodeData.node.copyTo(targetNode, null, expandCallback.bind(this));
                }
                function expandCallback(error, pastedNode) {
                    if (error || !pastedNode) {
                        return;
                    }
                    this.selectDOMNode(pastedNode);
                }
            }
        },
        {
            key: "performDuplicate",
            value: function performDuplicate(targetNode) {
                if (targetNode.isInShadowTree()) {
                    return;
                }
                var parentNode = targetNode.parentNode ? targetNode.parentNode : targetNode;
                if (parentNode.nodeName() === '#document') {
                    return;
                }
                targetNode.copyTo(parentNode, targetNode.nextSibling);
            }
        },
        {
            key: "setVisible",
            value: function setVisible(visible) {
                if (visible === this.visible) {
                    return;
                }
                this.visible = visible;
                if (!this.visible) {
                    this.imagePreviewPopover.hide();
                    if (this.multilineEditing) {
                        this.multilineEditing.cancel();
                    }
                    return;
                }
                this.runPendingUpdates();
                if (this.selectedDOMNodeInternal) {
                    this.revealAndSelectNode(this.selectedDOMNodeInternal, false);
                }
            }
        },
        {
            key: "rootDOMNode",
            get: function get() {
                return this.rootDOMNodeInternal;
            },
            set: function set(x) {
                if (this.rootDOMNodeInternal === x) {
                    return;
                }
                this.rootDOMNodeInternal = x;
                this.isXMLMimeTypeInternal = x && x.isXMLNode();
                this.update();
            }
        },
        {
            key: "isXMLMimeType",
            get: function get() {
                return Boolean(this.isXMLMimeTypeInternal);
            }
        },
        {
            key: "selectedDOMNode",
            value: function selectedDOMNode() {
                return this.selectedDOMNodeInternal;
            }
        },
        {
            key: "selectDOMNode",
            value: function selectDOMNode(node, focus) {
                if (this.selectedDOMNodeInternal === node) {
                    this.revealAndSelectNode(node, !focus);
                    return;
                }
                this.selectedDOMNodeInternal = node;
                this.revealAndSelectNode(node, !focus);
                // The revealAndSelectNode() method might find a different element if there is inlined text,
                // and the select() call would change the selectedDOMNode and reenter this setter. So to
                // avoid calling selectedNodeChanged() twice, first check if selectedDOMNodeInternal is the same
                // node as the one passed in.
                if (this.selectedDOMNodeInternal === node) {
                    this.selectedNodeChanged(Boolean(focus));
                }
            }
        },
        {
            key: "editing",
            value: function editing() {
                var node = this.selectedDOMNode();
                if (!node) {
                    return false;
                }
                var treeElement = this.findTreeElement(node);
                if (!treeElement) {
                    return false;
                }
                return treeElement.isEditing() || false;
            }
        },
        {
            key: "update",
            value: function update() {
                var selectedNode = this.selectedDOMNode();
                this.removeChildren();
                if (!this.rootDOMNode) {
                    return;
                }
                if (this.includeRootDOMNode) {
                    var treeElement = this.createElementTreeElement(this.rootDOMNode);
                    this.appendChild(treeElement);
                } else {
                    // FIXME: this could use findTreeElement to reuse a tree element if it already exists
                    var children = this.visibleChildren(this.rootDOMNode);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var child = _step.value;
                            var treeElement1 = this.createElementTreeElement(child);
                            this.appendChild(treeElement1);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                if (_instanceof(this.rootDOMNode, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.DOMDocument)) {
                    void this.createTopLayerContainer(this.rootElement(), this.rootDOMNode);
                }
                if (selectedNode) {
                    this.revealAndSelectNode(selectedNode, true);
                }
            }
        },
        {
            key: "selectedNodeChanged",
            value: function selectedNodeChanged(focus) {
                this.dispatchEventToListeners(ElementsTreeOutline.Events.SelectedNodeChanged, {
                    node: this.selectedDOMNodeInternal,
                    focus: focus
                });
            }
        },
        {
            key: "fireElementsTreeUpdated",
            value: function fireElementsTreeUpdated(nodes) {
                this.dispatchEventToListeners(ElementsTreeOutline.Events.ElementsTreeUpdated, nodes);
            }
        },
        {
            key: "findTreeElement",
            value: function findTreeElement(node) {
                var treeElement = this.lookUpTreeElement(node);
                if (!treeElement && node.nodeType() === Node.TEXT_NODE) {
                    // The text node might have been inlined if it was short, so try to find the parent element.
                    treeElement = this.lookUpTreeElement(node.parentNode);
                }
                return treeElement;
            }
        },
        {
            key: "lookUpTreeElement",
            value: function lookUpTreeElement(node) {
                if (!node) {
                    return null;
                }
                var cachedElement = this.treeElementByNode.get(node);
                if (cachedElement) {
                    return cachedElement;
                }
                // Walk up the parent pointers from the desired node
                var ancestors = [];
                var currentNode;
                for(currentNode = node.parentNode; currentNode; currentNode = currentNode.parentNode){
                    ancestors.push(currentNode);
                    if (this.treeElementByNode.has(currentNode)) {
                        break;
                    }
                }
                if (!currentNode) {
                    return null;
                }
                // Walk down to populate each ancestor's children, to fill in the tree and the cache.
                for(var i = ancestors.length - 1; i >= 0; --i){
                    var child = ancestors[i - 1] || node;
                    var treeElement = this.treeElementByNode.get(ancestors[i]);
                    if (treeElement) {
                        void treeElement.onpopulate(); // fill the cache with the children of treeElement
                        if (child.index && child.index >= treeElement.expandedChildrenLimit()) {
                            this.setExpandedChildrenLimit(treeElement, child.index + 1);
                        }
                    }
                }
                return this.treeElementByNode.get(node) || null;
            }
        },
        {
            key: "createTreeElementFor",
            value: function createTreeElementFor(node) {
                var treeElement = this.findTreeElement(node);
                if (treeElement) {
                    return treeElement;
                }
                if (!node.parentNode) {
                    return null;
                }
                treeElement = this.createTreeElementFor(node.parentNode);
                return treeElement ? this.showChild(treeElement, node) : null;
            }
        },
        {
            key: "revealAndSelectNode",
            value: function revealAndSelectNode(node, omitFocus) {
                if (this.suppressRevealAndSelect) {
                    return;
                }
                if (!this.includeRootDOMNode && node === this.rootDOMNode && this.rootDOMNode) {
                    node = this.rootDOMNode.firstChild;
                }
                if (!node) {
                    return;
                }
                var treeElement = this.createTreeElementFor(node);
                if (!treeElement) {
                    return;
                }
                treeElement.revealAndSelect(omitFocus);
            }
        },
        {
            key: "treeElementFromEventInternal",
            value: function treeElementFromEventInternal(event) {
                var scrollContainer = this.element.parentElement;
                if (!scrollContainer) {
                    return null;
                }
                var x = event.pageX;
                var y = event.pageY;
                // Our list items have 1-pixel cracks between them vertically. We avoid
                // the cracks by checking slightly above and slightly below the mouse
                // and seeing if we hit the same element each time.
                var elementUnderMouse = this.treeElementFromPoint(x, y);
                var elementAboveMouse = this.treeElementFromPoint(x, y - 2);
                var element;
                if (elementUnderMouse === elementAboveMouse) {
                    element = elementUnderMouse;
                } else {
                    element = this.treeElementFromPoint(x, y + 2);
                }
                return element;
            }
        },
        {
            key: "onfocusout",
            value: function onfocusout(_event) {
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
            }
        },
        {
            key: "onmousedown",
            value: function onmousedown(event) {
                var element = this.treeElementFromEventInternal(event);
                if (element) {
                    element.select();
                }
            }
        },
        {
            key: "setHoverEffect",
            value: function setHoverEffect(treeElement) {
                if (this.previousHoveredElement === treeElement) {
                    return;
                }
                if (_instanceof(this.previousHoveredElement, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    this.previousHoveredElement.hovered = false;
                    delete this.previousHoveredElement;
                }
                if (_instanceof(treeElement, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    treeElement.hovered = true;
                    this.previousHoveredElement = treeElement;
                }
            }
        },
        {
            key: "onmousemove",
            value: function onmousemove(event) {
                var element = this.treeElementFromEventInternal(event);
                if (element && this.previousHoveredElement === element) {
                    return;
                }
                this.setHoverEffect(element);
                this.highlightTreeElement(element, !_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.KeyboardShortcut.KeyboardShortcut.eventHasEitherCtrlOrMeta(event));
            }
        },
        {
            key: "highlightTreeElement",
            value: function highlightTreeElement(element, showInfo) {
                if (_instanceof(element, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    element.node().domModel().overlayModel().highlightInOverlay({
                        node: element.node(),
                        selectorList: undefined
                    }, 'all', showInfo);
                    return;
                }
                if (_instanceof(element, ShortcutTreeElement)) {
                    element.domModel().overlayModel().highlightInOverlay({
                        deferredNode: element.deferredNode(),
                        selectorList: undefined
                    }, 'all', showInfo);
                }
            }
        },
        {
            key: "onmouseleave",
            value: function onmouseleave(_event) {
                this.setHoverEffect(null);
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
            }
        },
        {
            key: "ondragstart",
            value: function ondragstart(event) {
                var node = event.target;
                if (!node || node.hasSelection()) {
                    return false;
                }
                if (node.nodeName === 'A') {
                    return false;
                }
                var treeElement = this.validDragSourceOrTarget(this.treeElementFromEventInternal(event));
                if (!treeElement) {
                    return false;
                }
                if (treeElement.node().nodeName() === 'BODY' || treeElement.node().nodeName() === 'HEAD') {
                    return false;
                }
                if (!event.dataTransfer || !treeElement.listItemElement.textContent) {
                    return;
                }
                event.dataTransfer.setData('text/plain', treeElement.listItemElement.textContent.replace(/\u200b/g, ''));
                event.dataTransfer.effectAllowed = 'copyMove';
                this.treeElementBeingDragged = treeElement;
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
                return true;
            }
        },
        {
            key: "ondragover",
            value: function ondragover(event) {
                if (!this.treeElementBeingDragged) {
                    return false;
                }
                var treeElement = this.validDragSourceOrTarget(this.treeElementFromEventInternal(event));
                if (!treeElement) {
                    return false;
                }
                var node = treeElement.node();
                while(node){
                    if (node === this.treeElementBeingDragged.nodeInternal) {
                        return false;
                    }
                    node = node.parentNode;
                }
                treeElement.listItemElement.classList.add('elements-drag-over');
                this.dragOverTreeElement = treeElement;
                event.preventDefault();
                if (event.dataTransfer) {
                    event.dataTransfer.dropEffect = 'move';
                }
                return false;
            }
        },
        {
            key: "ondragleave",
            value: function ondragleave(event) {
                this.clearDragOverTreeElementMarker();
                event.preventDefault();
                return false;
            }
        },
        {
            key: "validDragSourceOrTarget",
            value: function validDragSourceOrTarget(treeElement) {
                if (!treeElement) {
                    return null;
                }
                if (!_instanceof(treeElement, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    return null;
                }
                var elementsTreeElement = treeElement;
                var node = elementsTreeElement.node();
                if (!node.parentNode || node.parentNode.nodeType() !== Node.ELEMENT_NODE) {
                    return null;
                }
                return elementsTreeElement;
            }
        },
        {
            key: "ondrop",
            value: function ondrop(event) {
                event.preventDefault();
                var treeElement = this.treeElementFromEventInternal(event);
                if (_instanceof(treeElement, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    this.doMove(treeElement);
                }
            }
        },
        {
            key: "doMove",
            value: function doMove(treeElement) {
                if (!this.treeElementBeingDragged) {
                    return;
                }
                var parentNode;
                var anchorNode;
                if (treeElement.isClosingTag()) {
                    // Drop onto closing tag -> insert as last child.
                    parentNode = treeElement.node();
                    anchorNode = null;
                } else {
                    var dragTargetNode = treeElement.node();
                    parentNode = dragTargetNode.parentNode;
                    anchorNode = dragTargetNode;
                }
                if (!parentNode) {
                    return;
                }
                var wasExpanded = this.treeElementBeingDragged.expanded;
                this.treeElementBeingDragged.nodeInternal.moveTo(parentNode, anchorNode, this.selectNodeAfterEdit.bind(this, wasExpanded));
                delete this.treeElementBeingDragged;
            }
        },
        {
            key: "ondragend",
            value: function ondragend(event) {
                event.preventDefault();
                this.clearDragOverTreeElementMarker();
                delete this.treeElementBeingDragged;
            }
        },
        {
            key: "clearDragOverTreeElementMarker",
            value: function clearDragOverTreeElementMarker() {
                if (this.dragOverTreeElement) {
                    this.dragOverTreeElement.listItemElement.classList.remove('elements-drag-over');
                    delete this.dragOverTreeElement;
                }
            }
        },
        {
            key: "contextMenuEventFired",
            value: function contextMenuEventFired(event) {
                var treeElement = this.treeElementFromEventInternal(event);
                if (_instanceof(treeElement, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    this.showContextMenu(treeElement, event);
                }
            }
        },
        {
            key: "showContextMenu",
            value: function showContextMenu(treeElement, event) {
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isEditing()) {
                    return;
                }
                var contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ContextMenu.ContextMenu(event);
                var isPseudoElement = Boolean(treeElement.node().pseudoType());
                var isTag = treeElement.node().nodeType() === Node.ELEMENT_NODE && !isPseudoElement;
                var node = event.target;
                if (!node) {
                    return;
                }
                var textNode = node.enclosingNodeOrSelfWithClass('webkit-html-text-node');
                if (textNode && textNode.classList.contains('bogus')) {
                    textNode = null;
                }
                var commentNode = node.enclosingNodeOrSelfWithClass('webkit-html-comment');
                contextMenu.saveSection().appendItem(i18nString(UIStrings.storeAsGlobalVariable), this.saveNodeToTempVariable.bind(this, treeElement.node()), {
                    jslogContext: 'store-as-global-variable'
                });
                if (textNode) {
                    treeElement.populateTextContextMenu(contextMenu, textNode);
                } else if (isTag) {
                    treeElement.populateTagContextMenu(contextMenu, event);
                } else if (commentNode) {
                    treeElement.populateNodeContextMenu(contextMenu);
                } else if (isPseudoElement) {
                    treeElement.populatePseudoElementContextMenu(contextMenu);
                }
                contextMenu.viewSection().appendItem(i18nString(UIStrings.adornerSettings), function() {
                    _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_12__.ElementsPanel.instance().showAdornerSettingsPane();
                }, {
                    jslogContext: 'show-adorner-settings'
                });
                contextMenu.appendApplicableItems(treeElement.node());
                void contextMenu.show();
            }
        },
        {
            key: "saveNodeToTempVariable",
            value: function saveNodeToTempVariable(node) {
                return _async_to_generator(function() {
                    var _remoteObjectForConsole_runtimeModel_target, remoteObjectForConsole, consoleModel;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    node.resolveToObject()
                                ];
                            case 1:
                                remoteObjectForConsole = _state.sent();
                                consoleModel = remoteObjectForConsole === null || remoteObjectForConsole === void 0 ? void 0 : (_remoteObjectForConsole_runtimeModel_target = remoteObjectForConsole.runtimeModel().target()) === null || _remoteObjectForConsole_runtimeModel_target === void 0 ? void 0 : _remoteObjectForConsole_runtimeModel_target.model(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.ConsoleModel.ConsoleModel);
                                return [
                                    4,
                                    consoleModel === null || consoleModel === void 0 ? void 0 : consoleModel.saveToTempVariable(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Context.Context.instance().flavor(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeModel.ExecutionContext), remoteObjectForConsole)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "runPendingUpdates",
            value: function runPendingUpdates() {
                this.updateModifiedNodes();
            }
        },
        {
            key: "onKeyDown",
            value: function onKeyDown(event) {
                var keyboardEvent = event;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isEditing()) {
                    return;
                }
                var node = this.selectedDOMNode();
                if (!node) {
                    return;
                }
                var treeElement = this.treeElementByNode.get(node);
                if (!treeElement) {
                    return;
                }
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(keyboardEvent) && node.parentNode) {
                    if (keyboardEvent.key === 'ArrowUp' && node.previousSibling) {
                        node.moveTo(node.parentNode, node.previousSibling, this.selectNodeAfterEdit.bind(this, treeElement.expanded));
                        keyboardEvent.consume(true);
                        return;
                    }
                    if (keyboardEvent.key === 'ArrowDown' && node.nextSibling) {
                        node.moveTo(node.parentNode, node.nextSibling.nextSibling, this.selectNodeAfterEdit.bind(this, treeElement.expanded));
                        keyboardEvent.consume(true);
                        return;
                    }
                }
            }
        },
        {
            key: "toggleEditAsHTML",
            value: function toggleEditAsHTML(node, startEditing, callback) {
                var treeElement = this.treeElementByNode.get(node);
                if (!treeElement || !treeElement.hasEditableNode()) {
                    return;
                }
                if (node.pseudoType()) {
                    return;
                }
                var parentNode = node.parentNode;
                var index = node.index;
                var wasExpanded = treeElement.expanded;
                treeElement.toggleEditAsHTML(editingFinished.bind(this), startEditing);
                function editingFinished(success) {
                    if (callback) {
                        callback();
                    }
                    if (!success) {
                        return;
                    }
                    // Select it and expand if necessary. We force tree update so that it processes dom events and is up to date.
                    this.runPendingUpdates();
                    if (!index) {
                        return;
                    }
                    var children = parentNode && parentNode.children();
                    var newNode = children ? children[index] || parentNode : parentNode;
                    if (!newNode) {
                        return;
                    }
                    this.selectDOMNode(newNode, true);
                    if (wasExpanded) {
                        var newTreeItem = this.findTreeElement(newNode);
                        if (newTreeItem) {
                            newTreeItem.expand();
                        }
                    }
                }
            }
        },
        {
            key: "selectNodeAfterEdit",
            value: function selectNodeAfterEdit(wasExpanded, error, newNode) {
                if (error) {
                    return null;
                }
                // Select it and expand if necessary. We force tree update so that it processes dom events and is up to date.
                this.runPendingUpdates();
                if (!newNode) {
                    return null;
                }
                this.selectDOMNode(newNode, true);
                var newTreeItem = this.findTreeElement(newNode);
                if (wasExpanded) {
                    if (newTreeItem) {
                        newTreeItem.expand();
                    }
                }
                return newTreeItem;
            }
        },
        {
            key: "toggleHideElement",
            value: /**
     * Runs a script on the node's remote object that toggles a class name on
     * the node and injects a stylesheet into the head of the node's document
     * containing a rule to set "visibility: hidden" on the class and all it's
     * ancestors.
     */ function toggleHideElement(node) {
                return _async_to_generator(function() {
                    var pseudoType, effectiveNode, hidden, object;
                    function toggleClassAndInjectStyleRule(pseudoType, hidden) {
                        var classNamePrefix = '__web-inspector-hide';
                        var classNameSuffix = '-shortcut__';
                        var styleTagId = '__web-inspector-hide-shortcut-style__';
                        var selectors = [];
                        selectors.push('.__web-inspector-hide-shortcut__');
                        selectors.push('.__web-inspector-hide-shortcut__ *');
                        selectors.push('.__web-inspector-hidebefore-shortcut__::before');
                        selectors.push('.__web-inspector-hideafter-shortcut__::after');
                        var selector = selectors.join(', ');
                        var ruleBody = '    visibility: hidden !important;';
                        var rule = '\n' + selector + '\n{\n' + ruleBody + '\n}\n';
                        var className = classNamePrefix + (pseudoType || '') + classNameSuffix;
                        this.classList.toggle(className, hidden);
                        var localRoot = this;
                        while(localRoot.parentNode){
                            localRoot = localRoot.parentNode;
                        }
                        if (localRoot.nodeType === Node.DOCUMENT_NODE) {
                            localRoot = document.head;
                        }
                        var style = localRoot.querySelector('style#' + styleTagId);
                        if (style) {
                            return;
                        }
                        style = document.createElement('style');
                        style.id = styleTagId;
                        style.textContent = rule;
                        localRoot.appendChild(style);
                    }
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                pseudoType = node.pseudoType();
                                effectiveNode = pseudoType ? node.parentNode : node;
                                if (!effectiveNode) {
                                    return [
                                        2
                                    ];
                                }
                                hidden = node.marker('hidden-marker');
                                return [
                                    4,
                                    effectiveNode.resolveToObject('')
                                ];
                            case 1:
                                object = _state.sent();
                                if (!object) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    object.callFunction(toggleClassAndInjectStyleRule, [
                                        {
                                            value: pseudoType
                                        },
                                        {
                                            value: !hidden
                                        }
                                    ])
                                ];
                            case 2:
                                _state.sent();
                                object.release();
                                node.setMarker('hidden-marker', hidden ? null : true);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "isToggledToHidden",
            value: function isToggledToHidden(node) {
                return Boolean(node.marker('hidden-marker'));
            }
        },
        {
            key: "reset",
            value: function reset() {
                this.rootDOMNode = null;
                this.selectDOMNode(null, false);
                this.imagePreviewPopover.hide();
                delete this.clipboardNodeData;
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
                this.updateRecords.clear();
            }
        },
        {
            key: "wireToDOMModel",
            value: function wireToDOMModel(domModel) {
                elementsTreeOutlineByDOMModel.set(domModel, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.MarkersChanged, this.markersChanged, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.NodeInserted, this.nodeInserted, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.NodeRemoved, this.nodeRemoved, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.AttrModified, this.attributeModified, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.AttrRemoved, this.attributeRemoved, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.CharacterDataModified, this.characterDataModified, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.DocumentUpdated, this.documentUpdated, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.ChildNodeCountUpdated, this.childNodeCountUpdated, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.DistributedNodesChanged, this.distributedNodesChanged, this);
                domModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.TopLayerElementsChanged, this.topLayerElementsChanged, this);
            }
        },
        {
            key: "unwireFromDOMModel",
            value: function unwireFromDOMModel(domModel) {
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.MarkersChanged, this.markersChanged, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.NodeInserted, this.nodeInserted, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.NodeRemoved, this.nodeRemoved, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.AttrModified, this.attributeModified, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.AttrRemoved, this.attributeRemoved, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.CharacterDataModified, this.characterDataModified, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.DocumentUpdated, this.documentUpdated, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.ChildNodeCountUpdated, this.childNodeCountUpdated, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.DistributedNodesChanged, this.distributedNodesChanged, this);
                domModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.Events.TopLayerElementsChanged, this.topLayerElementsChanged, this);
                elementsTreeOutlineByDOMModel.delete(domModel);
            }
        },
        {
            key: "addUpdateRecord",
            value: function addUpdateRecord(node) {
                var record = this.updateRecords.get(node);
                if (!record) {
                    record = new UpdateRecord();
                    this.updateRecords.set(node, record);
                }
                return record;
            }
        },
        {
            key: "updateRecordForHighlight",
            value: function updateRecordForHighlight(node) {
                if (!this.visible) {
                    return null;
                }
                return this.updateRecords.get(node) || null;
            }
        },
        {
            key: "documentUpdated",
            value: function documentUpdated(event) {
                var domModel = event.data;
                this.reset();
                if (domModel.existingDocument()) {
                    this.rootDOMNode = domModel.existingDocument();
                    if (_core_root_root_js__WEBPACK_IMPORTED_MODULE_2__.Runtime.experiments.isEnabled("highlight-errors-elements-panel" /* Root.Runtime.ExperimentName.HIGHLIGHT_ERRORS_ELEMENTS_PANEL */ )) {
                        _class_private_method_get(this, _addAllElementIssues, addAllElementIssues).call(this);
                    }
                }
            }
        },
        {
            key: "attributeModified",
            value: function attributeModified(event) {
                var node = event.data.node;
                this.addUpdateRecord(node).attributeModified(event.data.name);
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "attributeRemoved",
            value: function attributeRemoved(event) {
                var node = event.data.node;
                this.addUpdateRecord(node).attributeRemoved(event.data.name);
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "characterDataModified",
            value: function characterDataModified(event) {
                var node = event.data;
                this.addUpdateRecord(node).charDataModified();
                // Text could be large and force us to render itself as the child in the tree outline.
                if (node.parentNode && node.parentNode.firstChild === node.parentNode.lastChild) {
                    this.addUpdateRecord(node.parentNode).childrenModified();
                }
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "nodeInserted",
            value: function nodeInserted(event) {
                var node = event.data;
                this.addUpdateRecord(node.parentNode).nodeInserted(node);
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "nodeRemoved",
            value: function nodeRemoved(event) {
                var _event_data = event.data, node = _event_data.node, parent = _event_data.parent;
                this.resetClipboardIfNeeded(node);
                this.addUpdateRecord(parent).nodeRemoved(node);
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "childNodeCountUpdated",
            value: function childNodeCountUpdated(event) {
                var node = event.data;
                this.addUpdateRecord(node).childrenModified();
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "distributedNodesChanged",
            value: function distributedNodesChanged(event) {
                var node = event.data;
                this.addUpdateRecord(node).childrenModified();
                this.updateModifiedNodesSoon();
            }
        },
        {
            key: "updateModifiedNodesSoon",
            value: function updateModifiedNodesSoon() {
                if (!this.updateRecords.size) {
                    return;
                }
                if (this.updateModifiedNodesTimeout) {
                    return;
                }
                this.updateModifiedNodesTimeout = window.setTimeout(this.updateModifiedNodes.bind(this), 50);
            }
        },
        {
            key: "updateModifiedNodes",
            value: function updateModifiedNodes() {
                if (this.updateModifiedNodesTimeout) {
                    clearTimeout(this.updateModifiedNodesTimeout);
                    delete this.updateModifiedNodesTimeout;
                }
                var updatedNodes = _to_consumable_array(this.updateRecords.keys());
                var hidePanelWhileUpdating = updatedNodes.length > 10;
                var treeOutlineContainerElement;
                var originalScrollTop;
                if (hidePanelWhileUpdating) {
                    treeOutlineContainerElement = this.element.parentNode;
                    originalScrollTop = treeOutlineContainerElement ? treeOutlineContainerElement.scrollTop : 0;
                    this.elementInternal.classList.add('hidden');
                }
                var rootNodeUpdateRecords = this.rootDOMNodeInternal && this.updateRecords.get(this.rootDOMNodeInternal);
                if (rootNodeUpdateRecords && rootNodeUpdateRecords.hasChangedChildren()) {
                    // Document's children have changed, perform total update.
                    this.update();
                } else {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.updateRecords[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var _step_value = _sliced_to_array(_step.value, 2), node = _step_value[0], record = _step_value[1];
                            if (record.hasChangedChildren()) {
                                this.updateModifiedParentNode(node);
                            } else {
                                this.updateModifiedNode(node);
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                if (hidePanelWhileUpdating) {
                    this.elementInternal.classList.remove('hidden');
                    if (treeOutlineContainerElement && originalScrollTop) {
                        treeOutlineContainerElement.scrollTop = originalScrollTop;
                    }
                }
                this.updateRecords.clear();
                this.fireElementsTreeUpdated(updatedNodes);
            }
        },
        {
            key: "updateModifiedNode",
            value: function updateModifiedNode(node) {
                var treeElement = this.findTreeElement(node);
                if (treeElement) {
                    treeElement.updateTitle(this.updateRecordForHighlight(node));
                }
            }
        },
        {
            key: "updateModifiedParentNode",
            value: function updateModifiedParentNode(node) {
                var parentTreeElement = this.findTreeElement(node);
                if (parentTreeElement) {
                    parentTreeElement.setExpandable(this.hasVisibleChildren(node));
                    parentTreeElement.updateTitle(this.updateRecordForHighlight(node));
                    if (populatedTreeElements.has(parentTreeElement)) {
                        this.updateChildren(parentTreeElement);
                    }
                }
            }
        },
        {
            key: "populateTreeElement",
            value: function populateTreeElement(treeElement) {
                var _this = this;
                if (treeElement.childCount() || !treeElement.isExpandable()) {
                    return Promise.resolve();
                }
                return new Promise(function(resolve) {
                    treeElement.node().getChildNodes(function() {
                        populatedTreeElements.add(treeElement);
                        _this.updateModifiedParentNode(treeElement.node());
                        resolve();
                    });
                });
            }
        },
        {
            key: "createTopLayerContainer",
            value: function createTopLayerContainer(parent, document1) {
                var _this = this;
                return _async_to_generator(function() {
                    var container;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!parent.treeOutline || !_instanceof(parent.treeOutline, ElementsTreeOutline)) {
                                    return [
                                        2
                                    ];
                                }
                                container = new _TopLayerContainer_js__WEBPACK_IMPORTED_MODULE_16__.TopLayerContainer(parent.treeOutline, document1);
                                return [
                                    4,
                                    container.throttledUpdateTopLayerElements()
                                ];
                            case 1:
                                _state.sent();
                                if (container.currentTopLayerDOMNodes.size > 0) {
                                    parent.appendChild(container);
                                }
                                _class_private_field_get(_this, _topLayerContainerByParent).set(parent, container);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createElementTreeElement",
            value: function createElementTreeElement(node, isClosingTag) {
                var treeElement = new _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement(node, isClosingTag);
                treeElement.setExpandable(!isClosingTag && this.hasVisibleChildren(node));
                if (node.nodeType() === Node.ELEMENT_NODE && node.parentNode && node.parentNode.nodeType() === Node.DOCUMENT_NODE && !node.parentNode.parentNode) {
                    treeElement.setCollapsible(false);
                }
                if (node.hasAssignedSlot()) {
                    treeElement.createSlotLink(node.assignedSlot);
                }
                treeElement.selectable = Boolean(this.selectEnabled);
                return treeElement;
            }
        },
        {
            key: "showChild",
            value: function showChild(treeElement, child) {
                if (treeElement.isClosingTag()) {
                    return null;
                }
                var index = this.visibleChildren(treeElement.node()).indexOf(child);
                if (index === -1) {
                    return null;
                }
                if (index >= treeElement.expandedChildrenLimit()) {
                    this.setExpandedChildrenLimit(treeElement, index + 1);
                }
                return treeElement.childAt(index);
            }
        },
        {
            key: "visibleChildren",
            value: function visibleChildren(node) {
                var _visibleChildren;
                var visibleChildren = _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement.visibleShadowRoots(node);
                var contentDocument = node.contentDocument();
                if (contentDocument) {
                    visibleChildren.push(contentDocument);
                }
                var templateContent = node.templateContent();
                if (templateContent) {
                    visibleChildren.push(templateContent);
                }
                (_visibleChildren = visibleChildren).push.apply(_visibleChildren, _to_consumable_array(node.viewTransitionPseudoElements()));
                var markerPseudoElement = node.markerPseudoElement();
                if (markerPseudoElement) {
                    visibleChildren.push(markerPseudoElement);
                }
                var beforePseudoElement = node.beforePseudoElement();
                if (beforePseudoElement) {
                    visibleChildren.push(beforePseudoElement);
                }
                if (node.childNodeCount()) {
                    // Children may be stale when the outline is not wired to receive DOMModel updates.
                    var children = node.children() || [];
                    if (!this.showHTMLCommentsSetting.get()) {
                        children = children.filter(function(n) {
                            return n.nodeType() !== Node.COMMENT_NODE;
                        });
                    }
                    visibleChildren = visibleChildren.concat(children);
                }
                var afterPseudoElement = node.afterPseudoElement();
                if (afterPseudoElement) {
                    visibleChildren.push(afterPseudoElement);
                }
                var backdropPseudoElement = node.backdropPseudoElement();
                if (backdropPseudoElement) {
                    visibleChildren.push(backdropPseudoElement);
                }
                return visibleChildren;
            }
        },
        {
            key: "hasVisibleChildren",
            value: function hasVisibleChildren(node) {
                if (node.isIframe()) {
                    return true;
                }
                if (node.contentDocument()) {
                    return true;
                }
                if (node.templateContent()) {
                    return true;
                }
                if (_ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement.visibleShadowRoots(node).length) {
                    return true;
                }
                if (node.hasPseudoElements()) {
                    return true;
                }
                if (node.isInsertionPoint()) {
                    return true;
                }
                return Boolean(node.childNodeCount()) && !_ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement.canShowInlineText(node);
            }
        },
        {
            key: "createExpandAllButtonTreeElement",
            value: function createExpandAllButtonTreeElement(treeElement) {
                var button = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.createTextButton('', handleLoadAllChildren.bind(this));
                button.value = '';
                var expandAllButtonElement = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TreeOutline.TreeElement(button);
                expandAllButtonElement.selectable = false;
                expandAllButtonElement.button = button;
                return expandAllButtonElement;
                function handleLoadAllChildren(event) {
                    var visibleChildCount = this.visibleChildren(treeElement.node()).length;
                    this.setExpandedChildrenLimit(treeElement, Math.max(visibleChildCount, treeElement.expandedChildrenLimit() + _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.InitialChildrenLimit));
                    event.consume();
                }
            }
        },
        {
            key: "setExpandedChildrenLimit",
            value: function setExpandedChildrenLimit(treeElement, expandedChildrenLimit) {
                if (treeElement.expandedChildrenLimit() === expandedChildrenLimit) {
                    return;
                }
                treeElement.setExpandedChildrenLimit(expandedChildrenLimit);
                if (treeElement.treeOutline && !this.treeElementsBeingUpdated.has(treeElement)) {
                    this.updateModifiedParentNode(treeElement.node());
                }
            }
        },
        {
            key: "updateChildren",
            value: function updateChildren(treeElement) {
                if (!treeElement.isExpandable()) {
                    if (!treeElement.treeOutline) {
                        return;
                    }
                    var selectedTreeElement = treeElement.treeOutline.selectedTreeElement;
                    if (selectedTreeElement && selectedTreeElement.hasAncestor(treeElement)) {
                        treeElement.select(true);
                    }
                    treeElement.removeChildren();
                    return;
                }
                console.assert(!treeElement.isClosingTag());
                this.innerUpdateChildren(treeElement);
            }
        },
        {
            key: "insertChildElement",
            value: function insertChildElement(treeElement, child, index, isClosingTag) {
                var newElement = this.createElementTreeElement(child, isClosingTag);
                treeElement.insertChild(newElement, index);
                if (_instanceof(child, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.DOMDocument)) {
                    void this.createTopLayerContainer(newElement, child);
                }
                return newElement;
            }
        },
        {
            key: "moveChild",
            value: function moveChild(treeElement, child, targetIndex) {
                if (treeElement.indexOfChild(child) === targetIndex) {
                    return;
                }
                var wasSelected = child.selected;
                if (child.parent) {
                    child.parent.removeChild(child);
                }
                treeElement.insertChild(child, targetIndex);
                if (wasSelected) {
                    child.select();
                }
            }
        },
        {
            key: "innerUpdateChildren",
            value: function innerUpdateChildren(treeElement) {
                if (this.treeElementsBeingUpdated.has(treeElement)) {
                    return;
                }
                this.treeElementsBeingUpdated.add(treeElement);
                var node = treeElement.node();
                var visibleChildren = this.visibleChildren(node);
                var visibleChildrenSet = new Set(visibleChildren);
                // Remove any tree elements that no longer have this node as their parent and save
                // all existing elements that could be reused. This also removes closing tag element.
                var existingTreeElements = new Map();
                for(var i = treeElement.childCount() - 1; i >= 0; --i){
                    var existingTreeElement = treeElement.childAt(i);
                    if (!_instanceof(existingTreeElement, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                        // Remove expand all button and shadow host toolbar.
                        treeElement.removeChildAtIndex(i);
                        continue;
                    }
                    var elementsTreeElement = existingTreeElement;
                    var existingNode = elementsTreeElement.node();
                    if (visibleChildrenSet.has(existingNode)) {
                        existingTreeElements.set(existingNode, existingTreeElement);
                        continue;
                    }
                    treeElement.removeChildAtIndex(i);
                }
                for(var i1 = 0; i1 < visibleChildren.length && i1 < treeElement.expandedChildrenLimit(); ++i1){
                    var child = visibleChildren[i1];
                    var existingTreeElement1 = existingTreeElements.get(child) || this.findTreeElement(child);
                    if (existingTreeElement1 && existingTreeElement1 !== treeElement) {
                        // If an existing element was found, just move it.
                        this.moveChild(treeElement, existingTreeElement1, i1);
                    } else {
                        // No existing element found, insert a new element.
                        var newElement = this.insertChildElement(treeElement, child, i1);
                        if (this.updateRecordForHighlight(node) && treeElement.expanded) {
                            _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement.animateOnDOMUpdate(newElement);
                        }
                        // If a node was inserted in the middle of existing list dynamically we might need to increase the limit.
                        if (treeElement.childCount() > treeElement.expandedChildrenLimit()) {
                            this.setExpandedChildrenLimit(treeElement, treeElement.expandedChildrenLimit() + 1);
                        }
                    }
                }
                // Update expand all button.
                var expandedChildCount = treeElement.childCount();
                if (visibleChildren.length > expandedChildCount) {
                    var targetButtonIndex = expandedChildCount;
                    if (!treeElement.expandAllButtonElement) {
                        treeElement.expandAllButtonElement = this.createExpandAllButtonTreeElement(treeElement);
                    }
                    treeElement.insertChild(treeElement.expandAllButtonElement, targetButtonIndex);
                    treeElement.expandAllButtonElement.title = i18nString(UIStrings.showAllNodesDMore, {
                        PH1: visibleChildren.length - expandedChildCount
                    });
                } else if (treeElement.expandAllButtonElement) {
                    treeElement.expandAllButtonElement = null;
                }
                // Insert shortcuts to distributed children.
                if (node.isInsertionPoint()) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = node.distributedNodes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var distributedNode = _step.value;
                            treeElement.appendChild(new ShortcutTreeElement(distributedNode));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                // Insert close tag.
                if (node.nodeType() === Node.ELEMENT_NODE && !node.pseudoType() && treeElement.isExpandable()) {
                    this.insertChildElement(treeElement, node, treeElement.childCount(), true);
                }
                this.treeElementsBeingUpdated.delete(treeElement);
            }
        },
        {
            key: "markersChanged",
            value: function markersChanged(event) {
                var node = event.data;
                var treeElement = this.treeElementByNode.get(node);
                if (treeElement) {
                    treeElement.updateDecorations();
                }
            }
        },
        {
            key: "topLayerElementsChanged",
            value: function topLayerElementsChanged() {
                var _this = this;
                return _async_to_generator(function() {
                    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, parent, container, err;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    6,
                                    7,
                                    8
                                ]);
                                _iterator = _class_private_field_get(_this, _topLayerContainerByParent)[Symbol.iterator]();
                                _state.label = 2;
                            case 2:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    5
                                ];
                                _step_value = _sliced_to_array(_step.value, 2), parent = _step_value[0], container = _step_value[1];
                                return [
                                    4,
                                    container.throttledUpdateTopLayerElements()
                                ];
                            case 3:
                                _state.sent();
                                if (container.currentTopLayerDOMNodes.size > 0 && container.parent !== parent) {
                                    parent.appendChild(container);
                                }
                                container.hidden = container.currentTopLayerDOMNodes.size === 0;
                                _state.label = 4;
                            case 4:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    8
                                ];
                            case 7:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 8:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ], [
        {
            key: "forDOMModel",
            value: function forDOMModel(domModel) {
                return elementsTreeOutlineByDOMModel.get(domModel) || null;
            }
        }
    ]);
    return ElementsTreeOutline;
}(_Common_ObjectWrapper_eventMixin = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.ObjectWrapper.eventMixin(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TreeOutline.TreeOutline));
_define_property(ElementsTreeOutline, "treeOutlineSymbol", Symbol('treeOutline'));
function issueCodeToTooltipTitle(errorType) {
    switch(errorType){
        case "FormLabelForNameError" /* Protocol.Audits.GenericIssueErrorType.FormLabelForNameError */ :
            return 'Incorrect use of <label for=FORM_ELEMENT>';
        case "FormDuplicateIdForInputError" /* Protocol.Audits.GenericIssueErrorType.FormDuplicateIdForInputError */ :
            return 'Duplicate form field id in the same form';
        case "FormInputWithNoLabelError" /* Protocol.Audits.GenericIssueErrorType.FormInputWithNoLabelError */ :
            return 'Form field without valid aria-labelledby attribute or associated label';
        case "FormAutocompleteAttributeEmptyError" /* Protocol.Audits.GenericIssueErrorType.FormAutocompleteAttributeEmptyError */ :
            return 'Incorrect use of autocomplete attribute';
        case "FormEmptyIdAndNameAttributesForInputError" /* Protocol.Audits.GenericIssueErrorType.FormEmptyIdAndNameAttributesForInputError */ :
            return 'A form field element should have an id or name attribute';
        case "FormAriaLabelledByToNonExistingId" /* Protocol.Audits.GenericIssueErrorType.FormAriaLabelledByToNonExistingId */ :
            return 'An aria-labelledby attribute doesn\'t match any element id';
        case "FormInputAssignedAutocompleteValueToIdOrNameAttributeError" /* Protocol.Audits.GenericIssueErrorType.FormInputAssignedAutocompleteValueToIdOrNameAttributeError */ :
            return 'An element doesn\'t have an autocomplete attribute';
        case "FormLabelHasNeitherForNorNestedInput" /* Protocol.Audits.GenericIssueErrorType.FormLabelHasNeitherForNorNestedInput */ :
            return 'No label associated with a form field';
        case "FormLabelForMatchesNonExistingIdError" /* Protocol.Audits.GenericIssueErrorType.FormLabelForMatchesNonExistingIdError */ :
            return 'Incorrect use of <label for=FORM_ELEMENT>';
        case "FormInputHasWrongButWellIntendedAutocompleteValueError" /* Protocol.Audits.GenericIssueErrorType.FormInputHasWrongButWellIntendedAutocompleteValueError */ :
            return 'Non-standard autocomplete attribute value';
        default:
            return '';
    }
}
function onIssueEventReceived(event) {
    return _onIssueEventReceived1.apply(this, arguments);
}
function _onIssueEventReceived1() {
    _onIssueEventReceived1 = _async_to_generator(function(event) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!_instanceof(event.data.issue, _models_issues_manager_issues_manager_js__WEBPACK_IMPORTED_MODULE_4__.GenericIssue.GenericIssue)) return [
                        3,
                        2
                    ];
                    _class_private_method_get(this, _onIssueAdded, onIssueAdded).call(this, event.data.issue);
                    return [
                        4,
                        _class_private_method_get(this, _addTreeElementIssue, addTreeElementIssue).call(this, event.data.issue)
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return _onIssueEventReceived1.apply(this, arguments);
}
function onIssueAdded(issue) {
    _class_private_field_get(this, _genericIssues).push(issue);
}
function addAllElementIssues() {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = _class_private_field_get(this, _genericIssues)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var issue = _step.value;
            void _class_private_method_get(this, _addTreeElementIssue, addTreeElementIssue).call(this, issue);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function addTreeElementIssue(issue) {
    return _addTreeElementIssue1.apply(this, arguments);
}
function _addTreeElementIssue1() {
    _addTreeElementIssue1 = _async_to_generator(function(issue) {
        var issueDetails, tooltipTitle, deferredDOMNode, node, treeElement, treeElementNodeElementsToIssue, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, element, _$issue;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    issueDetails = issue.details();
                    tooltipTitle = _class_private_method_get(this, _issueCodeToTooltipTitle, issueCodeToTooltipTitle).call(this, issueDetails.errorType);
                    if (!tooltipTitle) {
                        return [
                            2
                        ];
                    }
                    if (!this.rootDOMNode || !issueDetails.violatingNodeId) {
                        return [
                            2
                        ];
                    }
                    deferredDOMNode = new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.DeferredDOMNode(this.rootDOMNode.domModel().target(), issueDetails.violatingNodeId);
                    return [
                        4,
                        deferredDOMNode.resolvePromise()
                    ];
                case 1:
                    node = _state.sent();
                    if (!node) {
                        return [
                            2
                        ];
                    }
                    treeElement = this.findTreeElement(node);
                    if (treeElement) {
                        treeElement.addIssue(issue);
                        treeElementNodeElementsToIssue = treeElement.issuesByNodeElement;
                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            // This element could be the treeElement tags name or an attribute.
                            for(_iterator = treeElementNodeElementsToIssue[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                _step_value = _sliced_to_array(_step.value, 2), element = _step_value[0], _$issue = _step_value[1];
                                _class_private_field_get(this, _nodeElementToIssue).set(element, _$issue);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _addTreeElementIssue1.apply(this, arguments);
}
(function(ElementsTreeOutline) {
    var Events;
    (function(Events) {
        Events["SelectedNodeChanged"] = "SelectedNodeChanged";
        Events["ElementsTreeUpdated"] = "ElementsTreeUpdated";
    })(Events = ElementsTreeOutline.Events || (ElementsTreeOutline.Events = {}));
})(ElementsTreeOutline || (ElementsTreeOutline = {}));
// clang-format off
var MappedCharToEntity = new Map([
    [
        '\xA0',
        'nbsp'
    ],
    [
        '\xAD',
        'shy'
    ],
    [
        '\u2002',
        'ensp'
    ],
    [
        '\u2003',
        'emsp'
    ],
    [
        '\u2009',
        'thinsp'
    ],
    [
        '\u200A',
        'hairsp'
    ],
    [
        '\u200B',
        'ZeroWidthSpace'
    ],
    [
        '\u200C',
        'zwnj'
    ],
    [
        '\u200D',
        'zwj'
    ],
    [
        '\u200E',
        'lrm'
    ],
    [
        '\u200F',
        'rlm'
    ],
    [
        '\u202A',
        '#x202A'
    ],
    [
        '\u202B',
        '#x202B'
    ],
    [
        '\u202C',
        '#x202C'
    ],
    [
        '\u202D',
        '#x202D'
    ],
    [
        '\u202E',
        '#x202E'
    ],
    [
        '\u2060',
        'NoBreak'
    ],
    [
        '\uFEFF',
        '#xFEFF'
    ]
]);
// clang-format on
var UpdateRecord = /*#__PURE__*/ function() {
    "use strict";
    function UpdateRecord() {
        _class_call_check(this, UpdateRecord);
        _define_property(this, "modifiedAttributes", void 0);
        _define_property(this, "removedAttributes", void 0);
        _define_property(this, "hasChangedChildrenInternal", void 0);
        _define_property(this, "hasRemovedChildrenInternal", void 0);
        _define_property(this, "charDataModifiedInternal", void 0);
    }
    _create_class(UpdateRecord, [
        {
            key: "attributeModified",
            value: function attributeModified(attrName) {
                if (this.removedAttributes && this.removedAttributes.has(attrName)) {
                    this.removedAttributes.delete(attrName);
                }
                if (!this.modifiedAttributes) {
                    this.modifiedAttributes = new Set();
                }
                this.modifiedAttributes.add(attrName);
            }
        },
        {
            key: "attributeRemoved",
            value: function attributeRemoved(attrName) {
                if (this.modifiedAttributes && this.modifiedAttributes.has(attrName)) {
                    this.modifiedAttributes.delete(attrName);
                }
                if (!this.removedAttributes) {
                    this.removedAttributes = new Set();
                }
                this.removedAttributes.add(attrName);
            }
        },
        {
            key: "nodeInserted",
            value: function nodeInserted(_node) {
                this.hasChangedChildrenInternal = true;
            }
        },
        {
            key: "nodeRemoved",
            value: function nodeRemoved(_node) {
                this.hasChangedChildrenInternal = true;
                this.hasRemovedChildrenInternal = true;
            }
        },
        {
            key: "charDataModified",
            value: function charDataModified() {
                this.charDataModifiedInternal = true;
            }
        },
        {
            key: "childrenModified",
            value: function childrenModified() {
                this.hasChangedChildrenInternal = true;
            }
        },
        {
            key: "isAttributeModified",
            value: function isAttributeModified(attributeName) {
                return this.modifiedAttributes !== null && this.modifiedAttributes !== undefined && this.modifiedAttributes.has(attributeName);
            }
        },
        {
            key: "hasRemovedAttributes",
            value: function hasRemovedAttributes() {
                return this.removedAttributes !== null && this.removedAttributes !== undefined && Boolean(this.removedAttributes.size);
            }
        },
        {
            key: "isCharDataModified",
            value: function isCharDataModified() {
                return Boolean(this.charDataModifiedInternal);
            }
        },
        {
            key: "hasChangedChildren",
            value: function hasChangedChildren() {
                return Boolean(this.hasChangedChildrenInternal);
            }
        },
        {
            key: "hasRemovedChildren",
            value: function hasRemovedChildren() {
                return Boolean(this.hasRemovedChildrenInternal);
            }
        }
    ]);
    return UpdateRecord;
}();
var rendererInstance;
var Renderer = /*#__PURE__*/ function() {
    "use strict";
    function Renderer() {
        _class_call_check(this, Renderer);
    }
    _create_class(Renderer, [
        {
            key: "render",
            value: function render(object) {
                return _async_to_generator(function() {
                    var node, treeOutline, firstChild;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                node = null;
                                if (!_instanceof(object, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.DOMNode)) return [
                                    3,
                                    1
                                ];
                                node = object;
                                return [
                                    3,
                                    3
                                ];
                            case 1:
                                if (!_instanceof(object, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.DOMModel.DeferredDOMNode)) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    object.resolvePromise()
                                ];
                            case 2:
                                node = _state.sent();
                                _state.label = 3;
                            case 3:
                                if (!node) {
                                    // Can't render not-a-node, or couldn't resolve deferred node.
                                    return [
                                        2,
                                        null
                                    ];
                                }
                                treeOutline = new ElementsTreeOutline(/* omitRootDOMNode: */ false, /* selectEnabled: */ true, /* hideGutter: */ true);
                                treeOutline.rootDOMNode = node;
                                firstChild = treeOutline.firstChild();
                                if (firstChild && !firstChild.isExpandable()) {
                                    treeOutline.element.classList.add('single-node');
                                }
                                treeOutline.setVisible(true);
                                // @ts-ignore used in console_test_runner
                                treeOutline.element.treeElementForTest = firstChild;
                                treeOutline.setShowSelectionOnKeyboardFocus(/* show: */ true, /* preventTabOrder: */ true);
                                return [
                                    2,
                                    {
                                        node: treeOutline.element,
                                        tree: treeOutline
                                    }
                                ];
                        }
                    });
                })();
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!rendererInstance || forceNew) {
                    rendererInstance = new Renderer();
                }
                return rendererInstance;
            }
        }
    ]);
    return Renderer;
}();
var ShortcutTreeElement = /*#__PURE__*/ function(_UI_TreeOutline_TreeElement) {
    "use strict";
    _inherits(ShortcutTreeElement, _UI_TreeOutline_TreeElement);
    var _super = _create_super(ShortcutTreeElement);
    function ShortcutTreeElement(nodeShortcut) {
        _class_call_check(this, ShortcutTreeElement);
        var _this;
        _this = _super.call(this, '');
        _define_property(_assert_this_initialized(_this), "nodeShortcut", void 0);
        _define_property(_assert_this_initialized(_this), "hoveredInternal", void 0);
        _this.listItemElement.createChild('div', 'selection fill');
        var title = _this.listItemElement.createChild('span', 'elements-tree-shortcut-title');
        var text = nodeShortcut.nodeName.toLowerCase();
        if (nodeShortcut.nodeType === Node.ELEMENT_NODE) {
            text = '<' + text + '>';
        }
        title.textContent = '\u21AA ' + text;
        _this.nodeShortcut = nodeShortcut;
        _this.addRevealAdorner();
        return _this;
    }
    _create_class(ShortcutTreeElement, [
        {
            key: "addRevealAdorner",
            value: function addRevealAdorner() {
                var _this = this;
                var adorner = new _ui_components_adorners_adorners_js__WEBPACK_IMPORTED_MODULE_5__.Adorner.Adorner();
                adorner.classList.add('adorner-reveal');
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_11__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_11__.AdornerManager.RegisteredAdorners.REVEAL);
                var name = config.name;
                var adornerContent = document.createElement('span');
                var linkIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon();
                linkIcon.name = 'select-element';
                var slotText = document.createElement('span');
                slotText.textContent = name;
                adornerContent.append(linkIcon);
                adornerContent.append(slotText);
                adornerContent.classList.add('adorner-with-icon');
                adorner.data = {
                    name: name,
                    content: adornerContent,
                    jslogContext: 'reveal'
                };
                this.listItemElement.appendChild(adorner);
                var onClick = function() {
                    _this.nodeShortcut.deferredNode.resolve(function(node) {
                        void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(node);
                    });
                };
                adorner.addInteraction(onClick, {
                    isToggle: false,
                    shouldPropagateOnKeydown: false,
                    ariaLabelDefault: i18nString(UIStrings.reveal),
                    ariaLabelActive: i18nString(UIStrings.reveal)
                });
                adorner.addEventListener('mousedown', function(e) {
                    return e.consume();
                }, false);
                _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_12__.ElementsPanel.instance().registerAdorner(adorner);
            }
        },
        {
            key: "hovered",
            get: function get() {
                return Boolean(this.hoveredInternal);
            },
            set: function set(x) {
                if (this.hoveredInternal === x) {
                    return;
                }
                this.hoveredInternal = x;
                this.listItemElement.classList.toggle('hovered', x);
            }
        },
        {
            key: "deferredNode",
            value: function deferredNode() {
                return this.nodeShortcut.deferredNode;
            }
        },
        {
            key: "domModel",
            value: function domModel() {
                return this.nodeShortcut.deferredNode.domModel();
            }
        },
        {
            key: "setLeftIndentOverlay",
            value: function setLeftIndentOverlay() {
                // We use parent's `--indent` value and add 24px to account for an extra level of indent.
                var indent = 24;
                if (this.parent && _instanceof(this.parent, _ElementsTreeElement_js__WEBPACK_IMPORTED_MODULE_13__.ElementsTreeElement)) {
                    var parentIndent = parseFloat(this.parent.listItemElement.style.getPropertyValue('--indent')) || 0;
                    indent += parentIndent;
                }
                this.listItemElement.style.setProperty('--indent', indent + 'px');
            }
        },
        {
            key: "onattach",
            value: function onattach() {
                this.setLeftIndentOverlay();
            }
        },
        {
            key: "onselect",
            value: function onselect(selectedByUser) {
                if (!selectedByUser) {
                    return true;
                }
                this.nodeShortcut.deferredNode.highlight();
                this.nodeShortcut.deferredNode.resolve(resolved.bind(this));
                function resolved(node) {
                    if (node && _instanceof(this.treeOutline, ElementsTreeOutline)) {
                        this.treeOutline.selectedDOMNodeInternal = node;
                        this.treeOutline.selectedNodeChanged(false);
                    }
                }
                return true;
            }
        }
    ]);
    return ShortcutTreeElement;
} //# sourceMappingURL=ElementsTreeOutline.js.map
(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TreeOutline.TreeElement);


}),
"./panels/elements/ImagePreviewPopover.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ImagePreviewPopover: function() { return ImagePreviewPopover; }
});
/* harmony import */var _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ui/legacy/components/utils/utils.js */ "./ui/legacy/components/utils/utils.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


/**
 * ImagePreviewPopover sets listeners on the container element to display
 * an image preview if needed. The image URL comes from the event (mouseover) target
 * in a propery identified by HrefSymbol. To enable preview for any child element
 * set the property HrefSymbol.
 */ var ImagePreviewPopover = /*#__PURE__*/ function() {
    "use strict";
    function ImagePreviewPopover(container, getLinkElement, getDOMNode) {
        _class_call_check(this, ImagePreviewPopover);
        _define_property(this, "getLinkElement", void 0);
        _define_property(this, "getDOMNode", void 0);
        _define_property(this, "popover", void 0);
        this.getLinkElement = getLinkElement;
        this.getDOMNode = getDOMNode;
        this.popover = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_1__.PopoverHelper.PopoverHelper(container, this.handleRequest.bind(this), 'elements.image-preview');
        this.popover.setHasPadding(true);
        this.popover.setTimeout(0, 100);
    }
    _create_class(ImagePreviewPopover, [
        {
            key: "handleRequest",
            value: function handleRequest(event) {
                var link = this.getLinkElement(event);
                if (!link) {
                    return null;
                }
                var href = elementToURLMap.get(link);
                if (!href) {
                    return null;
                }
                var _this = this;
                return {
                    box: link.boxInWindow(),
                    hide: undefined,
                    show: function() {
                        var _ref = _async_to_generator(function(popover) {
                            var node, precomputedFeatures, preview;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        node = _this.getDOMNode(link);
                                        if (!node) {
                                            return [
                                                2,
                                                false
                                            ];
                                        }
                                        return [
                                            4,
                                            _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImagePreview.ImagePreview.loadDimensionsForNode(node)
                                        ];
                                    case 1:
                                        precomputedFeatures = _state.sent();
                                        return [
                                            4,
                                            _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImagePreview.ImagePreview.build(node.domModel().target(), href, true, {
                                                imageAltText: undefined,
                                                precomputedFeatures: precomputedFeatures
                                            })
                                        ];
                                    case 2:
                                        preview = _state.sent();
                                        if (preview) {
                                            popover.contentElement.appendChild(preview);
                                        }
                                        return [
                                            2,
                                            Boolean(preview)
                                        ];
                                }
                            });
                        });
                        return function(popover) {
                            return _ref.apply(this, arguments);
                        };
                    }()
                };
            }
        },
        {
            key: "hide",
            value: function hide() {
                this.popover.hidePopover();
            }
        }
    ], [
        {
            key: "setImageUrl",
            value: function setImageUrl(element, url) {
                elementToURLMap.set(element, url);
                return element;
            }
        },
        {
            key: "getImageURL",
            value: function getImageURL(element) {
                return elementToURLMap.get(element);
            }
        }
    ]);
    return ImagePreviewPopover;
}();
var elementToURLMap = new WeakMap(); //# sourceMappingURL=ImagePreviewPopover.js.map


}),
"./panels/elements/LayersWidget.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ButtonProvider: function() { return ButtonProvider; },
  LayersWidget: function() { return LayersWidget; }
});
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui/components/tree_outline/tree_outline.js */ "./ui/components/tree_outline/tree_outline.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
/* harmony import */var _layersWidget_css_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layersWidget.css.js */ "./panels/elements/layersWidget.css.js");
// Copyright (c) 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var UIStrings = {
    /**
     * @description Title of a section in the Element State Pane Widget of the Elements panel.
     * The widget shows the layers present in the context of the currently selected node.
     * */ cssLayersTitle: 'CSS layers',
    /**
     * @description Tooltip text in Element State Pane Widget of the Elements panel.
     * For a button that opens a tool that shows the layers present in the current document.
     */ toggleCSSLayers: 'Toggle CSS Layers view'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_0__.i18n.registerUIStrings('panels/elements/LayersWidget.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_0__.i18n.getLocalizedString.bind(undefined, str_);
var layersWidgetInstance;
var LayersWidget = /*#__PURE__*/ function(_UI_Widget_Widget) {
    "use strict";
    _inherits(LayersWidget, _UI_Widget_Widget);
    var _super = _create_super(LayersWidget);
    function LayersWidget() {
        _class_call_check(this, LayersWidget);
        var _this;
        _this = _super.call(this, true);
        _define_property(_assert_this_initialized(_this), "cssModel", void 0);
        _define_property(_assert_this_initialized(_this), "layerTreeComponent", new _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_2__.TreeOutline.TreeOutline());
        _this.contentElement.className = 'styles-layers-pane';
        _this.contentElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_4__.pane('css-layers')));
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.UIUtils.createTextChild(_this.contentElement.createChild('div'), i18nString(UIStrings.cssLayersTitle));
        _this.contentElement.appendChild(_this.layerTreeComponent);
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Context.Context.instance().addFlavorChangeListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.DOMModel.DOMNode, _this.update, _assert_this_initialized(_this));
        return _this;
    }
    _create_class(LayersWidget, [
        {
            key: "updateModel",
            value: function updateModel(cssModel) {
                if (this.cssModel === cssModel) {
                    return;
                }
                if (this.cssModel) {
                    this.cssModel.removeEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.CSSModel.Events.StyleSheetChanged, this.update, this);
                }
                this.cssModel = cssModel;
                if (this.cssModel) {
                    this.cssModel.addEventListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.CSSModel.Events.StyleSheetChanged, this.update, this);
                }
            }
        },
        {
            key: "wasShown",
            value: function wasShown() {
                var _this = this;
                var _this1 = this, _superprop_get_wasShown = function() {
                    return _get(_get_prototype_of(LayersWidget.prototype), "wasShown", _this);
                };
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        _superprop_get_wasShown().call(_this1);
                        _this1.registerCSSFiles([
                            _layersWidget_css_js__WEBPACK_IMPORTED_MODULE_6__["default"]
                        ]);
                        return [
                            2,
                            _this1.update()
                        ];
                    });
                })();
            }
        },
        {
            key: "update",
            value: function update() {
                var _this = this;
                return _async_to_generator(function() {
                    var node, makeTreeNode, rootLayer;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.isShowing()) {
                                    return [
                                        2
                                    ];
                                }
                                node = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Context.Context.instance().flavor(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.DOMModel.DOMNode);
                                if (node) {
                                    node = node.enclosingElementOrSelf();
                                }
                                if (!node) {
                                    // do something meaningful?
                                    return [
                                        2
                                    ];
                                }
                                _this.updateModel(node.domModel().cssModel());
                                if (!_this.cssModel) {
                                    return [
                                        2
                                    ];
                                }
                                makeTreeNode = function(parentId) {
                                    return function(layer) {
                                        var subLayers = layer.subLayers;
                                        var name = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_1__.CSSModel.CSSModel.readableLayerName(layer.name);
                                        var treeNodeData = layer.order + ': ' + name;
                                        var id = parentId ? parentId + '.' + name : name;
                                        if (!subLayers) {
                                            return {
                                                treeNodeData: treeNodeData,
                                                id: id
                                            };
                                        }
                                        return {
                                            treeNodeData: treeNodeData,
                                            id: id,
                                            children: function() {
                                                return Promise.resolve(subLayers.sort(function(layer1, layer2) {
                                                    return layer1.order - layer2.order;
                                                }).map(makeTreeNode(id)));
                                            }
                                        };
                                    };
                                };
                                return [
                                    4,
                                    _this.cssModel.getRootLayer(node.id)
                                ];
                            case 1:
                                rootLayer = _state.sent();
                                _this.layerTreeComponent.data = {
                                    defaultRenderer: _ui_components_tree_outline_tree_outline_js__WEBPACK_IMPORTED_MODULE_2__.TreeOutline.defaultRenderer,
                                    tree: [
                                        makeTreeNode('')(rootLayer)
                                    ]
                                };
                                // We only expand the first 5 user-defined layers to not make the
                                // view too overwhelming.
                                return [
                                    4,
                                    _this.layerTreeComponent.expandRecursively(5)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "revealLayer",
            value: function revealLayer(layerName) {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.isShowing()) {
                                    _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_5__.ElementsPanel.instance().showToolbarPane(_this, ButtonProvider.instance().item());
                                }
                                return [
                                    4,
                                    _this.update()
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2,
                                    _this.layerTreeComponent.expandToAndSelectTreeNodeId('implicit outer layer.' + layerName)
                                ];
                        }
                    });
                })();
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!layersWidgetInstance || forceNew) {
                    layersWidgetInstance = new LayersWidget();
                }
                return layersWidgetInstance;
            }
        }
    ]);
    return LayersWidget;
}(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Widget.Widget);
var buttonProviderInstance;
var ButtonProvider = /*#__PURE__*/ function() {
    "use strict";
    function ButtonProvider() {
        _class_call_check(this, ButtonProvider);
        _define_property(this, "button", void 0);
        this.button = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_3__.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleCSSLayers), 'layers', 'layers-filled');
        this.button.setVisible(false);
        this.button.addEventListener("Click" /* UI.Toolbar.ToolbarButton.Events.Click */ , this.clicked, this);
        this.button.element.classList.add('monospace');
        this.button.element.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_4__.toggleSubpane('css-layers').track({
            click: true
        })));
    }
    _create_class(ButtonProvider, [
        {
            key: "clicked",
            value: function clicked() {
                var view = LayersWidget.instance();
                _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_5__.ElementsPanel.instance().showToolbarPane(!view.isShowing() ? view : null, this.button);
            }
        },
        {
            key: "item",
            value: function item() {
                return this.button;
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!buttonProviderInstance || forceNew) {
                    buttonProviderInstance = new ButtonProvider();
                }
                return buttonProviderInstance;
            }
        }
    ]);
    return ButtonProvider;
} //# sourceMappingURL=LayersWidget.js.map
();


}),
"./panels/elements/MarkerDecorator.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GenericDecorator: function() { return GenericDecorator; },
  getRegisteredDecorators: function() { return getRegisteredDecorators; }
});
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}


var UIStrings = {
    /**
     *@description Title of the Marker Decorator of Elements
     */ domBreakpoint: 'DOM Breakpoint',
    /**
     *@description Title of the Marker Decorator of Elements
     */ elementIsHidden: 'Element is hidden'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_0__.i18n.registerUIStrings('panels/elements/MarkerDecorator.ts', UIStrings);
var i18nLazyString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_0__.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);
var GenericDecorator = /*#__PURE__*/ function() {
    "use strict";
    function GenericDecorator(extension) {
        _class_call_check(this, GenericDecorator);
        _define_property(this, "title", void 0);
        _define_property(this, "color", void 0);
        if (!extension.title || !extension.color) {
            throw new Error("Generic decorator requires a color and a title: ".concat(extension.marker));
        }
        this.title = extension.title();
        this.color = extension.color;
    }
    _create_class(GenericDecorator, [
        {
            key: "decorate",
            value: function decorate(_node) {
                return {
                    title: this.title,
                    color: this.color
                };
            }
        }
    ]);
    return GenericDecorator;
}();
var domBreakpointData = {
    marker: 'breakpoint-marker',
    title: i18nLazyString(UIStrings.domBreakpoint),
    color: 'var(--sys-color-primary-bright)'
};
var elementIsHiddenData = {
    marker: 'hidden-marker',
    title: i18nLazyString(UIStrings.elementIsHidden),
    color: 'var(--sys-color-neutral-bright)'
};
function getRegisteredDecorators() {
    return [
        _object_spread_props(_object_spread({}, domBreakpointData), {
            decorator: function() {
                return new GenericDecorator(domBreakpointData);
            }
        }),
        _object_spread_props(_object_spread({}, elementIsHiddenData), {
            decorator: function() {
                return new GenericDecorator(elementIsHiddenData);
            }
        }),
        {
            decorator: _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_1__.PseudoStateMarkerDecorator.instance,
            marker: 'pseudo-state-marker',
            title: undefined,
            color: undefined
        }
    ];
} //# sourceMappingURL=MarkerDecorator.js.map


}),
"./panels/elements/PropertyRenderer.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Renderer: function() { return Renderer; },
  RenderingContext: function() { return RenderingContext; },
  StringRenderer: function() { return StringRenderer; },
  URLRenderer: function() { return URLRenderer; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/legacy/components/utils/utils.js */ "./ui/legacy/components/utils/utils.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ImagePreviewPopover.js */ "./panels/elements/ImagePreviewPopover.js");
/* harmony import */var _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PropertyMatchers.js */ "./panels/elements/PropertyMatchers.js");
/* harmony import */var _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./StylesSidebarPane.js */ "./panels/elements/StylesSidebarPane.js");
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}









var UIStrings = {
    /**
     *@description Text that is announced by the screen reader when the user focuses on an input field for entering the name of a CSS property in the Styles panel
     *@example {margin} PH1
     */ cssPropertyName: '`CSS` property name: {PH1}',
    /**
     *@description Text that is announced by the screen reader when the user focuses on an input field for entering the value of a CSS property in the Styles panel
     *@example {10px} PH1
     */ cssPropertyValue: '`CSS` property value: {PH1}'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/elements/PropertyRenderer.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
function mergeWithSpacing(nodes, merge) {
    var _result;
    var result = _to_consumable_array(nodes);
    if (_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.requiresSpace(nodes, merge)) {
        result.push(document.createTextNode(' '));
    }
    (_result = result).push.apply(_result, _to_consumable_array(merge));
    return result;
}
var RenderingContext = /*#__PURE__*/ function() {
    "use strict";
    function RenderingContext(ast, renderers, matchedResult, cssControls) {
        var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
            readonly: false
        };
        _class_call_check(this, RenderingContext);
        _define_property(this, "ast", void 0);
        _define_property(this, "renderers", void 0);
        _define_property(this, "matchedResult", void 0);
        _define_property(this, "cssControls", void 0);
        _define_property(this, "options", void 0);
        this.ast = ast;
        this.renderers = renderers;
        this.matchedResult = matchedResult;
        this.cssControls = cssControls;
        this.options = options;
    }
    _create_class(RenderingContext, [
        {
            key: "addControl",
            value: function addControl(cssType, control) {
                if (this.cssControls) {
                    var controls = this.cssControls.get(cssType);
                    if (!controls) {
                        this.cssControls.set(cssType, [
                            control
                        ]);
                    } else {
                        controls.push(control);
                    }
                }
            }
        }
    ]);
    return RenderingContext;
}();
var _matchedResult = /*#__PURE__*/ new WeakMap(), _output = /*#__PURE__*/ new WeakMap(), _context = /*#__PURE__*/ new WeakMap();
var Renderer = /*#__PURE__*/ function(_SDK_CSSPropertyParser_TreeWalker) {
    "use strict";
    _inherits(Renderer, _SDK_CSSPropertyParser_TreeWalker);
    var _super = _create_super(Renderer);
    function Renderer(ast, renderers, matchedResult, cssControls, options) {
        _class_call_check(this, Renderer);
        var _this;
        _this = _super.call(this, ast);
        _class_private_field_init(_assert_this_initialized(_this), _matchedResult, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _output, {
            writable: true,
            value: []
        });
        _class_private_field_init(_assert_this_initialized(_this), _context, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(_assert_this_initialized(_this), _matchedResult, matchedResult);
        _class_private_field_set(_assert_this_initialized(_this), _context, new RenderingContext(_this.ast, renderers, _class_private_field_get(_assert_this_initialized(_this), _matchedResult), cssControls, options));
        return _this;
    }
    _create_class(Renderer, [
        {
            key: "renderedMatchForTest",
            value: function renderedMatchForTest(_nodes, _match) {}
        },
        {
            key: "enter",
            value: function enter(param) {
                var node = param.node;
                var match = _class_private_field_get(this, _matchedResult).getMatch(node);
                var renderer = match && _class_private_field_get(this, _context).renderers.get(match.constructor);
                if (renderer || _instanceof(match, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.TextMatch)) {
                    var output = renderer ? renderer.render(match, _class_private_field_get(this, _context)) : match.render();
                    this.renderedMatchForTest(output, match);
                    _class_private_field_set(this, _output, mergeWithSpacing(_class_private_field_get(this, _output), output));
                    return false;
                }
                return true;
            }
        }
    ], [
        {
            key: "render",
            value: function render(nodeOrNodes, context) {
                var _this = this;
                if (!Array.isArray(nodeOrNodes)) {
                    return this.render([
                        nodeOrNodes
                    ], context);
                }
                var cssControls = new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.CSSControlMap();
                var renderers = nodeOrNodes.map(function(node) {
                    return _this.walkExcludingSuccessors(context.ast.subtree(node), context.renderers, context.matchedResult, cssControls, context.options);
                });
                var nodes = renderers.map(function(node) {
                    return _class_private_field_get(node, _output);
                }).reduce(mergeWithSpacing);
                return {
                    nodes: nodes,
                    cssControls: cssControls
                };
            }
        },
        {
            key: "renderInto",
            value: function renderInto(nodeOrNodes, context, parent) {
                var _this_render = this.render(nodeOrNodes, context), nodes = _this_render.nodes, cssControls = _this_render.cssControls;
                if (parent.lastChild && _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.requiresSpace([
                    parent.lastChild
                ], nodes)) {
                    parent.appendChild(document.createTextNode(' '));
                }
                nodes.map(function(n) {
                    return parent.appendChild(n);
                });
                return {
                    nodes: nodes,
                    cssControls: cssControls
                };
            }
        },
        {
            key: "renderNameElement",
            value: function renderNameElement(name) {
                var nameElement = document.createElement('span');
                nameElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_5__.key().track({
                    change: true,
                    keydown: 'ArrowLeft|ArrowUp|PageUp|Home|PageDown|ArrowRight|ArrowDown|End|Space|Tab|Enter|Escape'
                })));
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__.ARIAUtils.setLabel(nameElement, i18nString(UIStrings.cssPropertyName, {
                    PH1: name
                }));
                nameElement.className = 'webkit-css-property';
                nameElement.textContent = name;
                nameElement.normalize();
                return nameElement;
            }
        },
        {
            key: "renderValueElement",
            value: // This function renders a property value as HTML, customizing the presentation with a set of given AST matchers. This
            // comprises the following steps:
            // 1. Build an AST of the property.
            // 2. Apply tree matchers during bottom up traversal.
            // 3. Render the value from left to right into HTML, deferring rendering of matched subtrees to the matchers
            //
            // More general, longer matches take precedence over shorter, more specific matches. Whitespaces are normalized, for
            // unmatched text and around rendered matching results.
            function renderValueElement(propertyName, propertyValue, renderers) {
                var valueElement = document.createElement('span');
                valueElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_5__.value().track({
                    change: true,
                    keydown: 'ArrowLeft|ArrowUp|PageUp|Home|PageDown|ArrowRight|ArrowDown|End|Space|Tab|Enter|Escape'
                })));
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__.ARIAUtils.setLabel(valueElement, i18nString(UIStrings.cssPropertyValue, {
                    PH1: propertyValue
                }));
                valueElement.className = 'value';
                var ast = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.tokenizeDeclaration(propertyName, propertyValue);
                if (!ast) {
                    valueElement.appendChild(document.createTextNode(propertyValue));
                    return valueElement;
                }
                var matchers = [];
                var rendererMap = new Map();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = renderers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var renderer = _step.value;
                        var matcher = renderer.matcher();
                        matchers.push(matcher);
                        rendererMap.set(matcher.matchType, renderer);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var matchedResult = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.BottomUpTreeMatching.walk(ast, matchers);
                ast.trailingNodes.forEach(function(n) {
                    return matchedResult.matchText(n);
                });
                var context = new RenderingContext(ast, rendererMap, matchedResult);
                Renderer.render([
                    ast.tree
                ].concat(_to_consumable_array(ast.trailingNodes)), context).nodes.forEach(function(node) {
                    return valueElement.appendChild(node);
                });
                valueElement.normalize();
                return valueElement;
            }
        }
    ]);
    return Renderer;
}(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.CSSPropertyParser.TreeWalker);
var URLRenderer = /*#__PURE__*/ function() {
    "use strict";
    function URLRenderer(rule, node) {
        _class_call_check(this, URLRenderer);
        _define_property(this, "rule", void 0);
        _define_property(this, "node", void 0);
        this.rule = rule;
        this.node = node;
    }
    _create_class(URLRenderer, [
        {
            key: "render",
            value: function render(match) {
                var url = (0,_StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_8__.unescapeCssString)(match.url);
                var container = document.createDocumentFragment();
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__.UIUtils.createTextChild(container, 'url(');
                var hrefUrl = null;
                if (this.rule && this.rule.resourceURL()) {
                    hrefUrl = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.ParsedURL.ParsedURL.completeURL(this.rule.resourceURL(), url);
                } else if (this.node) {
                    hrefUrl = this.node.resolveURL(url);
                }
                var link = _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_6__.ImagePreviewPopover.setImageUrl(_ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.Linkifier.Linkifier.linkifyURL(hrefUrl || url, {
                    text: url,
                    preventClick: false,
                    // crbug.com/1027168
                    // We rely on CSS text-overflow: ellipsis to hide long URLs in the Style panel,
                    // so that we don't have to keep two versions (original vs. trimmed) of URL
                    // at the same time, which complicates both StylesSidebarPane and StylePropertyTreeElement.
                    bypassURLTrimming: true,
                    showColumnNumber: false,
                    inlineFrameIndex: 0
                }), hrefUrl || url);
                container.appendChild(link);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__.UIUtils.createTextChild(container, ')');
                return [
                    container
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_7__.URLMatcher();
            }
        }
    ]);
    return URLRenderer;
}();
var StringRenderer = /*#__PURE__*/ function() {
    "use strict";
    function StringRenderer() {
        _class_call_check(this, StringRenderer);
    }
    _create_class(StringRenderer, [
        {
            key: "render",
            value: function render(match) {
                var element = document.createElement('span');
                element.innerText = match.text;
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__.Tooltip.Tooltip.install(element, (0,_StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_8__.unescapeCssString)(match.text));
                return [
                    element
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_7__.StringMatcher();
            }
        }
    ]);
    return StringRenderer;
} //# sourceMappingURL=PropertyRenderer.js.map
();


}),
"./panels/elements/StyleEditorWidget.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StyleEditorWidget: function() { return StyleEditorWidget; }
});
/* harmony import */var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StylePropertyTreeElement.js */ "./panels/elements/StylePropertyTreeElement.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var instance = null;
var _triggerKey = /*#__PURE__*/ new WeakMap();
/**
 * Thin UI.Widget wrapper around style editors to allow using it as a popover.
 */ var StyleEditorWidget = /*#__PURE__*/ function(_UI_Widget_VBox) {
    "use strict";
    _inherits(StyleEditorWidget, _UI_Widget_VBox);
    var _super = _create_super(StyleEditorWidget);
    function StyleEditorWidget() {
        _class_call_check(this, StyleEditorWidget);
        var _this;
        _this = _super.call(this, true);
        _define_property(_assert_this_initialized(_this), "editor", void 0);
        _define_property(_assert_this_initialized(_this), "pane", void 0);
        _define_property(_assert_this_initialized(_this), "section", void 0);
        _define_property(_assert_this_initialized(_this), "editorContainer", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _triggerKey, {
            writable: true,
            value: void 0
        });
        _this.contentElement.tabIndex = 0;
        _this.setDefaultFocusedElement(_this.contentElement);
        _this.editorContainer = document.createElement('div');
        _this.contentElement.appendChild(_this.editorContainer);
        _this.onPropertySelected = _this.onPropertySelected.bind(_assert_this_initialized(_this));
        _this.onPropertyDeselected = _this.onPropertyDeselected.bind(_assert_this_initialized(_this));
        return _this;
    }
    _create_class(StyleEditorWidget, [
        {
            key: "getSection",
            value: function getSection() {
                return this.section;
            }
        },
        {
            key: "onPropertySelected",
            value: function onPropertySelected(event) {
                var _this = this;
                return _async_to_generator(function() {
                    var target;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.section) {
                                    return [
                                        2
                                    ];
                                }
                                target = ensureTreeElementForProperty(_this.section, event.data.name);
                                target.property.value = event.data.value;
                                target.updateTitle();
                                return [
                                    4,
                                    target.applyStyleText(target.renderedPropertyText(), false)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    4,
                                    _this.render()
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "onPropertyDeselected",
            value: function onPropertyDeselected(event) {
                var _this = this;
                return _async_to_generator(function() {
                    var target;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.section) {
                                    return [
                                        2
                                    ];
                                }
                                target = ensureTreeElementForProperty(_this.section, event.data.name);
                                return [
                                    4,
                                    target.applyStyleText('', false)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    4,
                                    _this.render()
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "bindContext",
            value: function bindContext(pane, section) {
                var _this_editor, _this_editor1;
                this.pane = pane;
                this.section = section;
                (_this_editor = this.editor) === null || _this_editor === void 0 ? void 0 : _this_editor.addEventListener('propertyselected', this.onPropertySelected);
                (_this_editor1 = this.editor) === null || _this_editor1 === void 0 ? void 0 : _this_editor1.addEventListener('propertydeselected', this.onPropertyDeselected);
            }
        },
        {
            key: "setTriggerKey",
            value: function setTriggerKey(value) {
                _class_private_field_set(this, _triggerKey, value);
            }
        },
        {
            key: "getTriggerKey",
            value: function getTriggerKey() {
                return _class_private_field_get(this, _triggerKey);
            }
        },
        {
            key: "unbindContext",
            value: function unbindContext() {
                var _this_editor, _this_editor1;
                this.pane = undefined;
                this.section = undefined;
                (_this_editor = this.editor) === null || _this_editor === void 0 ? void 0 : _this_editor.removeEventListener('propertyselected', this.onPropertySelected);
                (_this_editor1 = this.editor) === null || _this_editor1 === void 0 ? void 0 : _this_editor1.removeEventListener('propertydeselected', this.onPropertyDeselected);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                return _async_to_generator(function() {
                    var _, _tmp, _tmp1;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.editor) {
                                    return [
                                        2
                                    ];
                                }
                                _ = _this.editor;
                                _tmp = {
                                    authoredProperties: _this.section ? getAuthoredStyles(_this.section, _this.editor.getEditableProperties()) : new Map()
                                };
                                if (!_this.pane) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    fetchComputedStyles(_this.pane)
                                ];
                            case 1:
                                _tmp1 = _state.sent();
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                _tmp1 = new Map();
                                _state.label = 3;
                            case 3:
                                _.data = (_tmp.computedProperties = _tmp1, _tmp);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "setEditor",
            value: function setEditor(editorClass) {
                if (!_instanceof(this.editor, editorClass)) {
                    this.contentElement.removeChildren();
                    this.editor = new editorClass();
                    this.contentElement.appendChild(this.editor);
                }
            }
        }
    ], [
        {
            key: "instance",
            value: function instance1() {
                if (!instance) {
                    instance = new StyleEditorWidget();
                }
                return instance;
            }
        },
        {
            key: "createTriggerButton",
            value: function createTriggerButton(pane, section, editorClass, buttonTitle, triggerKey) {
                var triggerButton = createButton(buttonTitle);
                triggerButton.onclick = function() {
                    var _ref = _async_to_generator(function(event) {
                        var popoverHelper, widget, scrollerElement, onScroll;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    event.stopPropagation();
                                    popoverHelper = pane.swatchPopoverHelper();
                                    widget = StyleEditorWidget.instance();
                                    widget.setEditor(editorClass);
                                    widget.bindContext(pane, section);
                                    widget.setTriggerKey(triggerKey);
                                    return [
                                        4,
                                        widget.render()
                                    ];
                                case 1:
                                    _state.sent();
                                    scrollerElement = triggerButton.enclosingNodeOrSelfWithClass('style-panes-wrapper');
                                    onScroll = function() {
                                        popoverHelper.hide(true);
                                    };
                                    popoverHelper.show(widget, triggerButton, function() {
                                        widget.unbindContext();
                                        if (scrollerElement) {
                                            scrollerElement.removeEventListener('scroll', onScroll);
                                        }
                                    });
                                    if (scrollerElement) {
                                        scrollerElement.addEventListener('scroll', onScroll);
                                    }
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                    return function(event) {
                        return _ref.apply(this, arguments);
                    };
                }();
                return triggerButton;
            }
        }
    ]);
    return StyleEditorWidget;
}(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_1__.Widget.VBox);
function createButton(buttonTitle) {
    var button = document.createElement('button');
    button.classList.add('styles-pane-button');
    button.tabIndex = 0;
    button.title = buttonTitle;
    button.onmouseup = function(event) {
        // Stop propagation to prevent the property editor from being activated.
        event.stopPropagation();
    };
    var icon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_0__.Icon.Icon();
    icon.data = {
        iconName: 'flex-wrap',
        color: 'var(--sys-color-token-subtle)',
        width: '16px',
        height: '16px'
    };
    button.appendChild(icon);
    return button;
}
function ensureTreeElementForProperty(section, propertyName) {
    var target = section.propertiesTreeOutline.rootElement().children().find(function(child) {
        return _instanceof(child, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_2__.StylePropertyTreeElement) && child.property.name === propertyName;
    });
    if (target) {
        return target;
    }
    var newTarget = section.addNewBlankProperty();
    newTarget.property.name = propertyName;
    return newTarget;
}
function fetchComputedStyles(pane) {
    return _fetchComputedStyles.apply(this, arguments);
}
function _fetchComputedStyles() {
    _fetchComputedStyles = _async_to_generator(function(pane) {
        var computedStyleModel, style;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    computedStyleModel = pane.computedStyleModel();
                    return [
                        4,
                        computedStyleModel.fetchComputedStyle()
                    ];
                case 1:
                    style = _state.sent();
                    return [
                        2,
                        style ? style.computedStyle : new Map()
                    ];
            }
        });
    });
    return _fetchComputedStyles.apply(this, arguments);
}
function getAuthoredStyles(section, editableProperties) {
    var authoredProperties = new Map();
    var editablePropertiesSet = new Set(editableProperties.map(function(prop) {
        return prop.propertyName;
    }));
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = section.style().leadingProperties()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var prop = _step.value;
            if (editablePropertiesSet.has(prop.name)) {
                authoredProperties.set(prop.name, prop.value);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return authoredProperties;
} //# sourceMappingURL=StyleEditorWidget.js.map


}),
"./panels/elements/StylePropertiesSection.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BlankStylePropertiesSection: function() { return BlankStylePropertiesSection; },
  FontPaletteValuesRuleSection: function() { return FontPaletteValuesRuleSection; },
  HighlightPseudoStylePropertiesSection: function() { return HighlightPseudoStylePropertiesSection; },
  KeyframePropertiesSection: function() { return KeyframePropertiesSection; },
  PositionTryRuleSection: function() { return PositionTryRuleSection; },
  RegisteredPropertiesSection: function() { return RegisteredPropertiesSection; },
  StylePropertiesSection: function() { return StylePropertiesSection; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/host/host.js */ "./core/host/host.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */var _core_root_root_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/root/root.js */ "./core/root/root.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../models/bindings/bindings.js */ "./models/bindings/bindings.js");
/* harmony import */var _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../models/text_utils/text_utils.js */ "./models/text_utils/text_utils.js");
/* harmony import */var _ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/components/buttons/buttons.js */ "./ui/components/buttons/buttons.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ColorSwatchPopoverIcon.js */ "./panels/elements/ColorSwatchPopoverIcon.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _DOMLinkifier_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DOMLinkifier.js */ "./panels/elements/DOMLinkifier.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
/* harmony import */var _stylePropertiesTreeOutline_css_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./stylePropertiesTreeOutline.css.js */ "./panels/elements/stylePropertiesTreeOutline.css.js");
/* harmony import */var _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./StylePropertyTreeElement.js */ "./panels/elements/StylePropertyTreeElement.js");
/* harmony import */var _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./StylesSidebarPane.js */ "./panels/elements/StylesSidebarPane.js");
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*
 * Copyright (C) 2007 Apple Inc.  All rights reserved.
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_check_private_static_field_descriptor(descriptor, action) {
    if (descriptor === undefined) {
        throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _class_static_private_field_spec_get(receiver, classConstructor, descriptor) {
    _class_check_private_static_access(receiver, classConstructor);
    _class_check_private_static_field_descriptor(descriptor, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _class_check_private_static_access(receiver, classConstructor) {
    if (receiver !== classConstructor) {
        throw new TypeError("Private static access of wrong provenance");
    }
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


















var UIStrings = {
    /**
     *@description Tooltip text that appears when hovering over the largeicon add button in the Styles Sidebar Pane of the Elements panel
     */ insertStyleRuleBelow: 'Insert style rule below',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ constructedStylesheet: 'constructed stylesheet',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ userAgentStylesheet: 'user agent stylesheet',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ injectedStylesheet: 'injected stylesheet',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ viaInspector: 'via inspector',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ styleAttribute: '`style` attribute',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     *@example {html} PH1
     */ sattributesStyle: '{PH1}[Attributes Style]',
    /**
     *@description Show all button text content in Styles Sidebar Pane of the Elements panel
     *@example {3} PH1
     */ showAllPropertiesSMore: 'Show all properties ({PH1} more)',
    /**
     *@description Text in Elements Tree Element of the Elements panel, copy should be used as a verb
     */ copySelector: 'Copy `selector`',
    /**
     *@description A context menu item in Styles panel to copy CSS rule
     */ copyRule: 'Copy rule',
    /**
     *@description A context menu item in Styles panel to copy all CSS declarations
     */ copyAllDeclarations: 'Copy all declarations',
    /**
     *@description  A context menu item in Styles panel to copy all the CSS changes
     */ copyAllCSSChanges: 'Copy all CSS changes',
    /**
     *@description Text that is announced by the screen reader when the user focuses on an input field for editing the name of a CSS selector in the Styles panel
     */ cssSelector: '`CSS` selector'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.registerUIStrings('panels/elements/StylePropertiesSection.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.getLocalizedString.bind(undefined, str_);
var STYLE_TAG = '<style>';
var DEFAULT_MAX_PROPERTIES = 50;
var _styleRuleElement = /*#__PURE__*/ new WeakMap(), _ancestorRuleListElement = /*#__PURE__*/ new WeakMap(), _ancestorClosingBracesElement = /*#__PURE__*/ new WeakMap(), _customHeaderText = /*#__PURE__*/ new WeakMap();
var StylePropertiesSection = /*#__PURE__*/ function() {
    "use strict";
    function StylePropertiesSection(parentPane, matchedStyles, style, sectionIdx, computedStyles, parentsComputedStyles, customHeaderText) {
        var _this = this;
        _class_call_check(this, StylePropertiesSection);
        _define_property(this, "parentPane", void 0);
        _define_property(this, "styleInternal", void 0);
        _define_property(this, "matchedStyles", void 0);
        _define_property(this, "computedStyles", void 0);
        _define_property(this, "parentsComputedStyles", void 0);
        _define_property(this, "editable", void 0);
        _define_property(this, "hoverTimer", void 0);
        _define_property(this, "willCauseCancelEditing", void 0);
        _define_property(this, "forceShowAll", void 0);
        _define_property(this, "originalPropertiesCount", void 0);
        _define_property(this, "element", void 0);
        _class_private_field_init(this, _styleRuleElement, {
            writable: true,
            value: void 0
        });
        _define_property(this, "titleElement", void 0);
        _define_property(this, "propertiesTreeOutline", void 0);
        _define_property(this, "showAllButton", void 0);
        _define_property(this, "selectorElement", void 0);
        _define_property(this, "newStyleRuleToolbar", void 0);
        _define_property(this, "fontEditorToolbar", void 0);
        _define_property(this, "fontEditorSectionManager", void 0);
        _define_property(this, "fontEditorButton", void 0);
        _define_property(this, "selectedSinceMouseDown", void 0);
        _define_property(this, "elementToSelectorIndex", void 0);
        _define_property(this, "navigable", void 0);
        _define_property(this, "selectorRefElement", void 0);
        _define_property(this, "hoverableSelectorsMode", void 0);
        _define_property(this, "isHiddenInternal", void 0);
        _define_property(this, "nestingLevel", 0);
        _class_private_field_init(this, _ancestorRuleListElement, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _ancestorClosingBracesElement, {
            writable: true,
            value: void 0
        });
        // Used to identify buttons that trigger a flexbox or grid editor.
        _define_property(this, "nextEditorTriggerButtonIdx", 1);
        _define_property(this, "sectionIdx", 0);
        _class_private_field_init(this, _customHeaderText, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _customHeaderText, customHeaderText);
        this.parentPane = parentPane;
        this.sectionIdx = sectionIdx;
        this.styleInternal = style;
        this.matchedStyles = matchedStyles;
        this.computedStyles = computedStyles;
        this.parentsComputedStyles = parentsComputedStyles;
        this.editable = Boolean(style.styleSheetId && style.range);
        this.hoverTimer = null;
        this.willCauseCancelEditing = false;
        this.forceShowAll = false;
        this.originalPropertiesCount = style.leadingProperties().length;
        var rule = style.parentRule;
        var headerText = this.headerText();
        this.element = document.createElement('div');
        this.element.classList.add('styles-section');
        this.element.classList.add('matched-styles');
        this.element.classList.add('monospace');
        this.element.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__.section('style-properties').track({
            keydown: 'ArrowUp|ArrowDown|ArrowLeft|ArrowRight|Enter|Space'
        })));
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.setLabel(this.element, "".concat(headerText, ", css selector"));
        this.element.tabIndex = -1;
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.markAsListitem(this.element);
        this.element.addEventListener('keydown', this.onKeyDown.bind(this), false);
        parentPane.sectionByElement.set(this.element, this);
        _class_private_field_set(this, _styleRuleElement, this.element.createChild('div', 'style-rule'));
        _class_private_field_set(this, _ancestorRuleListElement, document.createElement('div'));
        _class_private_field_get(this, _ancestorRuleListElement).classList.add('ancestor-rule-list');
        this.element.prepend(_class_private_field_get(this, _ancestorRuleListElement));
        _class_private_field_set(this, _ancestorClosingBracesElement, document.createElement('div'));
        _class_private_field_get(this, _ancestorClosingBracesElement).classList.add('ancestor-closing-braces');
        this.element.append(_class_private_field_get(this, _ancestorClosingBracesElement));
        this.updateAncestorRuleList();
        this.titleElement = _class_private_field_get(this, _styleRuleElement).createChild('div', 'styles-section-title ' + (rule ? 'styles-selector' : ''));
        this.propertiesTreeOutline = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TreeOutline.TreeOutlineInShadow();
        this.propertiesTreeOutline.setFocusable(false);
        this.propertiesTreeOutline.registerCSSFiles([
            _stylePropertiesTreeOutline_css_js__WEBPACK_IMPORTED_MODULE_15__["default"]
        ]);
        this.propertiesTreeOutline.element.classList.add('style-properties', 'matched-styles', 'monospace');
        _class_private_field_get(this, _styleRuleElement).appendChild(this.propertiesTreeOutline.element);
        this.showAllButton = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.createTextButton('', this.showAllItems.bind(this), {
            className: 'styles-show-all',
            jslogContext: 'elements.show-all-style-properties'
        });
        _class_private_field_get(this, _styleRuleElement).appendChild(this.showAllButton);
        var indent = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').get();
        var selectorContainer = document.createElement('div');
        selectorContainer.createChild('span', 'styles-clipboard-only').textContent = indent.repeat(this.nestingLevel);
        selectorContainer.classList.add('selector-container');
        this.selectorElement = document.createElement('span');
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.setLabel(this.selectorElement, i18nString(UIStrings.cssSelector));
        this.selectorElement.classList.add('selector');
        this.selectorElement.textContent = headerText;
        selectorContainer.appendChild(this.selectorElement);
        this.selectorElement.addEventListener('mouseenter', this.onMouseEnterSelector.bind(this), false);
        this.selectorElement.addEventListener('mouseleave', this.onMouseOutSelector.bind(this), false);
        // We only add braces for style rules with selectors and non-style rules, which create their own sections.
        if (headerText.length > 0 || !_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
            var openBrace = selectorContainer.createChild('span', 'sidebar-pane-open-brace');
            openBrace.textContent = headerText.length > 0 ? ' {' : '{'; // We don't add spacing when there is no selector.
            var closeBrace = _class_private_field_get(this, _styleRuleElement).createChild('div', 'sidebar-pane-closing-brace');
            closeBrace.createChild('span', 'styles-clipboard-only').textContent = indent.repeat(this.nestingLevel);
            closeBrace.createChild('span').textContent = '}';
        } else {
            this.titleElement.classList.add('hidden');
        }
        if (rule) {
            var newRuleButton = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Toolbar.ToolbarButton(i18nString(UIStrings.insertStyleRuleBelow), 'plus', undefined, 'elements.new-style-rule');
            newRuleButton.addEventListener("Click" /* UI.Toolbar.ToolbarButton.Events.Click */ , this.onNewRuleClick, this);
            newRuleButton.setSize("SMALL" /* Buttons.Button.Size.SMALL */ );
            newRuleButton.element.tabIndex = -1;
            if (!this.newStyleRuleToolbar) {
                this.newStyleRuleToolbar = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Toolbar.Toolbar('sidebar-pane-section-toolbar new-rule-toolbar', this.element);
            }
            this.newStyleRuleToolbar.appendToolbarItem(newRuleButton);
            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ARIAUtils.markAsHidden(this.newStyleRuleToolbar.element);
        }
        if (_core_root_root_js__WEBPACK_IMPORTED_MODULE_4__.Runtime.experiments.isEnabled('font-editor') && this.editable) {
            this.fontEditorToolbar = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Toolbar.Toolbar('sidebar-pane-section-toolbar', _class_private_field_get(this, _styleRuleElement));
            this.fontEditorSectionManager = new _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_11__.FontEditorSectionManager(this.parentPane.swatchPopoverHelper(), this);
            this.fontEditorButton = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.Toolbar.ToolbarButton('Font Editor', 'custom-typography', undefined, 'font-editor');
            this.fontEditorButton.addEventListener("Click" /* UI.Toolbar.ToolbarButton.Events.Click */ , function() {
                _this.onFontEditorButtonClicked();
            }, this);
            this.fontEditorButton.element.addEventListener('keydown', function(event) {
                if (_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.KeyboardUtilities.isEnterOrSpaceKey(event)) {
                    event.consume(true);
                    _this.onFontEditorButtonClicked();
                }
            }, false);
            this.fontEditorToolbar.appendToolbarItem(this.fontEditorButton);
            if (this.styleInternal.type === _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSStyleDeclaration.Type.Inline) {
                if (this.newStyleRuleToolbar) {
                    this.newStyleRuleToolbar.element.classList.add('shifted-toolbar');
                }
            } else {
                this.fontEditorToolbar.element.classList.add('font-toolbar-hidden');
            }
        }
        this.selectorElement.addEventListener('click', this.handleSelectorClick.bind(this), false);
        this.selectorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_10__.cssRuleHeader('selector').track({
            click: true,
            change: true
        })));
        this.element.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);
        this.element.addEventListener('mousedown', this.handleEmptySpaceMouseDown.bind(this), false);
        this.element.addEventListener('click', this.handleEmptySpaceClick.bind(this), false);
        this.element.addEventListener('mousemove', this.onMouseMove.bind(this), false);
        this.element.addEventListener('mouseleave', this.onMouseLeave.bind(this), false);
        this.selectedSinceMouseDown = false;
        this.elementToSelectorIndex = new WeakMap();
        if (rule) {
            // Prevent editing the user agent and user rules.
            if (rule.isUserAgent() || rule.isInjected()) {
                this.editable = false;
            } else {
                // Check this is a real CSSRule, not a bogus object coming from BlankStylePropertiesSection.
                if (rule.styleSheetId) {
                    var header = rule.cssModel().styleSheetHeaderForId(rule.styleSheetId);
                    this.navigable = header && !header.isAnonymousInlineStyleSheet();
                }
            }
        }
        this.selectorRefElement = document.createElement('div');
        this.selectorRefElement.classList.add('styles-section-subtitle');
        this.element.prepend(this.selectorRefElement);
        this.updateRuleOrigin();
        this.titleElement.appendChild(selectorContainer);
        if (this.navigable) {
            this.element.classList.add('navigable');
        }
        if (!this.editable) {
            this.element.classList.add('read-only');
            this.propertiesTreeOutline.element.classList.add('read-only');
        }
        this.hoverableSelectorsMode = false;
        this.isHiddenInternal = false;
        this.markSelectorMatches();
        this.onpopulate();
    }
    _create_class(StylePropertiesSection, [
        {
            key: "setComputedStyles",
            value: function setComputedStyles(computedStyles) {
                this.computedStyles = computedStyles;
            }
        },
        {
            key: "setParentsComputedStyles",
            value: function setParentsComputedStyles(parentsComputedStyles) {
                this.parentsComputedStyles = parentsComputedStyles;
            }
        },
        {
            key: "updateAuthoringHint",
            value: function updateAuthoringHint() {
                var child = this.propertiesTreeOutline.firstChild();
                while(child){
                    if (_instanceof(child, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement)) {
                        child.setComputedStyles(this.computedStyles);
                        child.setParentsComputedStyles(this.parentsComputedStyles);
                        child.updateAuthoringHint();
                    }
                    child = child.nextSibling;
                }
            }
        },
        {
            key: "setSectionIdx",
            value: function setSectionIdx(sectionIdx) {
                this.sectionIdx = sectionIdx;
                this.onpopulate();
            }
        },
        {
            key: "getSectionIdx",
            value: function getSectionIdx() {
                return this.sectionIdx;
            }
        },
        {
            key: "registerFontProperty",
            value: function registerFontProperty(treeElement) {
                if (this.fontEditorSectionManager) {
                    this.fontEditorSectionManager.registerFontProperty(treeElement);
                }
                if (this.fontEditorToolbar) {
                    this.fontEditorToolbar.element.classList.remove('font-toolbar-hidden');
                    if (this.newStyleRuleToolbar) {
                        this.newStyleRuleToolbar.element.classList.add('shifted-toolbar');
                    }
                }
            }
        },
        {
            key: "resetToolbars",
            value: function resetToolbars() {
                if (this.parentPane.swatchPopoverHelper().isShowing() || this.styleInternal.type === _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSStyleDeclaration.Type.Inline) {
                    return;
                }
                if (this.fontEditorToolbar) {
                    this.fontEditorToolbar.element.classList.add('font-toolbar-hidden');
                }
                if (this.newStyleRuleToolbar) {
                    this.newStyleRuleToolbar.element.classList.remove('shifted-toolbar');
                }
            }
        },
        {
            key: "createRuleOriginNode",
            value: function createRuleOriginNode(matchedStyles, linkifier, rule) {
                return StylePropertiesSection.createRuleOriginNode(matchedStyles, linkifier, rule);
            }
        },
        {
            key: "getFocused",
            value: function getFocused() {
                return this.propertiesTreeOutline.shadowRoot.activeElement || null;
            }
        },
        {
            key: "focusNext",
            value: function focusNext(element) {
                // Clear remembered focused item (if any).
                var focused = this.getFocused();
                if (focused) {
                    focused.tabIndex = -1;
                }
                // Focus the next item and remember it (if in our subtree).
                element.focus();
                if (this.propertiesTreeOutline.shadowRoot.contains(element)) {
                    element.tabIndex = 0;
                }
            }
        },
        {
            key: "ruleNavigation",
            value: function ruleNavigation(keyboardEvent) {
                if (keyboardEvent.altKey || keyboardEvent.ctrlKey || keyboardEvent.metaKey || keyboardEvent.shiftKey) {
                    return;
                }
                var focused = this.getFocused();
                var focusNext = null;
                var focusable = Array.from(this.propertiesTreeOutline.shadowRoot.querySelectorAll('[tabindex]'));
                if (focusable.length === 0) {
                    return;
                }
                var focusedIndex = focused ? focusable.indexOf(focused) : -1;
                if (keyboardEvent.key === 'ArrowLeft') {
                    focusNext = focusable[focusedIndex - 1] || this.element;
                } else if (keyboardEvent.key === 'ArrowRight') {
                    focusNext = focusable[focusedIndex + 1] || this.element;
                } else if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'ArrowDown') {
                    this.focusNext(this.element);
                    return;
                }
                if (focusNext) {
                    this.focusNext(focusNext);
                    keyboardEvent.consume(true);
                }
            }
        },
        {
            key: "onKeyDown",
            value: function onKeyDown(event) {
                var keyboardEvent = event;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isEditing() || !this.editable || keyboardEvent.altKey || keyboardEvent.ctrlKey || keyboardEvent.metaKey) {
                    return;
                }
                switch(keyboardEvent.key){
                    case 'Enter':
                    case ' ':
                        this.startEditingAtFirstPosition();
                        keyboardEvent.consume(true);
                        break;
                    case 'ArrowLeft':
                    case 'ArrowRight':
                    case 'ArrowUp':
                    case 'ArrowDown':
                        this.ruleNavigation(keyboardEvent);
                        break;
                    default:
                        // Filter out non-printable key strokes.
                        if (keyboardEvent.key.length === 1) {
                            this.addNewBlankProperty(0).startEditingName();
                        }
                        break;
                }
            }
        },
        {
            key: "setSectionHovered",
            value: function setSectionHovered(isHovered) {
                this.element.classList.toggle('styles-panel-hovered', isHovered);
                this.propertiesTreeOutline.element.classList.toggle('styles-panel-hovered', isHovered);
                if (this.hoverableSelectorsMode !== isHovered) {
                    this.hoverableSelectorsMode = isHovered;
                    this.markSelectorMatches();
                }
            }
        },
        {
            key: "onMouseLeave",
            value: function onMouseLeave(_event) {
                this.setSectionHovered(false);
                this.parentPane.setActiveProperty(null);
            }
        },
        {
            key: "onMouseMove",
            value: function onMouseMove(event) {
                var hasCtrlOrMeta = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(event);
                this.setSectionHovered(hasCtrlOrMeta);
                var treeElement = this.propertiesTreeOutline.treeElementFromEvent(event);
                if (_instanceof(treeElement, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement)) {
                    this.parentPane.setActiveProperty(treeElement);
                } else {
                    this.parentPane.setActiveProperty(null);
                }
                var selection = this.element.getComponentSelection();
                if (!this.selectedSinceMouseDown && selection && selection.toString()) {
                    this.selectedSinceMouseDown = true;
                }
            }
        },
        {
            key: "onFontEditorButtonClicked",
            value: function onFontEditorButtonClicked() {
                if (this.fontEditorSectionManager && this.fontEditorButton) {
                    void this.fontEditorSectionManager.showPopover(this.fontEditorButton.element, this.parentPane);
                }
            }
        },
        {
            key: "style",
            value: function style() {
                return this.styleInternal;
            }
        },
        {
            key: "headerText",
            value: function headerText() {
                if (_class_private_field_get(this, _customHeaderText)) {
                    return _class_private_field_get(this, _customHeaderText);
                }
                var node = this.matchedStyles.nodeForStyle(this.styleInternal);
                if (this.styleInternal.type === _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSStyleDeclaration.Type.Inline) {
                    return this.matchedStyles.isInherited(this.styleInternal) ? i18nString(UIStrings.styleAttribute) : 'element.style';
                }
                if (node && this.styleInternal.type === _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSStyleDeclaration.Type.Attributes) {
                    return i18nString(UIStrings.sattributesStyle, {
                        PH1: node.nodeNameInCorrectCase()
                    });
                }
                if (_instanceof(this.styleInternal.parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
                    return this.styleInternal.parentRule.selectorText();
                }
                return '';
            }
        },
        {
            key: "onMouseOutSelector",
            value: function onMouseOutSelector() {
                if (this.hoverTimer) {
                    clearTimeout(this.hoverTimer);
                }
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
            }
        },
        {
            key: "onMouseEnterSelector",
            value: function onMouseEnterSelector() {
                if (this.hoverTimer) {
                    clearTimeout(this.hoverTimer);
                }
                this.hoverTimer = window.setTimeout(this.highlight.bind(this), 300);
            }
        },
        {
            key: "highlight",
            value: function highlight() {
                var mode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'all';
                _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
                var node = this.parentPane.node();
                if (!node) {
                    return;
                }
                var selectorList = this.styleInternal.parentRule && _instanceof(this.styleInternal.parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule) ? this.styleInternal.parentRule.selectorText() : undefined;
                node.domModel().overlayModel().highlightInOverlay({
                    node: node,
                    selectorList: selectorList
                }, mode);
            }
        },
        {
            key: "firstSibling",
            value: function firstSibling() {
                var parent = this.element.parentElement;
                if (!parent) {
                    return null;
                }
                var childElement = parent.firstChild;
                while(childElement){
                    var childSection = this.parentPane.sectionByElement.get(childElement);
                    if (childSection) {
                        return childSection;
                    }
                    childElement = childElement.nextSibling;
                }
                return null;
            }
        },
        {
            key: "findCurrentOrNextVisible",
            value: function findCurrentOrNextVisible(willIterateForward, originalSection) {
                if (!this.isHidden()) {
                    return this;
                }
                if (this === originalSection) {
                    return null;
                }
                if (!originalSection) {
                    originalSection = this;
                }
                var visibleSibling = null;
                var nextSibling = willIterateForward ? this.nextSibling() : this.previousSibling();
                if (nextSibling) {
                    visibleSibling = nextSibling.findCurrentOrNextVisible(willIterateForward, originalSection);
                } else {
                    var loopSibling = willIterateForward ? this.firstSibling() : this.lastSibling();
                    if (loopSibling) {
                        visibleSibling = loopSibling.findCurrentOrNextVisible(willIterateForward, originalSection);
                    }
                }
                return visibleSibling;
            }
        },
        {
            key: "lastSibling",
            value: function lastSibling() {
                var parent = this.element.parentElement;
                if (!parent) {
                    return null;
                }
                var childElement = parent.lastChild;
                while(childElement){
                    var childSection = this.parentPane.sectionByElement.get(childElement);
                    if (childSection) {
                        return childSection;
                    }
                    childElement = childElement.previousSibling;
                }
                return null;
            }
        },
        {
            key: "nextSibling",
            value: function nextSibling() {
                var curElement = this.element;
                do {
                    curElement = curElement.nextSibling;
                }while (curElement && !this.parentPane.sectionByElement.has(curElement));
                if (curElement) {
                    return this.parentPane.sectionByElement.get(curElement);
                }
                return;
            }
        },
        {
            key: "previousSibling",
            value: function previousSibling() {
                var curElement = this.element;
                do {
                    curElement = curElement.previousSibling;
                }while (curElement && !this.parentPane.sectionByElement.has(curElement));
                if (curElement) {
                    return this.parentPane.sectionByElement.get(curElement);
                }
                return;
            }
        },
        {
            key: "onNewRuleClick",
            value: function onNewRuleClick(event) {
                event.data.consume();
                var rule = this.styleInternal.parentRule;
                if (!rule || !rule.style.range || rule.styleSheetId === undefined) {
                    return;
                }
                var range = _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__.TextRange.TextRange.createFromLocation(rule.style.range.endLine, rule.style.range.endColumn + 1);
                this.parentPane.addBlankSection(this, rule.styleSheetId, range);
            }
        },
        {
            key: "styleSheetEdited",
            value: function styleSheetEdited(edit) {
                var rule = this.styleInternal.parentRule;
                if (rule) {
                    rule.rebase(edit);
                } else {
                    this.styleInternal.rebase(edit);
                }
                this.updateAncestorRuleList();
                this.updateRuleOrigin();
            }
        },
        {
            key: "createAncestorRules",
            value: function createAncestorRules(rule) {
                var mediaIndex = 0;
                var containerIndex = 0;
                var scopeIndex = 0;
                var supportsIndex = 0;
                var nestingIndex = 0;
                this.nestingLevel = 0;
                var indent = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').get();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = rule.ruleTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var ruleType = _step.value;
                        var ancestorRuleElement = void 0;
                        switch(ruleType){
                            case "MediaRule" /* Protocol.CSS.CSSRuleType.MediaRule */ :
                                ancestorRuleElement = this.createMediaElement(rule.media[mediaIndex++]);
                                break;
                            case "ContainerRule" /* Protocol.CSS.CSSRuleType.ContainerRule */ :
                                ancestorRuleElement = this.createContainerQueryElement(rule.containerQueries[containerIndex++]);
                                break;
                            case "ScopeRule" /* Protocol.CSS.CSSRuleType.ScopeRule */ :
                                ancestorRuleElement = this.createScopeElement(rule.scopes[scopeIndex++]);
                                break;
                            case "SupportsRule" /* Protocol.CSS.CSSRuleType.SupportsRule */ :
                                ancestorRuleElement = this.createSupportsElement(rule.supports[supportsIndex++]);
                                break;
                            case "StyleRule" /* Protocol.CSS.CSSRuleType.StyleRule */ :
                                var _rule_nestingSelectors;
                                ancestorRuleElement = this.createNestingElement((_rule_nestingSelectors = rule.nestingSelectors) === null || _rule_nestingSelectors === void 0 ? void 0 : _rule_nestingSelectors[nestingIndex++]);
                                break;
                        }
                        if (ancestorRuleElement) {
                            _class_private_field_get(this, _ancestorRuleListElement).prepend(ancestorRuleElement);
                            var closingBrace = document.createElement('div');
                            closingBrace.createChild('span', 'styles-clipboard-only').textContent = indent.repeat(this.nestingLevel);
                            closingBrace.style.paddingLeft = "".concat(this.nestingLevel, "ch");
                            closingBrace.append('}');
                            _class_private_field_get(this, _ancestorClosingBracesElement).prepend(closingBrace);
                            this.nestingLevel++;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this.headerText().length === 0) {
                    // We reduce one level since no selector means one less pair of braces are added for declarations.
                    this.nestingLevel--;
                }
                var curNestingLevel = 0;
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = _class_private_field_get(this, _ancestorRuleListElement).children[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var element = _step1.value;
                        var indentElement = document.createElement('span');
                        indentElement.classList.add('styles-clipboard-only');
                        indentElement.setAttribute('slot', 'indent');
                        indentElement.textContent = indent.repeat(curNestingLevel);
                        element.prepend(indentElement);
                        element.style.paddingLeft = "".concat(curNestingLevel, "ch");
                        curNestingLevel++;
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
            }
        },
        {
            key: "createMediaElement",
            value: function createMediaElement(media) {
                // Don't display trivial non-print media types.
                var isMedia = !media.text || !media.text.includes('(') && media.text !== 'print';
                if (isMedia) {
                    return;
                }
                var queryPrefix = '';
                var queryText = '';
                var onQueryTextClick;
                switch(media.source){
                    case _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMedia.Source.LINKED_SHEET:
                    case _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMedia.Source.INLINE_SHEET:
                        {
                            queryText = 'media="'.concat(media.text, '"');
                            break;
                        }
                    case _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMedia.Source.MEDIA_RULE:
                        {
                            queryPrefix = '@media';
                            queryText = media.text;
                            if (media.styleSheetId) {
                                onQueryTextClick = this.handleQueryRuleClick.bind(this, media);
                            }
                            break;
                        }
                    case _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMedia.Source.IMPORT_RULE:
                        {
                            queryText = "@import ".concat(media.text);
                            break;
                        }
                }
                var mediaQueryElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_12__.CSSQuery.CSSQuery();
                mediaQueryElement.data = {
                    queryPrefix: queryPrefix,
                    queryText: queryText,
                    onQueryTextClick: onQueryTextClick,
                    jslogContext: 'media-query'
                };
                return mediaQueryElement;
            }
        },
        {
            key: "createContainerQueryElement",
            value: function createContainerQueryElement(containerQuery) {
                if (!containerQuery.text) {
                    return;
                }
                var onQueryTextClick;
                if (containerQuery.styleSheetId) {
                    onQueryTextClick = this.handleQueryRuleClick.bind(this, containerQuery);
                }
                var containerQueryElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_12__.CSSQuery.CSSQuery();
                containerQueryElement.data = {
                    queryPrefix: '@container',
                    queryName: containerQuery.name,
                    queryText: containerQuery.text,
                    onQueryTextClick: onQueryTextClick,
                    jslogContext: 'container-query'
                };
                if (!/^style\(.*\)/.test(containerQuery.text)) {
                    // We only add container element for non-style queries.
                    void this.addContainerForContainerQuery(containerQuery);
                }
                return containerQueryElement;
            }
        },
        {
            key: "createScopeElement",
            value: function createScopeElement(scope) {
                var onQueryTextClick;
                if (scope.styleSheetId) {
                    onQueryTextClick = this.handleQueryRuleClick.bind(this, scope);
                }
                var scopeElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_12__.CSSQuery.CSSQuery();
                scopeElement.data = {
                    queryPrefix: '@scope',
                    queryText: scope.text,
                    onQueryTextClick: onQueryTextClick,
                    jslogContext: 'scope'
                };
                return scopeElement;
            }
        },
        {
            key: "createSupportsElement",
            value: function createSupportsElement(supports) {
                if (!supports.text) {
                    return;
                }
                var onQueryTextClick;
                if (supports.styleSheetId) {
                    onQueryTextClick = this.handleQueryRuleClick.bind(this, supports);
                }
                var supportsElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_12__.CSSQuery.CSSQuery();
                supportsElement.data = {
                    queryPrefix: '@supports',
                    queryText: supports.text,
                    onQueryTextClick: onQueryTextClick,
                    jslogContext: 'supports'
                };
                return supportsElement;
            }
        },
        {
            key: "createNestingElement",
            value: function createNestingElement(nestingSelector) {
                if (!nestingSelector) {
                    return;
                }
                var nestingElement = document.createElement('div');
                nestingElement.textContent = "".concat(nestingSelector, " {");
                return nestingElement;
            }
        },
        {
            key: "addContainerForContainerQuery",
            value: function addContainerForContainerQuery(containerQuery) {
                var _this = this;
                return _async_to_generator(function() {
                    var container, containerElement;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    containerQuery.getContainerForNode(_this.matchedStyles.node().id)
                                ];
                            case 1:
                                container = _state.sent();
                                if (!container) {
                                    return [
                                        2
                                    ];
                                }
                                containerElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_12__.QueryContainer.QueryContainer();
                                containerElement.data = {
                                    container: _components_components_js__WEBPACK_IMPORTED_MODULE_12__.Helper.legacyNodeToElementsComponentsNode(container.containerNode),
                                    queryName: containerQuery.name,
                                    onContainerLinkClick: function(event) {
                                        event.preventDefault();
                                        void _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_14__.ElementsPanel.instance().revealAndSelectNode(container.containerNode, true, true);
                                        void container.containerNode.scrollIntoView();
                                    }
                                };
                                containerElement.addEventListener('queriedsizerequested', /*#__PURE__*/ _async_to_generator(function() {
                                    var details;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                return [
                                                    4,
                                                    container.getContainerSizeDetails()
                                                ];
                                            case 1:
                                                details = _state.sent();
                                                if (details) {
                                                    containerElement.updateContainerQueriedSizeDetails(details);
                                                }
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                }));
                                _class_private_field_get(_this, _ancestorRuleListElement).prepend(containerElement);
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateAncestorRuleList",
            value: function updateAncestorRuleList() {
                _class_private_field_get(this, _ancestorRuleListElement).removeChildren();
                _class_private_field_get(this, _ancestorClosingBracesElement).removeChildren();
                if (this.styleInternal.parentRule && _instanceof(this.styleInternal.parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
                    this.createAncestorRules(this.styleInternal.parentRule);
                }
                _class_private_field_get(this, _styleRuleElement).style.paddingLeft = "".concat(this.nestingLevel, "ch");
            }
        },
        {
            key: "isPropertyInherited",
            value: function isPropertyInherited(propertyName) {
                if (this.matchedStyles.isInherited(this.styleInternal)) {
                    // While rendering inherited stylesheet, reverse meaning of this property.
                    // Render truly inherited properties with black, i.e. return them as non-inherited.
                    return !_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().isPropertyInherited(propertyName);
                }
                return false;
            }
        },
        {
            key: "nextEditableSibling",
            value: function nextEditableSibling() {
                var curSection = this;
                do {
                    curSection = curSection.nextSibling();
                }while (curSection && !curSection.editable);
                if (!curSection) {
                    curSection = this.firstSibling();
                    while(curSection && !curSection.editable){
                        curSection = curSection.nextSibling();
                    }
                }
                return curSection && curSection.editable ? curSection : null;
            }
        },
        {
            key: "previousEditableSibling",
            value: function previousEditableSibling() {
                var curSection = this;
                do {
                    curSection = curSection.previousSibling();
                }while (curSection && !curSection.editable);
                if (!curSection) {
                    curSection = this.lastSibling();
                    while(curSection && !curSection.editable){
                        curSection = curSection.previousSibling();
                    }
                }
                return curSection && curSection.editable ? curSection : null;
            }
        },
        {
            key: "refreshUpdate",
            value: function refreshUpdate(editedTreeElement) {
                this.parentPane.refreshUpdate(this, editedTreeElement);
            }
        },
        {
            key: "updateVarFunctions",
            value: function updateVarFunctions(editedTreeElement) {
                var child = this.propertiesTreeOutline.firstChild();
                while(child){
                    if (child !== editedTreeElement && _instanceof(child, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement)) {
                        child.updateTitleIfComputedValueChanged();
                    }
                    child = child.traverseNextTreeElement(false, null, true);
                }
            }
        },
        {
            key: "update",
            value: function update(full) {
                var headerText = this.headerText();
                this.selectorElement.textContent = headerText;
                this.titleElement.classList.toggle('hidden', headerText.length === 0);
                this.markSelectorMatches();
                if (full) {
                    this.onpopulate();
                } else {
                    var child = this.propertiesTreeOutline.firstChild();
                    while(child && _instanceof(child, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement)){
                        child.setOverloaded(this.isPropertyOverloaded(child.property));
                        child = child.traverseNextTreeElement(false, null, true);
                    }
                }
            }
        },
        {
            key: "showAllItems",
            value: function showAllItems(event) {
                if (event) {
                    event.consume();
                }
                if (this.forceShowAll) {
                    return;
                }
                this.forceShowAll = true;
                this.onpopulate();
            }
        },
        {
            key: "onpopulate",
            value: function onpopulate() {
                this.parentPane.setActiveProperty(null);
                this.nextEditorTriggerButtonIdx = 1;
                this.propertiesTreeOutline.removeChildren();
                var style = this.styleInternal;
                var count = 0;
                var properties = style.leadingProperties();
                var maxProperties = DEFAULT_MAX_PROPERTIES + properties.length - this.originalPropertiesCount;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var property = _step.value;
                        if (!this.forceShowAll && count >= maxProperties) {
                            break;
                        }
                        count++;
                        var isShorthand = property.getLonghandProperties().length > 0;
                        var inherited = this.isPropertyInherited(property.name);
                        var overloaded = this.isPropertyOverloaded(property);
                        if (style.parentRule && style.parentRule.isUserAgent() && inherited) {
                            continue;
                        }
                        var item = new _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement({
                            stylesPane: this.parentPane,
                            section: this,
                            matchedStyles: this.matchedStyles,
                            property: property,
                            isShorthand: isShorthand,
                            inherited: inherited,
                            overloaded: overloaded,
                            newProperty: false
                        });
                        item.setComputedStyles(this.computedStyles);
                        item.setParentsComputedStyles(this.parentsComputedStyles);
                        this.propertiesTreeOutline.appendChild(item);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (count < properties.length) {
                    this.showAllButton.classList.remove('hidden');
                    this.showAllButton.textContent = i18nString(UIStrings.showAllPropertiesSMore, {
                        PH1: properties.length - count
                    });
                } else {
                    this.showAllButton.classList.add('hidden');
                }
            }
        },
        {
            key: "isPropertyOverloaded",
            value: function isPropertyOverloaded(property) {
                return this.matchedStyles.propertyState(property) === "Overloaded" /* SDK.CSSMatchedStyles.PropertyState.Overloaded */ ;
            }
        },
        {
            key: "updateFilter",
            value: function updateFilter() {
                var hasMatchingChild = false;
                this.showAllItems();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.propertiesTreeOutline.rootElement().children()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var child = _step.value;
                        if (_instanceof(child, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement)) {
                            var childHasMatches = child.updateFilter();
                            hasMatchingChild = hasMatchingChild || childHasMatches;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var regex = this.parentPane.filterRegex();
                var hideRule = !hasMatchingChild && regex !== null && !regex.test(this.element.deepTextContent());
                this.isHiddenInternal = hideRule;
                this.element.classList.toggle('hidden', hideRule);
                if (!hideRule && this.styleInternal.parentRule) {
                    this.markSelectorHighlights();
                }
                return !hideRule;
            }
        },
        {
            key: "isHidden",
            value: function isHidden() {
                return this.isHiddenInternal;
            }
        },
        {
            key: "markSelectorMatches",
            value: function markSelectorMatches() {
                var rule = this.styleInternal.parentRule;
                if (!rule || !_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
                    return;
                }
                var matchingSelectorIndexes = this.matchedStyles.getMatchingSelectors(rule);
                var matchingSelectors = new Array(rule.selectors.length).fill(false);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = matchingSelectorIndexes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var matchingIndex = _step.value;
                        matchingSelectors[matchingIndex] = true;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this.parentPane.isEditingStyle) {
                    return;
                }
                var fragment = StylePropertiesSection.renderSelectors(rule.selectors, matchingSelectors, this.elementToSelectorIndex);
                this.selectorElement.removeChildren();
                this.selectorElement.appendChild(fragment);
                this.markSelectorHighlights();
            }
        },
        {
            key: "markSelectorHighlights",
            value: function markSelectorHighlights() {
                var selectors = this.selectorElement.getElementsByClassName('simple-selector');
                var regex = this.parentPane.filterRegex();
                for(var i = 0; i < selectors.length; ++i){
                    var selectorMatchesFilter = regex !== null && regex.test(selectors[i].textContent || '');
                    selectors[i].classList.toggle('filter-match', selectorMatchesFilter);
                }
            }
        },
        {
            key: "addNewBlankProperty",
            value: function addNewBlankProperty() {
                var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.propertiesTreeOutline.rootElement().childCount();
                var property = this.styleInternal.newBlankProperty(index);
                var item = new _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement({
                    stylesPane: this.parentPane,
                    section: this,
                    matchedStyles: this.matchedStyles,
                    property: property,
                    isShorthand: false,
                    inherited: false,
                    overloaded: false,
                    newProperty: true
                });
                this.propertiesTreeOutline.insertChild(item, property.index);
                return item;
            }
        },
        {
            key: "handleEmptySpaceMouseDown",
            value: function handleEmptySpaceMouseDown() {
                this.willCauseCancelEditing = this.parentPane.isEditingStyle;
                this.selectedSinceMouseDown = false;
            }
        },
        {
            key: "handleEmptySpaceClick",
            value: function handleEmptySpaceClick(event) {
                // `this.willCauseCancelEditing` is a hacky way to understand whether we should
                // create a new property or not on empty space click.
                // For empty space clicks, the order of events are:
                // when there isn't an edit operation going on:
                //     * empty space mousedown -> empty space click
                // when there is an edit operation going on:
                //     * empty space mousedown -> text prompt blur -> empty space click
                // text prompt blur sets the `isEditingStyle` to be `false` in parent pane.
                // If we check `isEditingStyle` inside empty space click handler, it will
                // always say `false` and will always cause a new blank property to be added.
                // Because of this, we're checking and saving whether there is an ongoing
                // edit operation inside empty space mousedown handler.
                if (!this.editable || this.element.hasSelection() || this.willCauseCancelEditing || this.selectedSinceMouseDown) {
                    return;
                }
                var target = event.target;
                if (target.classList.contains('header') || this.element.classList.contains('read-only') || target.enclosingNodeOrSelfWithClass('ancestor-rule-list')) {
                    event.consume();
                    return;
                }
                var deepTarget = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.deepElementFromEvent(event);
                var treeElement = deepTarget && _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.TreeOutline.TreeElement.getTreeElementBylistItemNode(deepTarget);
                if (treeElement && _instanceof(treeElement, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement)) {
                    this.addNewBlankProperty(treeElement.property.index + 1).startEditingName();
                } else if (target.classList.contains('selector-container') || target.classList.contains('styles-section-subtitle')) {
                    this.addNewBlankProperty(0).startEditingName();
                } else {
                    this.addNewBlankProperty().startEditingName();
                }
                event.consume(true);
            }
        },
        {
            key: "handleQueryRuleClick",
            value: function handleQueryRuleClick(query, event) {
                var element = event.currentTarget;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isBeingEdited(element)) {
                    return;
                }
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(event) && this.navigable) {
                    var location = query.rawLocation();
                    if (!location) {
                        event.consume(true);
                        return;
                    }
                    var uiLocation = _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().rawLocationToUILocation(location);
                    if (uiLocation) {
                        void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(uiLocation);
                    }
                    event.consume(true);
                    return;
                }
                if (!this.editable) {
                    return;
                }
                var config = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.InplaceEditor.Config(this.editingMediaCommitted.bind(this, query), this.editingMediaCancelled.bind(this, element), undefined, this.editingMediaBlurHandler.bind(this));
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.InplaceEditor.InplaceEditor.startEditing(element, config);
                var selection = element.getComponentSelection();
                if (selection) {
                    selection.selectAllChildren(element);
                }
                this.parentPane.setEditingStyle(true);
                var parentMediaElement = element.enclosingNodeOrSelfWithClass('query');
                parentMediaElement.classList.add('editing-query');
                event.consume(true);
            }
        },
        {
            key: "editingMediaFinished",
            value: function editingMediaFinished(element) {
                this.parentPane.setEditingStyle(false);
                var parentMediaElement = element.enclosingNodeOrSelfWithClass('query');
                parentMediaElement.classList.remove('editing-query');
            }
        },
        {
            key: "editingMediaCancelled",
            value: function editingMediaCancelled(element) {
                this.editingMediaFinished(element);
                // Mark the selectors in group if necessary.
                // This is overridden by BlankStylePropertiesSection.
                this.markSelectorMatches();
                var selection = element.getComponentSelection();
                if (selection) {
                    selection.collapse(element, 0);
                }
            }
        },
        {
            key: "editingMediaBlurHandler",
            value: function editingMediaBlurHandler() {
                return true;
            }
        },
        {
            key: "editingMediaCommitted",
            value: function editingMediaCommitted(query, element, newContent, _oldContent, _context, _moveDirection) {
                var _this = this;
                return _async_to_generator(function() {
                    var cssModel, range, success;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.parentPane.setEditingStyle(false);
                                _this.editingMediaFinished(element);
                                if (newContent) {
                                    newContent = newContent.trim();
                                }
                                // This gets deleted in finishOperation(), which is called both on success and failure.
                                _this.parentPane.setUserOperation(true);
                                cssModel = _this.parentPane.cssModel();
                                if (!(cssModel && query.styleSheetId)) return [
                                    3,
                                    9
                                ];
                                range = query.range;
                                success = false;
                                if (!_instanceof(query, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSContainerQuery.CSSContainerQuery)) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    cssModel.setContainerQueryText(query.styleSheetId, range, newContent)
                                ];
                            case 1:
                                success = _state.sent();
                                return [
                                    3,
                                    8
                                ];
                            case 2:
                                if (!_instanceof(query, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSSupports.CSSSupports)) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    cssModel.setSupportsText(query.styleSheetId, range, newContent)
                                ];
                            case 3:
                                success = _state.sent();
                                return [
                                    3,
                                    8
                                ];
                            case 4:
                                if (!_instanceof(query, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSScope.CSSScope)) return [
                                    3,
                                    6
                                ];
                                return [
                                    4,
                                    cssModel.setScopeText(query.styleSheetId, range, newContent)
                                ];
                            case 5:
                                success = _state.sent();
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                return [
                                    4,
                                    cssModel.setMediaText(query.styleSheetId, range, newContent)
                                ];
                            case 7:
                                success = _state.sent();
                                _state.label = 8;
                            case 8:
                                if (success) {
                                    _this.matchedStyles.resetActiveProperties();
                                    _this.parentPane.refreshUpdate(_this);
                                }
                                _this.parentPane.setUserOperation(false);
                                _this.editingMediaTextCommittedForTest();
                                _state.label = 9;
                            case 9:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "editingMediaTextCommittedForTest",
            value: function editingMediaTextCommittedForTest() {}
        },
        {
            key: "handleSelectorClick",
            value: function handleSelectorClick(event) {
                var target = event.target;
                if (!target) {
                    return;
                }
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(event) && this.navigable && target.classList.contains('simple-selector')) {
                    var selectorIndex = this.elementToSelectorIndex.get(target);
                    if (selectorIndex) {
                        this.navigateToSelectorSource(selectorIndex, true);
                    }
                    event.consume(true);
                    return;
                }
                if (this.element.hasSelection()) {
                    return;
                }
                this.startEditingAtFirstPosition();
                event.consume(true);
            }
        },
        {
            key: "handleContextMenuEvent",
            value: function handleContextMenuEvent(event) {
                var _this = this;
                var target = event.target;
                if (!target) {
                    return;
                }
                var contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.ContextMenu.ContextMenu(event);
                contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copySelector), function() {
                    var selectorText = _this.headerText();
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(selectorText);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(10 /* Host.UserMetrics.StyleTextCopied.SelectorViaContextMenu */ );
                }, {
                    jslogContext: 'copy-selector'
                });
                contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyRule), function() {
                    var ruleText = _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_17__.StylesSidebarPane.formatLeadingProperties(_this).ruleText;
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(ruleText);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(7 /* Host.UserMetrics.StyleTextCopied.RuleViaContextMenu */ );
                }, {
                    jslogContext: 'copy-rule'
                });
                contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyAllDeclarations), function() {
                    var allDeclarationText = _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_17__.StylesSidebarPane.formatLeadingProperties(_this).allDeclarationText;
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allDeclarationText);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(8 /* Host.UserMetrics.StyleTextCopied.AllDeclarationsViaContextMenu */ );
                }, {
                    jslogContext: 'copy-all-declarations'
                });
                var _this1 = this;
                // TODO(changhaohan): conditionally add this item only when there are changes to copy
                contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyAllCSSChanges), /*#__PURE__*/ _async_to_generator(function() {
                    var allChanges;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this1.parentPane.getFormattedChanges()
                                ];
                            case 1:
                                allChanges = _state.sent();
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allChanges);
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(2 /* Host.UserMetrics.StyleTextCopied.AllChangesViaStylesPane */ );
                                return [
                                    2
                                ];
                        }
                    });
                }), {
                    jslogContext: 'copy-all-css-changes'
                });
                void contextMenu.show();
            }
        },
        {
            key: "navigateToSelectorSource",
            value: function navigateToSelectorSource(index, focus) {
                var cssModel = this.parentPane.cssModel();
                if (!cssModel) {
                    return;
                }
                var rule = this.styleInternal.parentRule;
                if (!rule || rule.styleSheetId === undefined) {
                    return;
                }
                var header = cssModel.styleSheetHeaderForId(rule.styleSheetId);
                if (!header) {
                    return;
                }
                var rawLocation = new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSModel.CSSLocation(header, rule.lineNumberInSource(index), rule.columnNumberInSource(index));
                StylePropertiesSection.revealSelectorSource(rawLocation, focus);
            }
        },
        {
            key: "startEditingAtFirstPosition",
            value: function startEditingAtFirstPosition() {
                if (!this.editable) {
                    return;
                }
                if (!this.styleInternal.parentRule) {
                    this.moveEditorFromSelector('forward');
                    return;
                }
                this.startEditingSelector();
            }
        },
        {
            key: "startEditingSelector",
            value: function startEditingSelector() {
                var element = this.selectorElement;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.isBeingEdited(element)) {
                    return;
                }
                element.scrollIntoViewIfNeeded(false);
                // Reset selector marks in group, and normalize whitespace.
                var textContent = element.textContent;
                if (textContent !== null) {
                    element.textContent = textContent.replace(/\s+/g, ' ').trim();
                }
                var config = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.InplaceEditor.Config(this.editingSelectorCommitted.bind(this), this.editingSelectorCancelled.bind(this));
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.InplaceEditor.InplaceEditor.startEditing(this.selectorElement, config);
                var selection = element.getComponentSelection();
                if (selection) {
                    selection.selectAllChildren(element);
                }
                this.parentPane.setEditingStyle(true);
                if (element.classList.contains('simple-selector')) {
                    this.navigateToSelectorSource(0, false);
                }
            }
        },
        {
            key: "moveEditorFromSelector",
            value: function moveEditorFromSelector(moveDirection) {
                this.markSelectorMatches();
                if (!moveDirection) {
                    return;
                }
                if (moveDirection === 'forward') {
                    var firstChild = this.propertiesTreeOutline.firstChild();
                    var currentChild = firstChild;
                    while(currentChild && currentChild.inherited()){
                        var sibling = currentChild.nextSibling;
                        currentChild = _instanceof(sibling, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_16__.StylePropertyTreeElement) ? sibling : null;
                    }
                    if (!currentChild) {
                        this.addNewBlankProperty().startEditingName();
                    } else {
                        currentChild.startEditingName();
                    }
                } else {
                    var previousSection = this.previousEditableSibling();
                    if (!previousSection) {
                        return;
                    }
                    previousSection.addNewBlankProperty().startEditingName();
                }
            }
        },
        {
            key: "editingSelectorCommitted",
            value: function editingSelectorCommitted(element, newContent, oldContent, context, moveDirection) {
                this.editingSelectorEnded();
                if (newContent) {
                    newContent = newContent.trim();
                }
                if (newContent === oldContent) {
                    // Revert to a trimmed version of the selector if need be.
                    this.selectorElement.textContent = newContent;
                    this.moveEditorFromSelector(moveDirection);
                    return;
                }
                var rule = this.styleInternal.parentRule;
                if (!rule) {
                    return;
                }
                function headerTextCommitted() {
                    this.parentPane.setUserOperation(false);
                    this.moveEditorFromSelector(moveDirection);
                    this.editingSelectorCommittedForTest();
                }
                // This gets deleted in finishOperationAndMoveEditor(), which is called both on success and failure.
                this.parentPane.setUserOperation(true);
                void this.setHeaderText(rule, newContent).then(headerTextCommitted.bind(this));
            }
        },
        {
            key: "setHeaderText",
            value: function setHeaderText(rule, newContent) {
                function onSelectorsUpdated(rule, success) {
                    if (!success) {
                        return Promise.resolve();
                    }
                    return this.matchedStyles.recomputeMatchingSelectors(rule).then(updateSourceRanges.bind(this, rule));
                }
                function updateSourceRanges(rule) {
                    var doesAffectSelectedNode = this.matchedStyles.getMatchingSelectors(rule).length > 0;
                    this.propertiesTreeOutline.element.classList.toggle('no-affect', !doesAffectSelectedNode);
                    this.matchedStyles.resetActiveProperties();
                    this.parentPane.refreshUpdate(this);
                }
                if (!_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
                    return Promise.resolve();
                }
                var oldSelectorRange = rule.selectorRange();
                if (!oldSelectorRange) {
                    return Promise.resolve();
                }
                _class_private_field_set(this, _customHeaderText, undefined);
                return rule.setSelectorText(newContent).then(onSelectorsUpdated.bind(this, rule, Boolean(oldSelectorRange)));
            }
        },
        {
            key: "editingSelectorCommittedForTest",
            value: function editingSelectorCommittedForTest() {}
        },
        {
            key: "updateRuleOrigin",
            value: function updateRuleOrigin() {
                this.selectorRefElement.removeChildren();
                this.selectorRefElement.appendChild(this.createRuleOriginNode(this.matchedStyles, this.parentPane.linkifier, this.styleInternal.parentRule));
            }
        },
        {
            key: "editingSelectorEnded",
            value: function editingSelectorEnded() {
                this.parentPane.setEditingStyle(false);
            }
        },
        {
            key: "editingSelectorCancelled",
            value: function editingSelectorCancelled() {
                this.editingSelectorEnded();
                // Mark the selectors in group if necessary.
                // This is overridden by BlankStylePropertiesSection.
                this.markSelectorMatches();
            }
        },
        {
            /**
     * A property at or near an index and suitable for subsequent editing.
     * Either the last property, if index out-of-upper-bound,
     * or property at index, if such a property exists,
     * or otherwise, null.
     */ key: "closestPropertyForEditing",
            value: function closestPropertyForEditing(propertyIndex) {
                var rootElement = this.propertiesTreeOutline.rootElement();
                if (propertyIndex >= rootElement.childCount()) {
                    return rootElement.lastChild();
                }
                return rootElement.childAt(propertyIndex);
            }
        }
    ], [
        {
            key: "createRuleOriginNode",
            value: function createRuleOriginNode(matchedStyles, linkifier, rule) {
                if (!rule) {
                    return document.createTextNode('');
                }
                var ruleLocation = StylePropertiesSection.getRuleLocationFromCSSRule(rule);
                var header = rule.styleSheetId ? matchedStyles.cssModel().styleSheetHeaderForId(rule.styleSheetId) : null;
                function linkifyRuleLocation() {
                    if (!rule) {
                        return null;
                    }
                    if (ruleLocation && rule.styleSheetId && header && (!header.isAnonymousInlineStyleSheet() || matchedStyles.cssModel().sourceMapManager().sourceMapForClient(header))) {
                        return StylePropertiesSection.linkifyRuleLocation(matchedStyles.cssModel(), linkifier, rule.styleSheetId, ruleLocation);
                    }
                    return null;
                }
                function linkifyNode(label) {
                    if (header === null || header === void 0 ? void 0 : header.ownerNode) {
                        var link = (0,_DOMLinkifier_js__WEBPACK_IMPORTED_MODULE_13__.linkifyDeferredNodeReference)(header.ownerNode, {
                            preventKeyboardFocus: false,
                            tooltip: undefined
                        });
                        link.textContent = label;
                        return link;
                    }
                    return null;
                }
                if ((header === null || header === void 0 ? void 0 : header.isMutable) && !header.isViaInspector()) {
                    var location = header.isConstructedByNew() && !header.sourceMapURL ? null : linkifyRuleLocation();
                    if (location) {
                        return location;
                    }
                    var label = header.isConstructedByNew() ? i18nString(UIStrings.constructedStylesheet) : STYLE_TAG;
                    var node = linkifyNode(label);
                    if (node) {
                        return node;
                    }
                    return document.createTextNode(label);
                }
                var location1 = linkifyRuleLocation();
                if (location1) {
                    return location1;
                }
                if (rule.isUserAgent()) {
                    return document.createTextNode(i18nString(UIStrings.userAgentStylesheet));
                }
                if (rule.isInjected()) {
                    return document.createTextNode(i18nString(UIStrings.injectedStylesheet));
                }
                if (rule.isViaInspector()) {
                    return document.createTextNode(i18nString(UIStrings.viaInspector));
                }
                var node1 = linkifyNode(STYLE_TAG);
                if (node1) {
                    return node1;
                }
                return document.createTextNode('');
            }
        },
        {
            key: "getRuleLocationFromCSSRule",
            value: function getRuleLocationFromCSSRule(rule) {
                var ruleLocation;
                if (_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
                    ruleLocation = rule.style.range;
                } else if (_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSKeyframeRule)) {
                    ruleLocation = rule.key().range;
                }
                return ruleLocation;
            }
        },
        {
            key: "tryNavigateToRuleLocation",
            value: function tryNavigateToRuleLocation(matchedStyles, rule) {
                if (!rule) {
                    return;
                }
                var ruleLocation = this.getRuleLocationFromCSSRule(rule);
                var header = rule.styleSheetId ? matchedStyles.cssModel().styleSheetHeaderForId(rule.styleSheetId) : null;
                if (ruleLocation && rule.styleSheetId && header && !header.isAnonymousInlineStyleSheet()) {
                    var matchingSelectorLocation = this.getCSSSelectorLocation(matchedStyles.cssModel(), rule.styleSheetId, ruleLocation);
                    this.revealSelectorSource(matchingSelectorLocation, true);
                }
            }
        },
        {
            key: "linkifyRuleLocation",
            value: function linkifyRuleLocation(cssModel, linkifier, styleSheetId, ruleLocation) {
                var matchingSelectorLocation = this.getCSSSelectorLocation(cssModel, styleSheetId, ruleLocation);
                return linkifier.linkifyCSSLocation(matchingSelectorLocation);
            }
        },
        {
            key: "getCSSSelectorLocation",
            value: function getCSSSelectorLocation(cssModel, styleSheetId, ruleLocation) {
                var styleSheetHeader = cssModel.styleSheetHeaderForId(styleSheetId);
                var lineNumber = styleSheetHeader.lineNumberInSource(ruleLocation.startLine);
                var columnNumber = styleSheetHeader.columnNumberInSource(ruleLocation.startLine, ruleLocation.startColumn);
                return new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSModel.CSSLocation(styleSheetHeader, lineNumber, columnNumber);
            }
        },
        {
            key: "getSpecificityStoredForNodeElement",
            value: function getSpecificityStoredForNodeElement(element) {
                return _class_static_private_field_spec_get(StylePropertiesSection, StylePropertiesSection, _nodeElementToSpecificity).get(element);
            }
        },
        {
            key: "renderSelectors",
            value: function renderSelectors(selectors, matchingSelectors, elementToSelectorIndex) {
                var fragment = document.createDocumentFragment();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = selectors.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), i = _step_value[0], selector = _step_value[1];
                        if (i) {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_9__.UIUtils.createTextChild(fragment, ', ');
                        }
                        var selectorElement = document.createElement('span');
                        selectorElement.classList.add('simple-selector');
                        selectorElement.classList.toggle('selector-matches', matchingSelectors[i]);
                        if (selector.specificity) {
                            _class_static_private_field_spec_get(StylePropertiesSection, StylePropertiesSection, _nodeElementToSpecificity).set(selectorElement, selector.specificity);
                        }
                        elementToSelectorIndex.set(selectorElement, i);
                        selectorElement.textContent = selectors[i].text;
                        fragment.append(selectorElement);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return fragment;
            }
        },
        {
            key: "revealSelectorSource",
            value: function revealSelectorSource(rawLocation, focus) {
                var uiLocation = _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().rawLocationToUILocation(rawLocation);
                if (uiLocation) {
                    void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(uiLocation, !focus);
                }
            }
        }
    ]);
    return StylePropertiesSection;
}();
// Used to keep track of Specificity Information
var _nodeElementToSpecificity = {
    writable: true,
    value: new WeakMap()
};
var BlankStylePropertiesSection = /*#__PURE__*/ function(StylePropertiesSection1) {
    "use strict";
    _inherits(BlankStylePropertiesSection, StylePropertiesSection1);
    var _super = _create_super(BlankStylePropertiesSection);
    function BlankStylePropertiesSection(stylesPane, matchedStyles, defaultSelectorText, styleSheetId, ruleLocation, insertAfterStyle, sectionIdx) {
        _class_call_check(this, BlankStylePropertiesSection);
        var _this;
        var cssModel = stylesPane.cssModel();
        var rule = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule.createDummyRule(cssModel, defaultSelectorText);
        _this = _super.call(this, stylesPane, matchedStyles, rule.style, sectionIdx, null, null);
        _define_property(_assert_this_initialized(_this), "normal", void 0);
        _define_property(_assert_this_initialized(_this), "ruleLocation", void 0);
        _define_property(_assert_this_initialized(_this), "styleSheetId", void 0);
        _this.normal = false;
        _this.ruleLocation = ruleLocation;
        _this.styleSheetId = styleSheetId;
        _this.selectorRefElement.removeChildren();
        _this.selectorRefElement.appendChild(StylePropertiesSection.linkifyRuleLocation(cssModel, _this.parentPane.linkifier, styleSheetId, _this.actualRuleLocation()));
        if (insertAfterStyle && insertAfterStyle.parentRule && _instanceof(insertAfterStyle.parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
            _this.createAncestorRules(insertAfterStyle.parentRule);
        }
        _this.element.classList.add('blank-section');
        return _this;
    }
    _create_class(BlankStylePropertiesSection, [
        {
            key: "actualRuleLocation",
            value: function actualRuleLocation() {
                var prefix = this.rulePrefix();
                var lines = prefix.split('\n');
                var lastLine = lines[lines.length - 1];
                var editRange = new _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__.TextRange.TextRange(0, 0, lines.length - 1, lastLine ? lastLine.length : 0);
                return this.ruleLocation.rebaseAfterTextEdit(_models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__.TextRange.TextRange.createFromLocation(0, 0), editRange);
            }
        },
        {
            key: "rulePrefix",
            value: function rulePrefix() {
                return this.ruleLocation.startLine === 0 && this.ruleLocation.startColumn === 0 ? '' : '\n\n';
            }
        },
        {
            key: "isBlank",
            get: function get() {
                return !this.normal;
            }
        },
        {
            key: "editingSelectorCommitted",
            value: function editingSelectorCommitted(element, newContent, oldContent, context, moveDirection) {
                if (!this.isBlank) {
                    _get(_get_prototype_of(BlankStylePropertiesSection.prototype), "editingSelectorCommitted", this).call(this, element, newContent, oldContent, context, moveDirection);
                    return;
                }
                function onRuleAdded(newRule) {
                    if (!newRule) {
                        this.editingSelectorCancelled();
                        this.editingSelectorCommittedForTest();
                        return Promise.resolve();
                    }
                    return this.matchedStyles.addNewRule(newRule, this.matchedStyles.node()).then(onAddedToCascade.bind(this, newRule));
                }
                function onAddedToCascade(newRule) {
                    var doesSelectorAffectSelectedNode = this.matchedStyles.getMatchingSelectors(newRule).length > 0;
                    this.makeNormal(newRule);
                    if (!doesSelectorAffectSelectedNode) {
                        this.propertiesTreeOutline.element.classList.add('no-affect');
                    }
                    this.updateRuleOrigin();
                    this.parentPane.setUserOperation(false);
                    this.editingSelectorEnded();
                    if (this.element.parentElement) {
                        this.moveEditorFromSelector(moveDirection);
                    }
                    this.markSelectorMatches();
                    this.editingSelectorCommittedForTest();
                }
                if (newContent) {
                    newContent = newContent.trim();
                }
                this.parentPane.setUserOperation(true);
                var cssModel = this.parentPane.cssModel();
                var ruleText = this.rulePrefix() + newContent + ' {}';
                if (cssModel) {
                    void cssModel.addRule(this.styleSheetId, ruleText, this.ruleLocation).then(onRuleAdded.bind(this));
                }
            }
        },
        {
            key: "editingSelectorCancelled",
            value: function editingSelectorCancelled() {
                this.parentPane.setUserOperation(false);
                if (!this.isBlank) {
                    _get(_get_prototype_of(BlankStylePropertiesSection.prototype), "editingSelectorCancelled", this).call(this);
                    return;
                }
                this.editingSelectorEnded();
                this.parentPane.removeSection(this);
            }
        },
        {
            key: "makeNormal",
            value: function makeNormal(newRule) {
                this.element.classList.remove('blank-section');
                this.styleInternal = newRule.style;
                // FIXME: replace this instance by a normal StylePropertiesSection.
                this.normal = true;
            }
        }
    ]);
    return BlankStylePropertiesSection;
}(StylePropertiesSection);
var RegisteredPropertiesSection = /*#__PURE__*/ function(StylePropertiesSection) {
    "use strict";
    _inherits(RegisteredPropertiesSection, StylePropertiesSection);
    var _super = _create_super(RegisteredPropertiesSection);
    function RegisteredPropertiesSection(stylesPane, matchedStyles, style, sectionIdx, propertyName, expandedByDefault) {
        _class_call_check(this, RegisteredPropertiesSection);
        var _this;
        _this = _super.call(this, stylesPane, matchedStyles, style, sectionIdx, null, null, propertyName);
        if (!expandedByDefault) {
            _this.element.classList.add('hidden');
        }
        _this.selectorElement.className = 'property-registration-key';
        return _this;
    }
    _create_class(RegisteredPropertiesSection, [
        {
            key: "setHeaderText",
            value: function setHeaderText(rule, newContent) {
                var _this = this;
                return _async_to_generator(function() {
                    var oldRange;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSPropertyRule)) {
                                    return [
                                        2
                                    ];
                                }
                                oldRange = rule.propertyName().range;
                                if (!oldRange) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    rule.setPropertyName(newContent)
                                ];
                            case 1:
                                if (_state.sent()) {
                                    _this.parentPane.forceUpdate();
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createRuleOriginNode",
            value: function createRuleOriginNode(matchedStyles, linkifier, rule) {
                if (rule) {
                    return _get(_get_prototype_of(RegisteredPropertiesSection.prototype), "createRuleOriginNode", this).call(this, matchedStyles, linkifier, rule);
                }
                return document.createTextNode('CSS.registerProperty');
            }
        }
    ]);
    return RegisteredPropertiesSection;
}(StylePropertiesSection);
var FontPaletteValuesRuleSection = /*#__PURE__*/ function(StylePropertiesSection) {
    "use strict";
    _inherits(FontPaletteValuesRuleSection, StylePropertiesSection);
    var _super = _create_super(FontPaletteValuesRuleSection);
    function FontPaletteValuesRuleSection(stylesPane, matchedStyles, style, sectionIdx) {
        _class_call_check(this, FontPaletteValuesRuleSection);
        var _this;
        _this = _super.call(this, stylesPane, matchedStyles, style, sectionIdx, null, null);
        _this.selectorElement.className = 'font-palette-values-key';
        return _this;
    }
    return FontPaletteValuesRuleSection;
}(StylePropertiesSection);
var PositionTryRuleSection = /*#__PURE__*/ function(StylePropertiesSection) {
    "use strict";
    _inherits(PositionTryRuleSection, StylePropertiesSection);
    var _super = _create_super(PositionTryRuleSection);
    function PositionTryRuleSection(stylesPane, matchedStyles, style, sectionIdx, active) {
        _class_call_check(this, PositionTryRuleSection);
        var _this;
        _this = _super.call(this, stylesPane, matchedStyles, style, sectionIdx, null, null);
        _this.selectorElement.className = 'position-try-values-key';
        _this.propertiesTreeOutline.element.classList.toggle('no-affect', !active);
        return _this;
    }
    return PositionTryRuleSection;
}(StylePropertiesSection);
var KeyframePropertiesSection = /*#__PURE__*/ function(StylePropertiesSection) {
    "use strict";
    _inherits(KeyframePropertiesSection, StylePropertiesSection);
    var _super = _create_super(KeyframePropertiesSection);
    function KeyframePropertiesSection(stylesPane, matchedStyles, style, sectionIdx) {
        _class_call_check(this, KeyframePropertiesSection);
        var _this;
        _this = _super.call(this, stylesPane, matchedStyles, style, sectionIdx, null, null);
        _this.selectorElement.className = 'keyframe-key';
        return _this;
    }
    _create_class(KeyframePropertiesSection, [
        {
            key: "headerText",
            value: function headerText() {
                if (_instanceof(this.styleInternal.parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSKeyframeRule)) {
                    return this.styleInternal.parentRule.key().text;
                }
                return '';
            }
        },
        {
            key: "setHeaderText",
            value: function setHeaderText(rule, newContent) {
                function updateSourceRanges(success) {
                    if (!success) {
                        return;
                    }
                    this.parentPane.refreshUpdate(this);
                }
                if (!_instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSKeyframeRule)) {
                    return Promise.resolve();
                }
                var oldRange = rule.key().range;
                if (!oldRange) {
                    return Promise.resolve();
                }
                return rule.setKeyText(newContent).then(updateSourceRanges.bind(this));
            }
        },
        {
            key: "isPropertyInherited",
            value: function isPropertyInherited(_propertyName) {
                return false;
            }
        },
        {
            key: "isPropertyOverloaded",
            value: function isPropertyOverloaded(_property) {
                return false;
            }
        },
        {
            key: "markSelectorHighlights",
            value: function markSelectorHighlights() {}
        },
        {
            key: "markSelectorMatches",
            value: function markSelectorMatches() {
                if (_instanceof(this.styleInternal.parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSKeyframeRule)) {
                    this.selectorElement.textContent = this.styleInternal.parentRule.key().text;
                }
            }
        },
        {
            key: "highlight",
            value: function highlight() {}
        }
    ]);
    return KeyframePropertiesSection;
}(StylePropertiesSection);
var HighlightPseudoStylePropertiesSection = /*#__PURE__*/ function(StylePropertiesSection) {
    "use strict";
    _inherits(HighlightPseudoStylePropertiesSection, StylePropertiesSection);
    var _super = _create_super(HighlightPseudoStylePropertiesSection);
    function HighlightPseudoStylePropertiesSection() {
        _class_call_check(this, HighlightPseudoStylePropertiesSection);
        return _super.apply(this, arguments);
    }
    _create_class(HighlightPseudoStylePropertiesSection, [
        {
            key: "isPropertyInherited",
            value: function isPropertyInherited(_propertyName) {
                // For highlight pseudos, all valid properties are treated as inherited.
                // Note that the meaning is reversed in this context; the result of
                // returning false here is that properties of inherited pseudos will never
                // be shown in the darker style of non-inherited properties.
                return false;
            }
        }
    ]);
    return HighlightPseudoStylePropertiesSection;
} //# sourceMappingURL=StylePropertiesSection.js.map
(StylePropertiesSection);


}),
"./panels/elements/StylePropertyHighlighter.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StylePropertyHighlighter: function() { return StylePropertyHighlighter; }
});
/* harmony import */var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ "./panels/utils/utils.js");
/* harmony import */var _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StylePropertyTreeElement.js */ "./panels/elements/StylePropertyTreeElement.js");
// Copyright (c) 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}


var StylePropertyHighlighter = /*#__PURE__*/ function() {
    "use strict";
    function StylePropertyHighlighter(ssp) {
        _class_call_check(this, StylePropertyHighlighter);
        _define_property(this, "styleSidebarPane", void 0);
        this.styleSidebarPane = ssp;
    }
    _create_class(StylePropertyHighlighter, [
        {
            /**
     * Expand all shorthands, find the given property, scroll to it and highlight it.
     */ key: "highlightProperty",
            value: function highlightProperty(cssProperty) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    // Expand all shorthands.
                    for(var _iterator = this.styleSidebarPane.allSections()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var section = _step.value;
                        for(var treeElement = section.propertiesTreeOutline.firstChild(); treeElement; treeElement = treeElement.nextSibling){
                            void treeElement.onpopulate();
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var section1 = this.styleSidebarPane.allSections().find(function(section) {
                    return section.style().leadingProperties().includes(cssProperty);
                });
                if (!section1) {
                    return;
                }
                section1.showAllItems();
                var treeElement1 = this.findTreeElementFromSection(function(treeElement) {
                    return treeElement.property === cssProperty;
                }, section1);
                if (treeElement1) {
                    treeElement1.parent && treeElement1.parent.expand();
                    this.scrollAndHighlightTreeElement(treeElement1);
                    section1.element.focus();
                }
            }
        },
        {
            key: "findAndHighlightSectionBlock",
            value: function findAndHighlightSectionBlock(sectionBlockName) {
                var block = this.styleSidebarPane.getSectionBlockByName(sectionBlockName);
                if (!block || block.sections.length === 0) {
                    return;
                }
                var _block_sections = _sliced_to_array(block.sections, 1), section = _block_sections[0];
                section.showAllItems();
                _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.PanelUtils.highlightElement(block.titleElement());
            }
        },
        {
            key: "findAndHighlightSection",
            value: function findAndHighlightSection(sectionName, blockName) {
                var block = this.styleSidebarPane.getSectionBlockByName(blockName);
                var section = block === null || block === void 0 ? void 0 : block.sections.find(function(section) {
                    return section.headerText() === sectionName;
                });
                if (!section || !block) {
                    return;
                }
                block.expand(true);
                section.showAllItems();
                _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.PanelUtils.highlightElement(section.element);
            }
        },
        {
            /**
     * Find the first non-overridden property that matches the provided name, scroll to it and highlight it.
     */ key: "findAndHighlightPropertyName",
            value: function findAndHighlightPropertyName(propertyName, sectionName, blockName) {
                var block = blockName ? this.styleSidebarPane.getSectionBlockByName(blockName) : undefined;
                var _block_sections;
                var sections = (_block_sections = block === null || block === void 0 ? void 0 : block.sections) !== null && _block_sections !== void 0 ? _block_sections : this.styleSidebarPane.allSections();
                if (!sections) {
                    return false;
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = sections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var section = _step.value;
                        if (sectionName && section.headerText() !== sectionName) {
                            continue;
                        }
                        if (!section.style().hasActiveProperty(propertyName)) {
                            continue;
                        }
                        block === null || block === void 0 ? void 0 : block.expand(true);
                        section.showAllItems();
                        var treeElement = this.findTreeElementFromSection(function(treeElement) {
                            return treeElement.property.name === propertyName && !treeElement.overloaded();
                        }, section);
                        if (treeElement) {
                            this.scrollAndHighlightTreeElement(treeElement);
                            section.element.focus();
                            return true;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return false;
            }
        },
        {
            /**
     * Traverse the styles pane tree, execute the provided callback for every tree element found, and
     * return the first tree element and corresponding section for which the callback returns a truthy value.
     */ key: "findTreeElementAndSection",
            value: function findTreeElementAndSection(compareCb) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.styleSidebarPane.allSections()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var section = _step.value;
                        var treeElement = this.findTreeElementFromSection(compareCb, section);
                        if (treeElement) {
                            return {
                                treeElement: treeElement,
                                section: section
                            };
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return {
                    treeElement: null,
                    section: null
                };
            }
        },
        {
            key: "findTreeElementFromSection",
            value: function findTreeElementFromSection(compareCb, section) {
                var treeElement = section.propertiesTreeOutline.firstChild();
                while(treeElement && _instanceof(treeElement, _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_1__.StylePropertyTreeElement)){
                    if (compareCb(treeElement)) {
                        return treeElement;
                    }
                    treeElement = treeElement.traverseNextTreeElement(false, null, true);
                }
                return null;
            }
        },
        {
            key: "scrollAndHighlightTreeElement",
            value: function scrollAndHighlightTreeElement(treeElement) {
                _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.PanelUtils.highlightElement(treeElement.listItemElement);
            }
        }
    ]);
    return StylePropertyHighlighter;
} //# sourceMappingURL=StylePropertyHighlighter.js.map
();


}),
"./panels/elements/StylePropertyTreeElement.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AnchorFunctionRenderer: function() { return AnchorFunctionRenderer; },
  AngleRenderer: function() { return AngleRenderer; },
  BezierRenderer: function() { return BezierRenderer; },
  ColorMixRenderer: function() { return ColorMixRenderer; },
  ColorRenderer: function() { return ColorRenderer; },
  FontRenderer: function() { return FontRenderer; },
  GridTemplateRenderer: function() { return GridTemplateRenderer; },
  LengthRenderer: function() { return LengthRenderer; },
  LightDarkColorRenderer: function() { return LightDarkColorRenderer; },
  LinearGradientRenderer: function() { return LinearGradientRenderer; },
  LinkableNameRenderer: function() { return LinkableNameRenderer; },
  PositionAnchorRenderer: function() { return PositionAnchorRenderer; },
  ShadowModel: function() { return ShadowModel; },
  ShadowRenderer: function() { return ShadowRenderer; },
  StylePropertyTreeElement: function() { return StylePropertyTreeElement; },
  VariableRenderer: function() { return VariableRenderer; },
  activeHints: function() { return activeHints; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/host/host.js */ "./core/host/host.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */var _core_root_root_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/root/root.js */ "./core/root/root.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../models/bindings/bindings.js */ "./models/bindings/bindings.js");
/* harmony import */var _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../models/text_utils/text_utils.js */ "./models/text_utils/text_utils.js");
/* harmony import */var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */var _ui_legacy_components_color_picker_color_picker_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ui/legacy/components/color_picker/color_picker.js */ "./ui/legacy/components/color_picker/color_picker.js");
/* harmony import */var _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ui/legacy/components/inline_editor/inline_editor.js */ "./ui/legacy/components/inline_editor/inline_editor.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ColorSwatchPopoverIcon.js */ "./panels/elements/ColorSwatchPopoverIcon.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _CSSRuleValidator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./CSSRuleValidator.js */ "./panels/elements/CSSRuleValidator.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
/* harmony import */var _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./PropertyMatchers.js */ "./panels/elements/PropertyMatchers.js");
/* harmony import */var _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./PropertyRenderer.js */ "./panels/elements/PropertyRenderer.js");
/* harmony import */var _StyleEditorWidget_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./StyleEditorWidget.js */ "./panels/elements/StyleEditorWidget.js");
/* harmony import */var _StylePropertyUtils_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./StylePropertyUtils.js */ "./panels/elements/StylePropertyUtils.js");
/* harmony import */var _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./StylesSidebarPane.js */ "./panels/elements/StylesSidebarPane.js");
// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_apply_descriptor_update(receiver, descriptor) {
    if (descriptor.set) {
        if (!descriptor.get) {
            throw new TypeError("attempted to read set only private field");
        }
        if (!("__destrWrapper" in descriptor)) {
            descriptor.__destrWrapper = {
                set value (v){
                    descriptor.set.call(receiver, v);
                },
                get value () {
                    return descriptor.get.call(receiver);
                }
            };
        }
        return descriptor.__destrWrapper;
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        return descriptor;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _class_private_field_update(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "update");
    return _class_apply_descriptor_update(receiver, descriptor);
}
function _class_private_method_get(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _class_private_method_init(obj, privateSet) {
    _check_private_redeclaration(obj, privateSet);
    privateSet.add(obj);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _tagged_template_literal(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v1) {
            return step([
                n,
                v1
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function _templateObject() {
    var data = _tagged_template_literal([
        "<br /><span class='styles-clipboard-only'>",
        "</span>"
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}






















var ASTUtils = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.ASTUtils;
var FlexboxEditor = _components_components_js__WEBPACK_IMPORTED_MODULE_14__.StylePropertyEditor.FlexboxEditor;
var GridEditor = _components_components_js__WEBPACK_IMPORTED_MODULE_14__.StylePropertyEditor.GridEditor;
var activeHints = new WeakMap();
var UIStrings = {
    /**
     *@description Text in Color Swatch Popover Icon of the Elements panel
     */ shiftClickToChangeColorFormat: 'Shift + Click to change color format.',
    /**
     *@description Swatch icon element title in Color Swatch Popover Icon of the Elements panel
     *@example {Shift + Click to change color format.} PH1
     */ openColorPickerS: 'Open color picker. {PH1}',
    /**
     *@description Context menu item for style property in edit mode
     */ togglePropertyAndContinueEditing: 'Toggle property and continue editing',
    /**
     *@description Context menu item for style property in edit mode
     */ revealInSourcesPanel: 'Reveal in Sources panel',
    /**
     *@description A context menu item in Styles panel to copy CSS declaration
     */ copyDeclaration: 'Copy declaration',
    /**
     *@description A context menu item in Styles panel to copy CSS property
     */ copyProperty: 'Copy property',
    /**
     *@description A context menu item in the Watch Expressions Sidebar Pane of the Sources panel and Network pane request.
     */ copyValue: 'Copy value',
    /**
     *@description A context menu item in Styles panel to copy CSS rule
     */ copyRule: 'Copy rule',
    /**
     *@description A context menu item in Styles panel to copy all CSS declarations
     */ copyAllDeclarations: 'Copy all declarations',
    /**
     *@description  A context menu item in Styles panel to copy all the CSS changes
     */ copyAllCSSChanges: 'Copy all CSS changes',
    /**
     *@description A context menu item in Styles panel to view the computed CSS property value.
     */ viewComputedValue: 'View computed value',
    /**
     * @description Title of the button that opens the flexbox editor in the Styles panel.
     */ flexboxEditorButton: 'Open `flexbox` editor',
    /**
     * @description Title of the button that opens the CSS Grid editor in the Styles panel.
     */ gridEditorButton: 'Open `grid` editor',
    /**
     *@description A context menu item in Styles panel to copy CSS declaration as JavaScript property.
     */ copyCssDeclarationAsJs: 'Copy declaration as JS',
    /**
     *@description A context menu item in Styles panel to copy all declarations of CSS rule as JavaScript properties.
     */ copyAllCssDeclarationsAsJs: 'Copy all declarations as JS'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.registerUIStrings('panels/elements/StylePropertyTreeElement.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.getLocalizedString.bind(undefined, str_);
var parentMap = new WeakMap();
var _treeElement = /*#__PURE__*/ new WeakMap(), _style = /*#__PURE__*/ new WeakMap(), _pane = /*#__PURE__*/ new WeakMap(), _matchedStyles = /*#__PURE__*/ new WeakMap(), _handleVarDefinitionActivate = /*#__PURE__*/ new WeakSet();
var VariableRenderer = /*#__PURE__*/ function() {
    "use strict";
    function VariableRenderer(treeElement, style) {
        _class_call_check(this, VariableRenderer);
        _class_private_field_init(this, _pane, {
            get: get_pane,
            set: void 0
        });
        _class_private_field_init(this, _matchedStyles, {
            get: get_matchedStyles,
            set: void 0
        });
        _class_private_method_init(this, _handleVarDefinitionActivate);
        _class_private_field_init(this, _treeElement, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _style, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement, treeElement);
        _class_private_field_set(this, _style, style);
    }
    _create_class(VariableRenderer, [
        {
            key: "matcher",
            value: function matcher() {
                return new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.VariableMatcher(this.computedText.bind(this));
            }
        },
        {
            key: "resolveVariable",
            value: function resolveVariable(match) {
                return _class_private_field_get(this, _matchedStyles).computeCSSVariable(_class_private_field_get(this, _style), match.name);
            }
        },
        {
            key: "fallbackValue",
            value: function fallbackValue(match) {
                if (match.fallback.length === 0 || match.matching.hasUnresolvedVarsRange(match.fallback[0], match.fallback[match.fallback.length - 1])) {
                    return null;
                }
                return match.matching.getComputedTextRange(match.fallback[0], match.fallback[match.fallback.length - 1]);
            }
        },
        {
            // clang-format off
            key: "computedText",
            value: function computedText(match) {
                var _this_resolveVariable;
                var _this_resolveVariable_value;
                return (_this_resolveVariable_value = (_this_resolveVariable = this.resolveVariable(match)) === null || _this_resolveVariable === void 0 ? void 0 : _this_resolveVariable.value) !== null && _this_resolveVariable_value !== void 0 ? _this_resolveVariable_value : this.fallbackValue(match);
            }
        },
        {
            // clang-format on
            key: "render",
            value: function render(match, context) {
                var _this = this;
                var renderedFallback = match.fallback.length > 0 ? _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(match.fallback, context) : undefined;
                var _this_resolveVariable;
                var _ref = (_this_resolveVariable = this.resolveVariable(match)) !== null && _this_resolveVariable !== void 0 ? _this_resolveVariable : {}, declaration = _ref.declaration, variableValue = _ref.value;
                var fromFallback = !variableValue;
                var computedValue = variableValue !== null && variableValue !== void 0 ? variableValue : this.fallbackValue(match);
                var varSwatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.LinkSwatch.CSSVarSwatch();
                varSwatch.data = {
                    computedValue: computedValue,
                    variableName: match.name,
                    fromFallback: fromFallback,
                    fallbackText: match.fallback.map(function(n) {
                        return context.ast.text(n);
                    }).join(' '),
                    onLinkActivate: function(name) {
                        return _class_private_method_get(_this, _handleVarDefinitionActivate, handleVarDefinitionActivate).call(_this, declaration !== null && declaration !== void 0 ? declaration : name);
                    }
                };
                if (renderedFallback === null || renderedFallback === void 0 ? void 0 : renderedFallback.nodes.length) {
                    // When slotting someting into the fallback slot, also emit text children so that .textContent produces the
                    // correct var value.
                    varSwatch.appendChild(document.createTextNode("var(".concat(match.name)));
                    var span = varSwatch.appendChild(document.createElement('span'));
                    span.appendChild(document.createTextNode(', '));
                    span.slot = 'fallback';
                    renderedFallback.nodes.forEach(function(n) {
                        return span.appendChild(n);
                    });
                    varSwatch.appendChild(document.createTextNode(')'));
                } else {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.UIUtils.createTextChild(varSwatch, match.text);
                }
                if (varSwatch.link) {
                    _class_private_field_get(this, _pane).addPopover(varSwatch.link, {
                        contents: function() {
                            return _class_private_field_get(_this, _treeElement).getVariablePopoverContents(match.name, variableValue !== null && variableValue !== void 0 ? variableValue : null);
                        },
                        jslogContext: 'elements.css-var'
                    });
                }
                var color = computedValue && _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(computedValue);
                if (!color) {
                    return [
                        varSwatch
                    ];
                }
                var colorSwatch = new ColorRenderer(_class_private_field_get(this, _treeElement)).renderColorSwatch(color, varSwatch);
                context.addControl('color', colorSwatch);
                if (fromFallback) {
                    var _renderedFallback_cssControls_get;
                    renderedFallback === null || renderedFallback === void 0 ? void 0 : (_renderedFallback_cssControls_get = renderedFallback.cssControls.get('color')) === null || _renderedFallback_cssControls_get === void 0 ? void 0 : _renderedFallback_cssControls_get.forEach(function(innerSwatch) {
                        return innerSwatch.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorChangedEvent.eventName, function(ev) {
                            colorSwatch.setColor(ev.data.color);
                        });
                    });
                }
                return [
                    colorSwatch
                ];
            }
        }
    ]);
    return VariableRenderer;
}();
function get_pane() {
    return _class_private_field_get(this, _treeElement).parentPane();
}
function get_matchedStyles() {
    return _class_private_field_get(this, _treeElement).matchedStyles();
}
function handleVarDefinitionActivate(variable) {
    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.actionTaken(_core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.UserMetrics.Action.CustomPropertyLinkClicked);
    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(0 /* Host.UserMetrics.SwatchType.VarLink */ );
    if (_instanceof(variable, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSProperty.CSSProperty)) {
        _class_private_field_get(this, _pane).revealProperty(variable);
    } else if (_instanceof(variable, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMatchedStyles.CSSRegisteredProperty)) {
        _class_private_field_get(this, _pane).jumpToProperty('initial-value', variable.propertyName(), _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.REGISTERED_PROPERTY_SECTION_NAME);
    } else {
        _class_private_field_get(this, _pane).jumpToProperty(variable) || _class_private_field_get(this, _pane).jumpToProperty('initial-value', variable, _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.REGISTERED_PROPERTY_SECTION_NAME);
    }
}
var LinearGradientRenderer = /*#__PURE__*/ function() {
    "use strict";
    function LinearGradientRenderer() {
        _class_call_check(this, LinearGradientRenderer);
    }
    _create_class(LinearGradientRenderer, [
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.LinearGradientMatcher();
            }
        },
        {
            key: "render",
            value: function render(match, context) {
                var children = ASTUtils.children(match.node);
                var _Renderer_render = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(children, context), nodes = _Renderer_render.nodes, cssControls = _Renderer_render.cssControls;
                var angles = cssControls.get('angle');
                var angle = (angles === null || angles === void 0 ? void 0 : angles.length) === 1 ? angles[0] : null;
                if (_instanceof(angle, _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.CSSAngle.CSSAngle)) {
                    var _args_;
                    angle.updateProperty(context.matchedResult.getComputedText(match.node));
                    var args = ASTUtils.callArgs(match.node);
                    var angleNode = (_args_ = args[0]) === null || _args_ === void 0 ? void 0 : _args_.find(function(node) {
                        return _instanceof(context.matchedResult.getMatch(node), _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.AngleMatch);
                    });
                    var angleMatch = angleNode && context.matchedResult.getMatch(angleNode);
                    if (angleMatch) {
                        angle.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.InlineEditorUtils.ValueChangedEvent.eventName, function(ev) {
                            angle.updateProperty(context.matchedResult.getComputedText(match.node, new Map([
                                [
                                    angleMatch,
                                    ev.data.value
                                ]
                            ])));
                        });
                    }
                }
                return nodes;
            }
        }
    ]);
    return LinearGradientRenderer;
}();
var _getValueChild = /*#__PURE__*/ new WeakSet(), _addColorContrastInfo = /*#__PURE__*/ new WeakSet();
var ColorRenderer = /*#__PURE__*/ function() {
    "use strict";
    function ColorRenderer(treeElement) {
        _class_call_check(this, ColorRenderer);
        _class_private_method_init(this, _getValueChild);
        _class_private_method_init(this, _addColorContrastInfo);
        _define_property(this, "treeElement", void 0);
        this.treeElement = treeElement;
    }
    _create_class(ColorRenderer, [
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.ColorMatcher();
            }
        },
        {
            key: "render",
            value: function render(match, context) {
                var _class_private_method_get_call = _class_private_method_get(this, _getValueChild, getValueChild).call(this, match, context), valueChild = _class_private_method_get_call.valueChild, cssControls = _class_private_method_get_call.cssControls;
                var colorText = context.matchedResult.getComputedText(match.node);
                // Evaluate relative color values
                if (match.node.name === 'CallExpression' && colorText.match(/^[^)]*\(\W*from\W+/) && !context.matchedResult.hasUnresolvedVars(match.node) && CSS.supports('color', colorText)) {
                    var _window_getComputedStyle_backgroundColor;
                    var fakeSpan = document.body.appendChild(document.createElement('span'));
                    fakeSpan.style.backgroundColor = colorText;
                    colorText = ((_window_getComputedStyle_backgroundColor = window.getComputedStyle(fakeSpan).backgroundColor) === null || _window_getComputedStyle_backgroundColor === void 0 ? void 0 : _window_getComputedStyle_backgroundColor.toString()) || colorText;
                    fakeSpan.remove();
                }
                // Now try render a color swatch if the result is parsable.
                var color = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(colorText);
                if (!color) {
                    return [
                        document.createTextNode(colorText)
                    ];
                }
                var swatch = this.renderColorSwatch(color, valueChild);
                context.addControl('color', swatch);
                // For hsl/hwb colors, hook up the angle swatch for the hue.
                if (cssControls && match.node.name === 'CallExpression' && context.ast.text(match.node.getChild('Callee')).match(/^(hsla?|hwba?)/)) {
                    var _cssControls_get;
                    var _ref = _sliced_to_array((_cssControls_get = cssControls.get('angle')) !== null && _cssControls_get !== void 0 ? _cssControls_get : [], 1), angle = _ref[0];
                    if (_instanceof(angle, _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.CSSAngle.CSSAngle)) {
                        var _swatch_getColor;
                        var _swatch_getColor_asString;
                        angle.updateProperty((_swatch_getColor_asString = (_swatch_getColor = swatch.getColor()) === null || _swatch_getColor === void 0 ? void 0 : _swatch_getColor.asString()) !== null && _swatch_getColor_asString !== void 0 ? _swatch_getColor_asString : '');
                        angle.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.InlineEditorUtils.ValueChangedEvent.eventName, function(ev) {
                            var _swatch_getColor;
                            var hue = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parseHueNumeric(ev.data.value);
                            var color = swatch.getColor();
                            if (!hue || !color) {
                                return;
                            }
                            if (color.is("hsl" /* Common.Color.Format.HSL */ ) || color.is("hsla" /* Common.Color.Format.HSLA */ )) {
                                swatch.setColor(new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.HSL(hue, color.s, color.l, color.alpha));
                            } else if (color.is("hwb" /* Common.Color.Format.HWB */ ) || color.is("hwba" /* Common.Color.Format.HWBA */ )) {
                                swatch.setColor(new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.HWB(hue, color.w, color.b, color.alpha));
                            }
                            var _swatch_getColor_asString;
                            angle.updateProperty((_swatch_getColor_asString = (_swatch_getColor = swatch.getColor()) === null || _swatch_getColor === void 0 ? void 0 : _swatch_getColor.asString()) !== null && _swatch_getColor_asString !== void 0 ? _swatch_getColor_asString : '');
                        });
                    }
                }
                return [
                    swatch
                ];
            }
        },
        {
            key: "renderColorSwatch",
            value: function renderColorSwatch(color, valueChild) {
                var _this = this;
                var editable = this.treeElement.editable();
                var shiftClickMessage = i18nString(UIStrings.shiftClickToChangeColorFormat);
                var tooltip = editable ? i18nString(UIStrings.openColorPickerS, {
                    PH1: shiftClickMessage
                }) : '';
                var swatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorSwatch(tooltip);
                swatch.setReadonly(!editable);
                if (color) {
                    swatch.renderColor(color);
                }
                if (!valueChild) {
                    valueChild = swatch.createChild('span');
                    if (color) {
                        var _color_getAuthoredText;
                        valueChild.textContent = (_color_getAuthoredText = color.getAuthoredText()) !== null && _color_getAuthoredText !== void 0 ? _color_getAuthoredText : color.asString();
                    }
                }
                swatch.appendChild(valueChild);
                var onColorChanged = function() {
                    void _this.treeElement.applyStyleText(_this.treeElement.renderedPropertyText(), false);
                };
                swatch.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ClickEvent.eventName, function() {
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(2 /* Host.UserMetrics.SwatchType.Color */ );
                });
                swatch.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorChangedEvent.eventName, onColorChanged);
                if (editable) {
                    var swatchIcon = new _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_13__.ColorSwatchPopoverIcon(this.treeElement, this.treeElement.parentPane().swatchPopoverHelper(), swatch);
                    swatchIcon.addEventListener("colorchanged" /* ColorSwatchPopoverIconEvents.ColorChanged */ , function(ev) {
                        var _$color = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(ev.data);
                        if (_$color) {
                            swatch.setColorText(_$color);
                        }
                    });
                    void _class_private_method_get(this, _addColorContrastInfo, addColorContrastInfo).call(this, swatchIcon);
                }
                return swatch;
            }
        }
    ]);
    return ColorRenderer;
}();
function getValueChild(match, context) {
    var valueChild = document.createElement('span');
    if (match.node.name === 'ColorLiteral' || match.node.name === 'ValueName' && _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.Nicknames.has(match.text)) {
        valueChild.appendChild(document.createTextNode(match.text));
        return {
            valueChild: valueChild
        };
    }
    var cssControls = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(ASTUtils.children(match.node), context, valueChild).cssControls;
    return {
        valueChild: valueChild,
        cssControls: cssControls
    };
}
function addColorContrastInfo(swatchIcon) {
    return _addColorContrastInfo1.apply(this, arguments);
}
function _addColorContrastInfo1() {
    _addColorContrastInfo1 = _async_to_generator(function(swatchIcon) {
        var cssModel, node, contrastInfo, _, _1;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    cssModel = this.treeElement.parentPane().cssModel();
                    node = this.treeElement.node();
                    if (this.treeElement.property.name !== 'color' || !cssModel || !node || typeof node.id === 'undefined') {
                        return [
                            2
                        ];
                    }
                    _1 = (_ = _ui_legacy_components_color_picker_color_picker_js__WEBPACK_IMPORTED_MODULE_9__.ContrastInfo.ContrastInfo).bind;
                    return [
                        4,
                        cssModel.getBackgroundColors(node.id)
                    ];
                case 1:
                    contrastInfo = new (_1.apply(_, [
                        void 0,
                        _state.sent()
                    ]));
                    swatchIcon.setContrastInfo(contrastInfo);
                    return [
                        2
                    ];
            }
        });
    });
    return _addColorContrastInfo1.apply(this, arguments);
}
var _treeElement1 = /*#__PURE__*/ new WeakMap(), _activeColor = /*#__PURE__*/ new WeakSet();
var LightDarkColorRenderer = /*#__PURE__*/ function() {
    "use strict";
    function LightDarkColorRenderer(treeElement) {
        _class_call_check(this, LightDarkColorRenderer);
        // Returns the syntax node group corresponding the active color scheme:
        // If the element has color-scheme set to light or dark, return the respective group.
        // If the element has color-scheme set to both light and dark, we check the prefers-color-scheme media query.
        _class_private_method_init(this, _activeColor);
        _class_private_field_init(this, _treeElement1, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement1, treeElement);
    }
    _create_class(LightDarkColorRenderer, [
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.LightDarkColorMatcher();
            }
        },
        {
            key: "render",
            value: function render(match, context) {
                var content = document.createElement('span');
                content.appendChild(document.createTextNode('light-dark('));
                var light = content.appendChild(document.createElement('span'));
                content.appendChild(document.createTextNode(', '));
                var dark = content.appendChild(document.createElement('span'));
                content.appendChild(document.createTextNode(')'));
                var _Renderer_renderInto = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.light, context, light), lightControls = _Renderer_renderInto.cssControls;
                var _Renderer_renderInto1 = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.dark, context, dark), darkControls = _Renderer_renderInto1.cssControls;
                if (context.matchedResult.hasUnresolvedVars(match.node)) {
                    return [
                        content
                    ];
                }
                var color = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(context.matchedResult.getComputedTextRange(match.light[0], match.light[match.light.length - 1]));
                if (!color) {
                    return [
                        content
                    ];
                }
                // Pass an undefined color here to insert a placeholder swatch that will be filled in from the async
                // applyColorScheme below.
                var colorSwatch = new ColorRenderer(_class_private_field_get(this, _treeElement1)).renderColorSwatch(undefined, content);
                context.addControl('color', colorSwatch);
                void this.applyColorScheme(match, context, colorSwatch, light, dark, lightControls, darkControls);
                return [
                    colorSwatch
                ];
            }
        },
        {
            key: "applyColorScheme",
            value: function applyColorScheme(match, context, colorSwatch, light, dark, lightControls, darkControls) {
                var _this = this;
                return _async_to_generator(function() {
                    var _$activeColor, activeColorSwatches, inactiveColor, colorText, color;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _class_private_method_get(_this, _activeColor, activeColor).call(_this, match)
                                ];
                            case 1:
                                _$activeColor = _state.sent();
                                if (!_$activeColor) {
                                    return [
                                        2
                                    ];
                                }
                                activeColorSwatches = (_$activeColor === match.light ? lightControls : darkControls).get('color');
                                activeColorSwatches === null || activeColorSwatches === void 0 ? void 0 : activeColorSwatches.forEach(function(swatch) {
                                    return swatch.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorChangedEvent.eventName, function(ev) {
                                        return colorSwatch.setColor(ev.data.color);
                                    });
                                });
                                inactiveColor = _$activeColor === match.light ? dark : light;
                                colorText = context.matchedResult.getComputedTextRange(_$activeColor[0], _$activeColor[_$activeColor.length - 1]);
                                color = colorText && _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(colorText);
                                inactiveColor.style.textDecoration = 'line-through';
                                if (color) {
                                    colorSwatch.renderColor(color);
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return LightDarkColorRenderer;
}();
function activeColor(match) {
    return _activeColor1.apply(this, arguments);
}
function _activeColor1() {
    _activeColor1 = _async_to_generator(function(match) {
        var _class_private_field_get_getComputedStyle, _class_private_field_get_parentPane_cssModel, _class_private_field_get_getComputedStyle_split, activeColorSchemes, hasLight, hasDark;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    activeColorSchemes = (_class_private_field_get_getComputedStyle_split = (_class_private_field_get_getComputedStyle = _class_private_field_get(this, _treeElement1).getComputedStyle('color-scheme')) === null || _class_private_field_get_getComputedStyle === void 0 ? void 0 : _class_private_field_get_getComputedStyle.split(' ')) !== null && _class_private_field_get_getComputedStyle_split !== void 0 ? _class_private_field_get_getComputedStyle_split : [];
                    hasLight = activeColorSchemes.includes("light" /* SDK.CSSModel.ColorScheme.Light */ );
                    hasDark = activeColorSchemes.includes("dark" /* SDK.CSSModel.ColorScheme.Dark */ );
                    if (!hasDark && !hasLight) {
                        return [
                            2,
                            match.light
                        ];
                    }
                    if (!hasLight) {
                        return [
                            2,
                            match.dark
                        ];
                    }
                    if (!hasDark) {
                        return [
                            2,
                            match.light
                        ];
                    }
                    return [
                        4,
                        (_class_private_field_get_parentPane_cssModel = _class_private_field_get(this, _treeElement1).parentPane().cssModel()) === null || _class_private_field_get_parentPane_cssModel === void 0 ? void 0 : _class_private_field_get_parentPane_cssModel.colorScheme()
                    ];
                case 1:
                    switch(_state.sent()){
                        case "dark" /* SDK.CSSModel.ColorScheme.Dark */ :
                            return [
                                2,
                                match.dark
                            ];
                        case "light" /* SDK.CSSModel.ColorScheme.Light */ :
                            return [
                                2,
                                match.light
                            ];
                        default:
                            return [
                                2,
                                undefined
                            ];
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _activeColor1.apply(this, arguments);
}
var _pane1 = /*#__PURE__*/ new WeakMap();
var ColorMixRenderer = /*#__PURE__*/ function() {
    "use strict";
    function ColorMixRenderer(pane) {
        _class_call_check(this, ColorMixRenderer);
        _class_private_field_init(this, _pane1, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _pane1, pane);
    }
    _create_class(ColorMixRenderer, [
        {
            key: "render",
            value: function render(match, context) {
                var _this = this;
                var hookUpColorArg = function(node, onChange) {
                    if (_instanceof(node, _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorMixSwatch.ColorMixSwatch) || _instanceof(node, _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorSwatch)) {
                        if (_instanceof(node, _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorSwatch)) {
                            node.addEventListener(_ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorSwatch.ColorChangedEvent.eventName, function(ev) {
                                var _ev_data_color_getAuthoredText;
                                return onChange((_ev_data_color_getAuthoredText = ev.data.color.getAuthoredText()) !== null && _ev_data_color_getAuthoredText !== void 0 ? _ev_data_color_getAuthoredText : ev.data.color.asString());
                            });
                        } else {
                            node.addEventListener("colorChanged" /* InlineEditor.ColorMixSwatch.Events.ColorChanged */ , function(ev) {
                                return onChange(ev.data.text);
                            });
                        }
                        var color = node.getText();
                        if (color) {
                            onChange(color);
                            return true;
                        }
                    }
                    return false;
                };
                var contentChild = document.createElement('span');
                contentChild.appendChild(document.createTextNode('color-mix('));
                _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.space, context, contentChild);
                contentChild.appendChild(document.createTextNode(', '));
                var _Renderer_renderInto_cssControls_get;
                var color1 = (_Renderer_renderInto_cssControls_get = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.color1, context, contentChild).cssControls.get('color')) !== null && _Renderer_renderInto_cssControls_get !== void 0 ? _Renderer_renderInto_cssControls_get : [];
                contentChild.appendChild(document.createTextNode(', '));
                var _Renderer_renderInto_cssControls_get1;
                var color2 = (_Renderer_renderInto_cssControls_get1 = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.color2, context, contentChild).cssControls.get('color')) !== null && _Renderer_renderInto_cssControls_get1 !== void 0 ? _Renderer_renderInto_cssControls_get1 : [];
                contentChild.appendChild(document.createTextNode(')'));
                if (context.matchedResult.hasUnresolvedVars(match.node) || color1.length !== 1 || color2.length !== 1) {
                    return [
                        contentChild
                    ];
                }
                var swatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.ColorMixSwatch.ColorMixSwatch();
                if (!hookUpColorArg(color1[0], function(text) {
                    return swatch.setFirstColor(text);
                }) || !hookUpColorArg(color2[0], function(text) {
                    return swatch.setSecondColor(text);
                })) {
                    return [
                        contentChild
                    ];
                }
                var space = match.space.map(function(space) {
                    return context.matchedResult.getComputedText(space);
                }).join(' ');
                var color1Text = match.color1.map(function(color) {
                    return context.matchedResult.getComputedText(color);
                }).join(' ');
                var color2Text = match.color2.map(function(color) {
                    return context.matchedResult.getComputedText(color);
                }).join(' ');
                swatch.appendChild(contentChild);
                swatch.setColorMixText("color-mix(".concat(space, ", ").concat(color1Text, ", ").concat(color2Text, ")"));
                swatch.setRegisterPopoverCallback(function(swatch) {
                    if (swatch.icon) {
                        _class_private_field_get(_this, _pane1).addPopover(swatch.icon, {
                            contents: function() {
                                var color = swatch.mixedColor();
                                if (!color) {
                                    return undefined;
                                }
                                var span = document.createElement('span');
                                span.style.padding = '11px 7px';
                                var rgb = color.as("hex" /* Common.Color.Format.HEX */ );
                                var text = rgb.isGamutClipped() ? color.asString() : rgb.asString();
                                if (!text) {
                                    return undefined;
                                }
                                span.appendChild(document.createTextNode(text));
                                return span;
                            },
                            jslogContext: 'elements.css-color-mix'
                        });
                    }
                });
                context.addControl('color', swatch);
                return [
                    swatch
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.ColorMixMatcher();
            }
        }
    ]);
    return ColorMixRenderer;
}();
var _treeElement2 = /*#__PURE__*/ new WeakMap();
var AngleRenderer = /*#__PURE__*/ function() {
    "use strict";
    function AngleRenderer(treeElement) {
        _class_call_check(this, AngleRenderer);
        _class_private_field_init(this, _treeElement2, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement2, treeElement);
    }
    _create_class(AngleRenderer, [
        {
            key: "render",
            value: function render(match, context) {
                var _this = this;
                var angleText = match.text;
                if (!_class_private_field_get(this, _treeElement2).editable()) {
                    return [
                        document.createTextNode(angleText)
                    ];
                }
                var cssAngle = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.CSSAngle.CSSAngle();
                cssAngle.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.showStyleEditor().track({
                    click: true
                }).context('css-angle')));
                var valueElement = document.createElement('span');
                valueElement.textContent = angleText;
                cssAngle.data = {
                    angleText: angleText,
                    containingPane: _class_private_field_get(this, _treeElement2).parentPane().element.enclosingNodeOrSelfWithClass('style-panes-wrapper')
                };
                cssAngle.append(valueElement);
                cssAngle.addEventListener('popovertoggled', function(param) {
                    var data = param.data;
                    var section = _class_private_field_get(_this, _treeElement2).section();
                    if (!section) {
                        return;
                    }
                    if (data.open) {
                        _class_private_field_get(_this, _treeElement2).parentPane().hideAllPopovers();
                        _class_private_field_get(_this, _treeElement2).parentPane().activeCSSAngle = cssAngle;
                        _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(7 /* Host.UserMetrics.SwatchType.Angle */ );
                    }
                    section.element.classList.toggle('has-open-popover', data.open);
                    _class_private_field_get(_this, _treeElement2).parentPane().setEditingStyle(data.open);
                    // Commit the value as a major change after the angle popover is closed.
                    if (!data.open) {
                        void _class_private_field_get(_this, _treeElement2).applyStyleText(_class_private_field_get(_this, _treeElement2).renderedPropertyText(), true);
                    }
                });
                var _this1 = this;
                cssAngle.addEventListener('valuechanged', function() {
                    var _ref = _async_to_generator(function(param) {
                        var data;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    data = param.data;
                                    valueElement.textContent = data.value;
                                    return [
                                        4,
                                        _class_private_field_get(_this1, _treeElement2).applyStyleText(_class_private_field_get(_this1, _treeElement2).renderedPropertyText(), false)
                                    ];
                                case 1:
                                    _state.sent();
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                    return function(_) {
                        return _ref.apply(this, arguments);
                    };
                }());
                cssAngle.addEventListener('unitchanged', function(param) {
                    var data = param.data;
                    valueElement.textContent = data.value;
                });
                context.addControl('angle', cssAngle);
                return [
                    cssAngle
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.AngleMatcher();
            }
        }
    ]);
    return AngleRenderer;
}();
var _treeElement3 = /*#__PURE__*/ new WeakMap(), _getLinkData = /*#__PURE__*/ new WeakSet();
var LinkableNameRenderer = /*#__PURE__*/ function() {
    "use strict";
    function LinkableNameRenderer(treeElement) {
        _class_call_check(this, LinkableNameRenderer);
        _class_private_method_init(this, _getLinkData);
        _class_private_field_init(this, _treeElement3, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement3, treeElement);
    }
    _create_class(LinkableNameRenderer, [
        {
            key: "render",
            value: function render(match) {
                var _this = this;
                var swatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.LinkSwatch.LinkSwatch();
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.UIUtils.createTextChild(swatch, match.text);
                var _class_private_method_get_call = _class_private_method_get(this, _getLinkData, getLinkData).call(this, match), metric = _class_private_method_get_call.metric, jslogContext = _class_private_method_get_call.jslogContext, ruleBlock = _class_private_method_get_call.ruleBlock, isDefined = _class_private_method_get_call.isDefined;
                swatch.data = {
                    text: match.text,
                    isDefined: isDefined,
                    onLinkActivate: function() {
                        metric && _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(metric);
                        _class_private_field_get(_this, _treeElement3).parentPane().jumpToSectionBlock("".concat(ruleBlock, " ").concat(match.text));
                    },
                    jslogContext: jslogContext
                };
                return [
                    swatch
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.LinkableNameMatcher();
            }
        }
    ]);
    return LinkableNameRenderer;
}();
function getLinkData(match) {
    switch(match.properyName){
        case "animation" /* LinkableNameProperties.Animation */ :
        case "animation-name" /* LinkableNameProperties.AnimationName */ :
            return {
                jslogContext: 'css-animation-name',
                metric: 1 /* Host.UserMetrics.SwatchType.AnimationNameLink */ ,
                ruleBlock: '@keyframes',
                isDefined: Boolean(_class_private_field_get(this, _treeElement3).matchedStyles().keyframes().find(function(kf) {
                    return kf.name().text === match.text;
                }))
            };
        case "font-palette" /* LinkableNameProperties.FontPalette */ :
            var _class_private_field_get_matchedStyles_fontPaletteValuesRule;
            return {
                jslogContext: 'css-font-palette',
                metric: null,
                ruleBlock: '@font-palette-values',
                isDefined: ((_class_private_field_get_matchedStyles_fontPaletteValuesRule = _class_private_field_get(this, _treeElement3).matchedStyles().fontPaletteValuesRule()) === null || _class_private_field_get_matchedStyles_fontPaletteValuesRule === void 0 ? void 0 : _class_private_field_get_matchedStyles_fontPaletteValuesRule.name().text) === match.text
            };
        case "position-try" /* LinkableNameProperties.PositionTry */ :
        case "position-try-options" /* LinkableNameProperties.PositionTryOptions */ :
            return {
                jslogContext: 'css-position-try',
                metric: 10 /* Host.UserMetrics.SwatchType.PositionTryLink */ ,
                ruleBlock: '@position-try',
                isDefined: Boolean(_class_private_field_get(this, _treeElement3).matchedStyles().positionTryRules().find(function(pt) {
                    return pt.name().text === match.text;
                }))
            };
    }
}
var _treeElement4 = /*#__PURE__*/ new WeakMap();
var BezierRenderer = /*#__PURE__*/ function() {
    "use strict";
    function BezierRenderer(treeElement) {
        _class_call_check(this, BezierRenderer);
        _class_private_field_init(this, _treeElement4, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement4, treeElement);
    }
    _create_class(BezierRenderer, [
        {
            key: "render",
            value: function render(match) {
                return [
                    this.renderSwatch(match)
                ];
            }
        },
        {
            key: "renderSwatch",
            value: function renderSwatch(match) {
                if (!_class_private_field_get(this, _treeElement4).editable()) {
                    return document.createTextNode(match.text);
                }
                var swatchPopoverHelper = _class_private_field_get(this, _treeElement4).parentPane().swatchPopoverHelper();
                var swatch = _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.Swatches.BezierSwatch.create();
                swatch.iconElement().addEventListener('click', function() {
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(3 /* Host.UserMetrics.SwatchType.AnimationTiming */ );
                });
                swatch.setBezierText(match.text);
                new _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_13__.BezierPopoverIcon({
                    treeElement: _class_private_field_get(this, _treeElement4),
                    swatchPopoverHelper: swatchPopoverHelper,
                    swatch: swatch
                });
                return swatch;
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.BezierMatcher();
            }
        }
    ]);
    return BezierRenderer;
}();
var _properties = /*#__PURE__*/ new WeakMap(), _shadowType = /*#__PURE__*/ new WeakMap(), _context = /*#__PURE__*/ new WeakMap(), _length = /*#__PURE__*/ new WeakSet(), _needsExpansion = /*#__PURE__*/ new WeakSet(), _expandPropertyIfNeeded = /*#__PURE__*/ new WeakSet(), _expandOrGetProperty = /*#__PURE__*/ new WeakSet(), _setLength = /*#__PURE__*/ new WeakSet();
// The shadow model is an abstraction over the various shadow properties on the one hand and the order they were defined
// in on the other, so that modifications through the shadow editor can retain the property order in the authored text.
// The model also looks through var()s by keeping a mapping between individual properties and any var()s they are coming
// from, replacing the var() functions as needed with concrete values when edited.
var ShadowModel = /*#__PURE__*/ function() {
    "use strict";
    function ShadowModel(shadowType, properties, context) {
        _class_call_check(this, ShadowModel);
        _class_private_method_init(this, _length);
        _class_private_method_init(this, _needsExpansion);
        _class_private_method_init(this, _expandPropertyIfNeeded);
        _class_private_method_init(this, _expandOrGetProperty);
        _class_private_method_init(this, _setLength);
        _class_private_field_init(this, _properties, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _shadowType, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(this, _context, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _shadowType, shadowType);
        _class_private_field_set(this, _properties, properties);
        _class_private_field_set(this, _context, context);
    }
    _create_class(ShadowModel, [
        {
            key: "isBoxShadow",
            value: function isBoxShadow() {
                return _class_private_field_get(this, _shadowType) === "boxShadow" /* ShadowType.BoxShadow */ ;
            }
        },
        {
            key: "inset",
            value: function inset() {
                return Boolean(_class_private_field_get(this, _properties).find(function(property) {
                    return property.propertyType === "inset" /* ShadowPropertyType.Inset */ ;
                }));
            }
        },
        {
            key: "offsetX",
            value: function offsetX() {
                return _class_private_method_get(this, _length, length).call(this, "x" /* ShadowPropertyType.X */ );
            }
        },
        {
            key: "offsetY",
            value: function offsetY() {
                return _class_private_method_get(this, _length, length).call(this, "y" /* ShadowPropertyType.Y */ );
            }
        },
        {
            key: "blurRadius",
            value: function blurRadius() {
                return _class_private_method_get(this, _length, length).call(this, "blur" /* ShadowPropertyType.Blur */ );
            }
        },
        {
            key: "spreadRadius",
            value: function spreadRadius() {
                return _class_private_method_get(this, _length, length).call(this, "spread" /* ShadowPropertyType.Spread */ );
            }
        },
        {
            key: "setInset",
            value: function setInset(inset) {
                if (!this.isBoxShadow()) {
                    return;
                }
                var _class_private_method_get_call = _class_private_method_get(this, _expandOrGetProperty, expandOrGetProperty).call(this, "inset" /* ShadowPropertyType.Inset */ ), property = _class_private_method_get_call.property, index = _class_private_method_get_call.index;
                if (property) {
                    // For `inset`, remove the entry if value is false, otherwise don't touch it.
                    if (!inset) {
                        _class_private_field_get(this, _properties).splice(index, 1);
                    }
                } else {
                    _class_private_field_get(this, _properties).unshift({
                        value: 'inset',
                        source: null,
                        expansionContext: null,
                        propertyType: "inset" /* ShadowPropertyType.Inset */ 
                    });
                }
            }
        },
        {
            key: "setOffsetX",
            value: function setOffsetX(value) {
                _class_private_method_get(this, _setLength, setLength).call(this, value, "x" /* ShadowPropertyType.X */ );
            }
        },
        {
            key: "setOffsetY",
            value: function setOffsetY(value) {
                _class_private_method_get(this, _setLength, setLength).call(this, value, "y" /* ShadowPropertyType.Y */ );
            }
        },
        {
            key: "setBlurRadius",
            value: function setBlurRadius(value) {
                _class_private_method_get(this, _setLength, setLength).call(this, value, "blur" /* ShadowPropertyType.Blur */ );
            }
        },
        {
            key: "setSpreadRadius",
            value: function setSpreadRadius(value) {
                if (this.isBoxShadow()) {
                    _class_private_method_get(this, _setLength, setLength).call(this, value, "spread" /* ShadowPropertyType.Spread */ );
                }
            }
        },
        {
            key: "renderContents",
            value: function renderContents(parent) {
                parent.removeChildren();
                var span = parent.createChild('span');
                var previousSource = null;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = _class_private_field_get(this, _properties)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var property = _step.value;
                        if (!property.source || property.source !== previousSource) {
                            if (property !== _class_private_field_get(this, _properties)[0]) {
                                span.append(' ');
                            }
                            // If `source` is present on the property that means it came from a var() and we'll use that to render.
                            if (property.source) {
                                var _span;
                                (_span = span).append.apply(_span, _to_consumable_array(_PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(property.source, _class_private_field_get(this, _context)).nodes));
                            } else if (typeof property.value === 'string') {
                                span.append(property.value);
                            } else {
                                var _span1;
                                var _property_expansionContext;
                                (_span1 = span).append.apply(_span1, _to_consumable_array(_PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(property.value, (_property_expansionContext = property.expansionContext) !== null && _property_expansionContext !== void 0 ? _property_expansionContext : _class_private_field_get(this, _context)).nodes));
                            }
                        }
                        previousSource = property.source;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    ]);
    return ShadowModel;
}();
function length(lengthType) {
    var _class_private_field_get_find;
    var _class_private_field_get_find_length;
    return (_class_private_field_get_find_length = (_class_private_field_get_find = _class_private_field_get(this, _properties).find(function(property) {
        return property.propertyType === lengthType;
    })) === null || _class_private_field_get_find === void 0 ? void 0 : _class_private_field_get_find.length) !== null && _class_private_field_get_find_length !== void 0 ? _class_private_field_get_find_length : _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.CSSShadowEditor.CSSLength.zero();
}
function needsExpansion(property) {
    return Boolean(property.expansionContext && property.source);
}
function expandPropertyIfNeeded(property) {
    if (_class_private_method_get(this, _needsExpansion, needsExpansion).call(this, property)) {
        // Rendering prefers `source` if present. It's sufficient to clear it in order to switch rendering to render the
        // individual properties directly.
        var source = property.source;
        _class_private_field_get(this, _properties).filter(function(property) {
            return property.source === source;
        }).forEach(function(property) {
            property.source = null;
        });
    }
}
function expandOrGetProperty(propertyType) {
    var index = _class_private_field_get(this, _properties).findIndex(function(property) {
        return property.propertyType === propertyType;
    });
    var property = index >= 0 ? _class_private_field_get(this, _properties)[index] : undefined;
    property && _class_private_method_get(this, _expandPropertyIfNeeded, expandPropertyIfNeeded).call(this, property);
    return {
        property: property,
        index: index
    };
}
function setLength(value, propertyType) {
    var property = _class_private_method_get(this, _expandOrGetProperty, expandOrGetProperty).call(this, propertyType).property;
    if (property) {
        property.value = value.asCSSText();
        property.length = value;
        property.source = null;
    } else {
        // Lengths are ordered X, Y, Blur, Spread, with the latter two being optional. When inserting an optional property
        // we need to insert it after Y or after Blur, depending on what's being inserted and which properties are
        // present.
        var insertionIdx = 1 + _class_private_field_get(this, _properties).findLastIndex(function(property) {
            return property.propertyType === "y" /* ShadowPropertyType.Y */  || propertyType === "spread" /* ShadowPropertyType.Spread */  && property.propertyType === "blur" /* ShadowPropertyType.Blur */ ;
        });
        if (insertionIdx > 0 && insertionIdx < _class_private_field_get(this, _properties).length && _class_private_method_get(this, _needsExpansion, needsExpansion).call(this, _class_private_field_get(this, _properties)[insertionIdx]) && _class_private_field_get(this, _properties)[insertionIdx - 1].source === _class_private_field_get(this, _properties)[insertionIdx].source) {
            // This prevents the edge case where insertion after the last length would break up a group of values that
            // require expansion.
            _class_private_method_get(this, _expandPropertyIfNeeded, expandPropertyIfNeeded).call(this, _class_private_field_get(this, _properties)[insertionIdx]);
        }
        _class_private_field_get(this, _properties).splice(insertionIdx, 0, {
            value: value.asCSSText(),
            length: value,
            source: null,
            expansionContext: null,
            propertyType: propertyType
        });
    }
}
var _treeElement5 = /*#__PURE__*/ new WeakMap();
var ShadowRenderer = /*#__PURE__*/ function() {
    "use strict";
    function ShadowRenderer(treeElement) {
        _class_call_check(this, ShadowRenderer);
        _class_private_field_init(this, _treeElement5, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement5, treeElement);
    }
    _create_class(ShadowRenderer, [
        {
            key: "shadowModel",
            value: function shadowModel(shadow, shadowType, context) {
                var _loop = function(item) {
                    var value = item.value, source = item.source, match = item.match, expansionContext = item.expansionContext;
                    var text = (expansionContext !== null && expansionContext !== void 0 ? expansionContext : context).ast.text(value);
                    if (value.name === 'NumberLiteral') {
                        if (!stillAcceptsLengths) {
                            return {
                                v: null
                            };
                        }
                        var propertyType = missingLengths.pop();
                        if (propertyType === undefined || propertyType === "spread" /* ShadowPropertyType.Spread */  && shadowType === "textShadow" /* ShadowType.TextShadow */ ) {
                            return {
                                v: null
                            };
                        }
                        var length = _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.CSSShadowEditor.CSSLength.parse(text);
                        if (!length) {
                            return {
                                v: null
                            };
                        }
                        properties.push({
                            value: value,
                            source: source,
                            length: length,
                            propertyType: propertyType,
                            expansionContext: expansionContext
                        });
                    } else if (_instanceof(match, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.VariableMatch)) {
                        var _queue;
                        // This doesn't come from any computed text, so we can rely on context here
                        var computedValue = context.matchedResult.getComputedText(value);
                        var computedValueAst = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.tokenizeDeclaration('--property', computedValue);
                        if (!computedValueAst) {
                            return {
                                v: null
                            };
                        }
                        var matches = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.BottomUpTreeMatching.walkExcludingSuccessors(computedValueAst, [
                            new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.ColorMatcher()
                        ]);
                        if (matches.hasUnresolvedVars(matches.ast.tree)) {
                            return {
                                v: null
                            };
                        }
                        (_queue = queue).unshift.apply(_queue, _to_consumable_array(ASTUtils.siblings(ASTUtils.declValue(matches.ast.tree)).map(function(matchedNode) {
                            return {
                                value: matchedNode,
                                source: value,
                                match: matches.getMatch(matchedNode),
                                expansionContext: new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.RenderingContext(computedValueAst, context.renderers, matches)
                            };
                        })));
                    } else {
                        // The length properties must come in one block, so if there were any lengths before, followed by a non-length
                        // property, we will not allow any future lengths.
                        stillAcceptsLengths = missingLengths.length === 4;
                        if (value.name === 'ValueName' && text.toLowerCase() === 'inset') {
                            if (shadowType === "textShadow" /* ShadowType.TextShadow */  || properties.find(function(param) {
                                var propertyType = param.propertyType;
                                return propertyType === "inset" /* ShadowPropertyType.Inset */ ;
                            })) {
                                return {
                                    v: null
                                };
                            }
                            properties.push({
                                value: value,
                                source: source,
                                propertyType: "inset" /* ShadowPropertyType.Inset */ ,
                                expansionContext: expansionContext
                            });
                        } else if (_instanceof(match, _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.ColorMatch) || _instanceof(match, _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.ColorMixMatch)) {
                            if (properties.find(function(param) {
                                var propertyType = param.propertyType;
                                return propertyType === "color" /* ShadowPropertyType.Color */ ;
                            })) {
                                return {
                                    v: null
                                };
                            }
                            properties.push({
                                value: value,
                                source: source,
                                propertyType: "color" /* ShadowPropertyType.Color */ ,
                                expansionContext: expansionContext
                            });
                        } else if (value.name !== 'Comment' && value.name !== 'Important') {
                            return {
                                v: null
                            };
                        }
                    }
                };
                var properties = [];
                var missingLengths = [
                    "spread" /* ShadowPropertyType.Spread */ ,
                    "blur" /* ShadowPropertyType.Blur */ ,
                    "y" /* ShadowPropertyType.Y */ ,
                    "x" /* ShadowPropertyType.X */ 
                ];
                var stillAcceptsLengths = true;
                // We're parsing the individual shadow properties into an array here retaining the ordering. This also looks through
                // var() functions by re-parsing the variable values on the fly. For properties coming from a var() we're keeping
                // track of their origin to allow for adhoc expansion when one of those properties is edited.
                var queue = shadow.map(function(value) {
                    return {
                        value: value,
                        source: value,
                        match: context.matchedResult.getMatch(value),
                        expansionContext: null
                    };
                });
                for(var item = queue.shift(); item; item = queue.shift()){
                    var _ret = _loop(item);
                    if (_type_of(_ret) === "object") return _ret.v;
                }
                if (missingLengths.length > 2) {
                    // X and Y are mandatory
                    return null;
                }
                return new ShadowModel(shadowType, properties, context);
            }
        },
        {
            key: "render",
            value: function render(match, context) {
                var _this = this;
                var shadows = ASTUtils.split(ASTUtils.siblings(ASTUtils.declValue(match.node)));
                var result = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    var _this1, _loop = function() {
                        var shadow = _step.value;
                        var model = _this1.shadowModel(shadow, match.shadowType, context);
                        var isImportant = shadow.find(function(node) {
                            return node.name === 'Important';
                        });
                        if (shadow !== shadows[0]) {
                            result.push(document.createTextNode(', '));
                        }
                        if (!model) {
                            var _result;
                            var nodes = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(shadow, context).nodes;
                            (_result = result).push.apply(_result, _to_consumable_array(nodes));
                            return "continue";
                        }
                        var swatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.Swatches.CSSShadowSwatch(model);
                        swatch.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.showStyleEditor('css-shadow').track({
                            click: true
                        })));
                        swatch.iconElement().addEventListener('click', function() {
                            _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(4 /* Host.UserMetrics.SwatchType.Shadow */ );
                        });
                        model.renderContents(swatch);
                        var popoverHelper = new _ColorSwatchPopoverIcon_js__WEBPACK_IMPORTED_MODULE_13__.ShadowSwatchPopoverHelper(_class_private_field_get(_this1, _treeElement5), _class_private_field_get(_this1, _treeElement5).parentPane().swatchPopoverHelper(), swatch);
                        popoverHelper.addEventListener("shadowChanged" /* ShadowEvents.ShadowChanged */ , function() {
                            model.renderContents(swatch);
                            void _class_private_field_get(_this, _treeElement5).applyStyleText(_class_private_field_get(_this, _treeElement5).renderedPropertyText(), false);
                        });
                        result.push(swatch);
                        if (isImportant) {
                            var _result1;
                            (_result1 = result).push.apply(_result1, _to_consumable_array([
                                document.createTextNode(' ')
                            ].concat(_to_consumable_array(_PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(isImportant, context).nodes))));
                        }
                    };
                    for(var _iterator = shadows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_this1 = this, _loop();
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.ShadowMatcher();
            }
        }
    ]);
    return ShadowRenderer;
}();
var FontRenderer = /*#__PURE__*/ function() {
    "use strict";
    function FontRenderer(treeElement) {
        _class_call_check(this, FontRenderer);
        _define_property(this, "treeElement", void 0);
        this.treeElement = treeElement;
    }
    _create_class(FontRenderer, [
        {
            key: "render",
            value: function render(match) {
                this.treeElement.section().registerFontProperty(this.treeElement);
                return [
                    document.createTextNode(match.text)
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.FontMatcher();
            }
        }
    ]);
    return FontRenderer;
}();
var GridTemplateRenderer = /*#__PURE__*/ function() {
    "use strict";
    function GridTemplateRenderer() {
        _class_call_check(this, GridTemplateRenderer);
    }
    _create_class(GridTemplateRenderer, [
        {
            key: "render",
            value: function render(match, context) {
                if (match.lines.length <= 1) {
                    return _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(ASTUtils.siblings(ASTUtils.declValue(match.node)), context).nodes;
                }
                var indent = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').get();
                var container = document.createDocumentFragment();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = match.lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var line = _step.value;
                        var _container;
                        var value = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.render(line, context);
                        var lineBreak = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.Fragment.html(_templateObject(), indent.repeat(2));
                        (_container = container).append.apply(_container, [
                            lineBreak
                        ].concat(_to_consumable_array(value.nodes)));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return [
                    container
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.GridTemplateMatcher();
            }
        }
    ]);
    return GridTemplateRenderer;
}();
var _treeElement6 = /*#__PURE__*/ new WeakMap();
var LengthRenderer = /*#__PURE__*/ function() {
    "use strict";
    function LengthRenderer(treeElement) {
        _class_call_check(this, LengthRenderer);
        _class_private_field_init(this, _treeElement6, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement6, treeElement);
    }
    _create_class(LengthRenderer, [
        {
            key: "render",
            value: function render(match, _context) {
                var _this = this;
                var lengthText = match.text;
                if (!_class_private_field_get(this, _treeElement6).editable()) {
                    return [
                        document.createTextNode(lengthText)
                    ];
                }
                var cssLength = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_10__.CSSLength.CSSLength();
                var valueElement = document.createElement('span');
                valueElement.textContent = lengthText;
                cssLength.data = {
                    lengthText: lengthText,
                    overloaded: _class_private_field_get(this, _treeElement6).overloaded()
                };
                cssLength.append(valueElement);
                var onValueChanged = function(event) {
                    var data = event.data;
                    valueElement.textContent = data.value;
                    _class_private_field_get(_this, _treeElement6).parentPane().setEditingStyle(true);
                    void _class_private_field_get(_this, _treeElement6).applyStyleText(_class_private_field_get(_this, _treeElement6).renderedPropertyText(), false);
                };
                var onDraggingFinished = function() {
                    _class_private_field_get(_this, _treeElement6).parentPane().setEditingStyle(false);
                };
                cssLength.addEventListener('valuechanged', onValueChanged);
                cssLength.addEventListener('draggingfinished', onDraggingFinished);
                return [
                    cssLength
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.LengthMatcher();
            }
        }
    ]);
    return LengthRenderer;
}();
function decorateAnchorForAnchorLink(container, treeElement, options) {
    return _decorateAnchorForAnchorLink.apply(this, arguments);
}
function _decorateAnchorForAnchorLink() {
    _decorateAnchorForAnchorLink = _async_to_generator(function(container, treeElement, options) {
        var _treeElement_node, _ref, anchorNode, link;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (_treeElement_node = treeElement.node()) === null || _treeElement_node === void 0 ? void 0 : _treeElement_node.getAnchorBySpecifier(options.identifier)
                    ];
                case 1:
                    anchorNode = (_ref = _state.sent()) !== null && _ref !== void 0 ? _ref : undefined;
                    link = new _components_components_js__WEBPACK_IMPORTED_MODULE_14__.AnchorFunctionLinkSwatch.AnchorFunctionLinkSwatch({
                        identifier: options.identifier,
                        anchorNode: anchorNode,
                        needsSpace: options.needsSpace,
                        onLinkActivate: function() {
                            if (!anchorNode) {
                                return;
                            }
                            void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(anchorNode, false);
                        },
                        onMouseEnter: function() {
                            anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.highlight();
                        },
                        onMouseLeave: function() {
                            _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
                        }
                    });
                    container.removeChildren();
                    container.appendChild(link);
                    return [
                        2
                    ];
            }
        });
    });
    return _decorateAnchorForAnchorLink.apply(this, arguments);
}
var _treeElement7 = /*#__PURE__*/ new WeakMap(), _decorateAnchor = /*#__PURE__*/ new WeakSet();
var AnchorFunctionRenderer = /*#__PURE__*/ function() {
    "use strict";
    function AnchorFunctionRenderer(treeElement) {
        _class_call_check(this, AnchorFunctionRenderer);
        _class_private_method_init(this, _decorateAnchor);
        _class_private_field_init(this, _treeElement7, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement7, treeElement);
    }
    _create_class(AnchorFunctionRenderer, [
        {
            key: "anchorDecoratedForTest",
            value: function anchorDecoratedForTest() {}
        },
        {
            key: "render",
            value: function render(match, context) {
                var content = document.createElement('span');
                content.appendChild(document.createTextNode("".concat(match.functionName, "(")));
                var firstArgText = match.matching.ast.text(match.args[0]);
                var hasDashedIdentifier = firstArgText.startsWith('--');
                var linkContainer = document.createElement('span');
                if (hasDashedIdentifier) {
                    linkContainer.textContent = "".concat(firstArgText, " ");
                }
                content.appendChild(linkContainer);
                var remainingArgsContainer = content.appendChild(document.createElement('span'));
                if (hasDashedIdentifier) {
                    _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.args.slice(1), context, remainingArgsContainer);
                } else {
                    _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderInto(match.args, context, remainingArgsContainer);
                }
                void _class_private_method_get(this, _decorateAnchor, decorateAnchor).call(this, linkContainer, hasDashedIdentifier ? firstArgText : undefined);
                content.appendChild(document.createTextNode(')'));
                return [
                    content
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.AnchorFunctionMatcher();
            }
        }
    ]);
    return AnchorFunctionRenderer;
}();
function decorateAnchor(container, identifier) {
    return _decorateAnchor1.apply(this, arguments);
}
function _decorateAnchor1() {
    _decorateAnchor1 = _async_to_generator(function(container, identifier) {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        decorateAnchorForAnchorLink(container, _class_private_field_get(this, _treeElement7), {
                            identifier: identifier,
                            needsSpace: true
                        })
                    ];
                case 1:
                    _state.sent();
                    this.anchorDecoratedForTest();
                    return [
                        2
                    ];
            }
        });
    });
    return _decorateAnchor1.apply(this, arguments);
}
var _treeElement8 = /*#__PURE__*/ new WeakMap();
var PositionAnchorRenderer = /*#__PURE__*/ function() {
    "use strict";
    function PositionAnchorRenderer(treeElement) {
        _class_call_check(this, PositionAnchorRenderer);
        _class_private_field_init(this, _treeElement8, {
            writable: true,
            value: void 0
        });
        _class_private_field_set(this, _treeElement8, treeElement);
    }
    _create_class(PositionAnchorRenderer, [
        {
            key: "anchorDecoratedForTest",
            value: function anchorDecoratedForTest() {}
        },
        {
            key: "render",
            value: function render(match) {
                var _this = this;
                var content = document.createElement('span');
                content.appendChild(document.createTextNode(match.text));
                void decorateAnchorForAnchorLink(content, _class_private_field_get(this, _treeElement8), {
                    identifier: match.text,
                    needsSpace: false
                }).then(function() {
                    return _this.anchorDecoratedForTest();
                });
                return [
                    content
                ];
            }
        },
        {
            key: "matcher",
            value: function matcher() {
                return new _PropertyMatchers_js__WEBPACK_IMPORTED_MODULE_17__.PositionAnchorMatcher();
            }
        }
    ]);
    return PositionAnchorRenderer;
}();
var _parentSection = /*#__PURE__*/ new WeakMap(), _propertyTextFromSource = /*#__PURE__*/ new WeakMap(), _getRegisteredPropertyDetails = /*#__PURE__*/ new WeakSet(), // Resolves a CSS expression to its computed value with `var()` calls updated.
// Still returns the string even when a `var()` call is not resolved.
_computeCSSExpression = /*#__PURE__*/ new WeakSet(), _startEditing = /*#__PURE__*/ new WeakSet(), /** @returns Selection offset relative to `element` */ _selectionLeftOffset = /*#__PURE__*/ new WeakSet();
var StylePropertyTreeElement = /*#__PURE__*/ function(_UI_TreeOutline_TreeElement) {
    "use strict";
    _inherits(StylePropertyTreeElement, _UI_TreeOutline_TreeElement);
    var _super = _create_super(StylePropertyTreeElement);
    function StylePropertyTreeElement(param) {
        var stylesPane = param.stylesPane, section = param.section, matchedStyles = param.matchedStyles, property = param.property, isShorthand = param.isShorthand, inherited = param.inherited, overloaded = param.overloaded, newProperty = param.newProperty;
        _class_call_check(this, StylePropertyTreeElement);
        var _this;
        // Pass an empty title, the title gets made later in onattach.
        var jslogContext = property.name.startsWith('--') ? 'custom-property' : property.name;
        _this = _super.call(this, '', isShorthand, jslogContext);
        _class_private_method_init(_assert_this_initialized(_this), _getRegisteredPropertyDetails);
        _class_private_method_init(_assert_this_initialized(_this), _computeCSSExpression);
        _class_private_method_init(_assert_this_initialized(_this), _startEditing);
        _class_private_method_init(_assert_this_initialized(_this), _selectionLeftOffset);
        _define_property(_assert_this_initialized(_this), "style", void 0);
        _define_property(_assert_this_initialized(_this), "matchedStylesInternal", void 0);
        _define_property(_assert_this_initialized(_this), "property", void 0);
        _define_property(_assert_this_initialized(_this), "inheritedInternal", void 0);
        _define_property(_assert_this_initialized(_this), "overloadedInternal", void 0);
        _define_property(_assert_this_initialized(_this), "parentPaneInternal", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _parentSection, {
            writable: true,
            value: void 0
        });
        _define_property(_assert_this_initialized(_this), "isShorthand", void 0);
        _define_property(_assert_this_initialized(_this), "applyStyleThrottler", void 0);
        _define_property(_assert_this_initialized(_this), "newProperty", void 0);
        _define_property(_assert_this_initialized(_this), "expandedDueToFilter", void 0);
        _define_property(_assert_this_initialized(_this), "valueElement", void 0);
        _define_property(_assert_this_initialized(_this), "nameElement", void 0);
        _define_property(_assert_this_initialized(_this), "expandElement", void 0);
        _define_property(_assert_this_initialized(_this), "originalPropertyText", void 0);
        _define_property(_assert_this_initialized(_this), "hasBeenEditedIncrementally", void 0);
        _define_property(_assert_this_initialized(_this), "prompt", void 0);
        _define_property(_assert_this_initialized(_this), "lastComputedValue", void 0);
        _define_property(_assert_this_initialized(_this), "computedStyles", null);
        _define_property(_assert_this_initialized(_this), "parentsComputedStyles", null);
        _define_property(_assert_this_initialized(_this), "contextForTest", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _propertyTextFromSource, {
            writable: true,
            value: void 0
        });
        _this.style = property.ownerStyle;
        _this.matchedStylesInternal = matchedStyles;
        _this.property = property;
        _this.inheritedInternal = inherited;
        _this.overloadedInternal = overloaded;
        _this.selectable = false;
        _this.parentPaneInternal = stylesPane;
        _class_private_field_set(_assert_this_initialized(_this), _parentSection, section);
        _this.isShorthand = isShorthand;
        _this.applyStyleThrottler = new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Throttler.Throttler(0);
        _this.newProperty = newProperty;
        if (_this.newProperty) {
            _this.listItemElement.textContent = '';
        }
        _this.expandedDueToFilter = false;
        _this.valueElement = null;
        _this.nameElement = null;
        _this.expandElement = null;
        _this.originalPropertyText = '';
        _this.hasBeenEditedIncrementally = false;
        _this.prompt = null;
        _this.lastComputedValue = null;
        _class_private_field_set(_assert_this_initialized(_this), _propertyTextFromSource, property.propertyText || '');
        return _this;
    }
    _create_class(StylePropertyTreeElement, [
        {
            key: "matchedStyles",
            value: function matchedStyles() {
                return this.matchedStylesInternal;
            }
        },
        {
            key: "editable",
            value: function editable() {
                var isLonghandInsideShorthand = _instanceof(this.parent, StylePropertyTreeElement) && this.parent.isShorthand;
                var hasSourceData = Boolean(this.style.styleSheetId && this.style.range);
                return !isLonghandInsideShorthand && hasSourceData;
            }
        },
        {
            key: "inherited",
            value: function inherited() {
                return this.inheritedInternal;
            }
        },
        {
            key: "overloaded",
            value: function overloaded() {
                return this.overloadedInternal;
            }
        },
        {
            key: "setOverloaded",
            value: function setOverloaded(x) {
                if (x === this.overloadedInternal) {
                    return;
                }
                this.overloadedInternal = x;
                this.updateState();
            }
        },
        {
            key: "setComputedStyles",
            value: function setComputedStyles(computedStyles) {
                this.computedStyles = computedStyles;
            }
        },
        {
            key: "getComputedStyle",
            value: function getComputedStyle(property) {
                var _this_computedStyles;
                var _this_computedStyles_get;
                return (_this_computedStyles_get = (_this_computedStyles = this.computedStyles) === null || _this_computedStyles === void 0 ? void 0 : _this_computedStyles.get(property)) !== null && _this_computedStyles_get !== void 0 ? _this_computedStyles_get : null;
            }
        },
        {
            key: "setParentsComputedStyles",
            value: function setParentsComputedStyles(parentsComputedStyles) {
                this.parentsComputedStyles = parentsComputedStyles;
            }
        },
        {
            key: "name",
            get: function get() {
                return this.property.name;
            }
        },
        {
            key: "value",
            get: function get() {
                return this.property.value;
            }
        },
        {
            key: "updateFilter",
            value: function updateFilter() {
                var regex = this.parentPaneInternal.filterRegex();
                var matches = regex !== null && (regex.test(this.property.name) || regex.test(this.property.value));
                this.listItemElement.classList.toggle('filter-match', matches);
                void this.onpopulate();
                var hasMatchingChildren = false;
                for(var i = 0; i < this.childCount(); ++i){
                    var child = this.childAt(i);
                    if (!child || child && !child.updateFilter()) {
                        continue;
                    }
                    hasMatchingChildren = true;
                }
                if (!regex) {
                    if (this.expandedDueToFilter) {
                        this.collapse();
                    }
                    this.expandedDueToFilter = false;
                } else if (hasMatchingChildren && !this.expanded) {
                    this.expand();
                    this.expandedDueToFilter = true;
                } else if (!hasMatchingChildren && this.expanded && this.expandedDueToFilter) {
                    this.collapse();
                    this.expandedDueToFilter = false;
                }
                return matches;
            }
        },
        {
            key: "renderedPropertyText",
            value: function renderedPropertyText() {
                if (!this.nameElement || !this.valueElement) {
                    return '';
                }
                return this.nameElement.textContent + ': ' + this.valueElement.textContent;
            }
        },
        {
            key: "updateState",
            value: function updateState() {
                if (!this.listItemElement) {
                    return;
                }
                if (this.style.isPropertyImplicit(this.name)) {
                    this.listItemElement.classList.add('implicit');
                } else {
                    this.listItemElement.classList.remove('implicit');
                }
                var hasIgnorableError = !this.property.parsedOk && _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.StylesSidebarPane.ignoreErrorsForProperty(this.property);
                if (hasIgnorableError) {
                    this.listItemElement.classList.add('has-ignorable-error');
                } else {
                    this.listItemElement.classList.remove('has-ignorable-error');
                }
                if (this.inherited()) {
                    this.listItemElement.classList.add('inherited');
                } else {
                    this.listItemElement.classList.remove('inherited');
                }
                if (this.overloaded()) {
                    this.listItemElement.classList.add('overloaded');
                } else {
                    this.listItemElement.classList.remove('overloaded');
                }
                if (this.property.disabled) {
                    this.listItemElement.classList.add('disabled');
                } else {
                    this.listItemElement.classList.remove('disabled');
                }
                this.listItemElement.classList.toggle('changed', this.isPropertyChanged(this.property));
            }
        },
        {
            key: "node",
            value: function node() {
                return this.parentPaneInternal.node();
            }
        },
        {
            key: "parentPane",
            value: function parentPane() {
                return this.parentPaneInternal;
            }
        },
        {
            key: "section",
            value: function section() {
                return _class_private_field_get(this, _parentSection);
            }
        },
        {
            key: "updatePane",
            value: function updatePane() {
                _class_private_field_get(this, _parentSection).refreshUpdate(this);
            }
        },
        {
            key: "toggleDisabled",
            value: function toggleDisabled(disabled) {
                var _this = this;
                return _async_to_generator(function() {
                    var oldStyleRange, success;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                oldStyleRange = _this.style.range;
                                if (!oldStyleRange) {
                                    return [
                                        2
                                    ];
                                }
                                _this.parentPaneInternal.setUserOperation(true);
                                return [
                                    4,
                                    _this.property.setDisabled(disabled)
                                ];
                            case 1:
                                success = _state.sent();
                                _this.parentPaneInternal.setUserOperation(false);
                                if (!success) {
                                    return [
                                        2
                                    ];
                                }
                                _this.matchedStylesInternal.resetActiveProperties();
                                _this.updatePane();
                                _this.styleTextAppliedForTest();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "isPropertyChanged",
            value: function isPropertyChanged(property) {
                if (!_core_root_root_js__WEBPACK_IMPORTED_MODULE_4__.Runtime.experiments.isEnabled("styles-pane-css-changes" /* Root.Runtime.ExperimentName.STYLES_PANE_CSS_CHANGES */ )) {
                    return false;
                }
                // Check local cache first, then check against diffs from the workspace.
                return _class_private_field_get(this, _propertyTextFromSource) !== property.propertyText || this.parentPane().isPropertyChanged(property);
            }
        },
        {
            key: "onpopulate",
            value: function onpopulate() {
                var _this = this;
                return _async_to_generator(function() {
                    var longhandProperties, leadingProperties, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;
                    return _ts_generator(this, function(_state) {
                        // Only populate once and if this property is a shorthand.
                        if (_this.childCount() || !_this.isShorthand) {
                            return [
                                2
                            ];
                        }
                        longhandProperties = _this.property.getLonghandProperties();
                        leadingProperties = _this.style.leadingProperties();
                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            _loop = function() {
                                var property = _step.value;
                                var name = property.name;
                                var inherited = false;
                                var overloaded = false;
                                inherited = _class_private_field_get(_this, _parentSection).isPropertyInherited(name);
                                overloaded = _this.matchedStylesInternal.propertyState(property) === "Overloaded" /* SDK.CSSMatchedStyles.PropertyState.Overloaded */ ;
                                var leadingProperty = leadingProperties.find(function(property) {
                                    return property.name === name && property.activeInStyle();
                                });
                                if (leadingProperty) {
                                    overloaded = true;
                                }
                                var item = new StylePropertyTreeElement({
                                    stylesPane: _this.parentPaneInternal,
                                    section: _class_private_field_get(_this, _parentSection),
                                    matchedStyles: _this.matchedStylesInternal,
                                    property: property,
                                    isShorthand: false,
                                    inherited: inherited,
                                    overloaded: overloaded,
                                    newProperty: false
                                });
                                item.setComputedStyles(_this.computedStyles);
                                item.setParentsComputedStyles(_this.parentsComputedStyles);
                                _this.appendChild(item);
                            };
                            for(_iterator = longhandProperties[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        return [
                            2
                        ];
                    });
                })();
            }
        },
        {
            key: "onattach",
            value: function onattach() {
                var _this = this;
                this.updateTitle();
                this.listItemElement.addEventListener('mousedown', function(event) {
                    if (event.button === 0) {
                        parentMap.set(_this.parentPaneInternal, _this);
                    }
                }, false);
                this.listItemElement.addEventListener('mouseup', this.mouseUp.bind(this));
                this.listItemElement.addEventListener('click', function(event) {
                    if (!event.target) {
                        return;
                    }
                    var node = event.target;
                    if (!node.hasSelection() && event.target !== _this.listItemElement) {
                        event.consume(true);
                    }
                });
                // Copy context menu.
                this.listItemElement.addEventListener('contextmenu', this.handleCopyContextMenuEvent.bind(this));
            }
        },
        {
            key: "onexpand",
            value: function onexpand() {
                this.updateExpandElement();
            }
        },
        {
            key: "oncollapse",
            value: function oncollapse() {
                this.updateExpandElement();
            }
        },
        {
            key: "updateExpandElement",
            value: function updateExpandElement() {
                if (!this.expandElement) {
                    return;
                }
                if (this.expanded) {
                    this.expandElement.name = 'triangle-down';
                } else {
                    this.expandElement.name = 'triangle-right';
                }
            }
        },
        {
            key: "getVariablePopoverContents",
            value: function getVariablePopoverContents(variableName, computedValue) {
                return new _components_components_js__WEBPACK_IMPORTED_MODULE_14__.CSSVariableValueView.CSSVariableValueView({
                    variableName: variableName,
                    value: computedValue !== null && computedValue !== void 0 ? computedValue : undefined,
                    details: _class_private_method_get(this, _getRegisteredPropertyDetails, getRegisteredPropertyDetails).call(this, variableName)
                });
            }
        },
        {
            key: "updateTitleIfComputedValueChanged",
            value: function updateTitleIfComputedValueChanged() {
                var computedValue = _class_private_method_get(this, _computeCSSExpression, computeCSSExpression).call(this, this.property.ownerStyle, this.property.value);
                if (computedValue === this.lastComputedValue) {
                    return;
                }
                this.lastComputedValue = computedValue;
                this.innerUpdateTitle();
            }
        },
        {
            key: "updateTitle",
            value: function updateTitle() {
                this.lastComputedValue = _class_private_method_get(this, _computeCSSExpression, computeCSSExpression).call(this, this.property.ownerStyle, this.property.value);
                this.innerUpdateTitle();
            }
        },
        {
            key: "innerUpdateTitle",
            value: function innerUpdateTitle() {
                var _this = this;
                this.updateState();
                if (this.isExpandable()) {
                    this.expandElement = _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_8__.Icon.create('triangle-right', 'expand-icon');
                    this.expandElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.expand().track({
                        click: true
                    })));
                }
                var renderers = this.property.parsedOk ? [
                    new VariableRenderer(this, this.style),
                    new ColorRenderer(this),
                    new ColorMixRenderer(this.parentPaneInternal),
                    new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.URLRenderer(this.style.parentRule, this.node()),
                    new AngleRenderer(this),
                    new LinkableNameRenderer(this),
                    new BezierRenderer(this),
                    new _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.StringRenderer(),
                    new ShadowRenderer(this),
                    new FontRenderer(this),
                    new LightDarkColorRenderer(this),
                    new GridTemplateRenderer(),
                    new LinearGradientRenderer(),
                    new AnchorFunctionRenderer(this),
                    new PositionAnchorRenderer(this)
                ] : [];
                if (!_core_root_root_js__WEBPACK_IMPORTED_MODULE_4__.Runtime.experiments.isEnabled('css-type-component-length-deprecate') && this.property.parsedOk) {
                    renderers.push(new LengthRenderer(this));
                }
                this.listItemElement.removeChildren();
                this.valueElement = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderValueElement(this.name, this.value, renderers);
                this.nameElement = _PropertyRenderer_js__WEBPACK_IMPORTED_MODULE_18__.Renderer.renderNameElement(this.name);
                if (this.property.name.startsWith('--') && this.nameElement) {
                    this.parentPaneInternal.addPopover(this.nameElement, {
                        contents: function() {
                            var _this_matchedStylesInternal_computeCSSVariable;
                            var _this_matchedStylesInternal_computeCSSVariable_value;
                            return _this.getVariablePopoverContents(_this.property.name, (_this_matchedStylesInternal_computeCSSVariable_value = (_this_matchedStylesInternal_computeCSSVariable = _this.matchedStylesInternal.computeCSSVariable(_this.style, _this.property.name)) === null || _this_matchedStylesInternal_computeCSSVariable === void 0 ? void 0 : _this_matchedStylesInternal_computeCSSVariable.value) !== null && _this_matchedStylesInternal_computeCSSVariable_value !== void 0 ? _this_matchedStylesInternal_computeCSSVariable_value : null);
                        },
                        jslogContext: 'elements.css-var'
                    });
                }
                if (!this.treeOutline) {
                    return;
                }
                var indent = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').get();
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.UIUtils.createTextChild(this.listItemElement.createChild('span', 'styles-clipboard-only'), indent.repeat(this.section().nestingLevel + 1) + (this.property.disabled ? '/* ' : ''));
                if (this.nameElement) {
                    this.listItemElement.appendChild(this.nameElement);
                }
                if (this.valueElement) {
                    var lineBreakValue = this.valueElement.firstElementChild && this.valueElement.firstElementChild.tagName === 'BR';
                    var separator = lineBreakValue ? ':' : ': ';
                    this.listItemElement.createChild('span', 'styles-name-value-separator').textContent = separator;
                    if (this.expandElement) {
                        this.listItemElement.appendChild(this.expandElement);
                    }
                    this.listItemElement.appendChild(this.valueElement);
                    var semicolon = this.listItemElement.createChild('span', 'styles-semicolon');
                    semicolon.textContent = ';';
                    semicolon.onmouseup = this.mouseUp.bind(this);
                    if (this.property.disabled) {
                        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.UIUtils.createTextChild(this.listItemElement.createChild('span', 'styles-clipboard-only'), ' */');
                    }
                }
                if (this.valueElement && _class_private_field_get(this, _parentSection).editable && this.property.name === 'display') {
                    var propertyValue = this.property.trimmedValueWithoutImportant();
                    var isFlex = propertyValue === 'flex' || propertyValue === 'inline-flex';
                    var isGrid = propertyValue === 'grid' || propertyValue === 'inline-grid';
                    if (isFlex || isGrid) {
                        var key = "".concat(_class_private_field_get(this, _parentSection).getSectionIdx(), "_").concat(_class_private_field_get(this, _parentSection).nextEditorTriggerButtonIdx);
                        var button = _StyleEditorWidget_js__WEBPACK_IMPORTED_MODULE_19__.StyleEditorWidget.createTriggerButton(this.parentPaneInternal, _class_private_field_get(this, _parentSection), isFlex ? FlexboxEditor : GridEditor, isFlex ? i18nString(UIStrings.flexboxEditorButton) : i18nString(UIStrings.gridEditorButton), key);
                        button.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.showStyleEditor().track({
                            click: true
                        }).context(isFlex ? 'flex' : 'grid')));
                        _class_private_field_update(this, _parentSection).value.nextEditorTriggerButtonIdx++;
                        button.addEventListener('click', function() {
                            _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.swatchActivated(isFlex ? 6 /* Host.UserMetrics.SwatchType.Flex */  : 5 /* Host.UserMetrics.SwatchType.Grid */ );
                        });
                        this.listItemElement.appendChild(button);
                        var helper = this.parentPaneInternal.swatchPopoverHelper();
                        if (helper.isShowing(_StyleEditorWidget_js__WEBPACK_IMPORTED_MODULE_19__.StyleEditorWidget.instance()) && _StyleEditorWidget_js__WEBPACK_IMPORTED_MODULE_19__.StyleEditorWidget.instance().getTriggerKey() === key) {
                            helper.setAnchorElement(button);
                        }
                    }
                }
                if (this.property.parsedOk) {
                    this.updateAuthoringHint();
                } else {
                    // Avoid having longhands under an invalid shorthand.
                    this.listItemElement.classList.add('not-parsed-ok');
                    var registrationDetails = _class_private_method_get(this, _getRegisteredPropertyDetails, getRegisteredPropertyDetails).call(this, this.property.name);
                    var tooltip = registrationDetails ? new _components_components_js__WEBPACK_IMPORTED_MODULE_14__.CSSVariableValueView.CSSVariableParserError(registrationDetails) : null;
                    // Add a separate exclamation mark IMG element with a tooltip.
                    this.listItemElement.insertBefore(this.parentPaneInternal.createExclamationMark(this.property, tooltip), this.listItemElement.firstChild);
                    // When the property is valid but the property value is invalid,
                    // add line-through only to the property value.
                    var invalidPropertyValue = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().isCSSPropertyName(this.property.name);
                    if (invalidPropertyValue) {
                        this.listItemElement.classList.add('invalid-property-value');
                    }
                }
                if (!this.property.activeInStyle()) {
                    this.listItemElement.classList.add('inactive');
                }
                this.updateFilter();
                if (this.property.parsedOk && this.parent && this.parent.root) {
                    var enabledCheckboxElement = document.createElement('input');
                    enabledCheckboxElement.classList.add('enabled-button', 'small');
                    enabledCheckboxElement.type = 'checkbox';
                    enabledCheckboxElement.checked = !this.property.disabled;
                    enabledCheckboxElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.toggle().track({
                        click: true
                    })));
                    enabledCheckboxElement.addEventListener('mousedown', function(event) {
                        return event.consume();
                    }, false);
                    enabledCheckboxElement.addEventListener('click', function(event) {
                        void _this.toggleDisabled(!_this.property.disabled);
                        event.consume();
                    }, false);
                    if (this.nameElement && this.valueElement) {
                        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.ARIAUtils.setLabel(enabledCheckboxElement, "".concat(this.nameElement.textContent, " ").concat(this.valueElement.textContent));
                    }
                    var copyIcon = _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_8__.Icon.create('copy', 'copy');
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.Tooltip.Tooltip.install(copyIcon, i18nString(UIStrings.copyDeclaration));
                    copyIcon.addEventListener('click', function() {
                        var propertyText = "".concat(_this.property.name, ": ").concat(_this.property.value, ";");
                        _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(propertyText);
                        _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(1 /* Host.UserMetrics.StyleTextCopied.DeclarationViaChangedLine */ );
                    });
                    this.listItemElement.append(copyIcon);
                    this.listItemElement.insertBefore(enabledCheckboxElement, this.listItemElement.firstChild);
                }
            }
        },
        {
            key: "updateAuthoringHint",
            value: function updateAuthoringHint() {
                var _this_node, _this_node1;
                this.listItemElement.classList.remove('inactive-property');
                var existingElement = this.listItemElement.querySelector('.hint');
                if (existingElement) {
                    var _existingElement_closest;
                    activeHints.delete(existingElement);
                    existingElement === null || existingElement === void 0 ? void 0 : (_existingElement_closest = existingElement.closest('.hint-wrapper')) === null || _existingElement_closest === void 0 ? void 0 : _existingElement_closest.remove();
                }
                var propertyName = this.property.name;
                if (!_CSSRuleValidator_js__WEBPACK_IMPORTED_MODULE_15__.cssRuleValidatorsMap.has(propertyName)) {
                    return;
                }
                // Different rules apply to SVG nodes altogether. We currently don't have SVG-specific hints.
                if ((_this_node = this.node()) === null || _this_node === void 0 ? void 0 : _this_node.isSVGNode()) {
                    return;
                }
                var cssModel = this.parentPaneInternal.cssModel();
                var fontFaces = (cssModel === null || cssModel === void 0 ? void 0 : cssModel.fontFaces()) || [];
                var localName = (_this_node1 = this.node()) === null || _this_node1 === void 0 ? void 0 : _this_node1.localName();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = (_CSSRuleValidator_js__WEBPACK_IMPORTED_MODULE_15__.cssRuleValidatorsMap.get(propertyName) || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var validator = _step.value;
                        var hint = validator.getHint(propertyName, this.computedStyles || undefined, this.parentsComputedStyles || undefined, localName === null || localName === void 0 ? void 0 : localName.toLowerCase(), fontFaces);
                        if (hint) {
                            _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.cssHintShown(validator.getMetricType());
                            var wrapper = document.createElement('span');
                            wrapper.classList.add('hint-wrapper');
                            var hintIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_8__.Icon.Icon();
                            hintIcon.data = {
                                iconName: 'info',
                                color: 'var(--icon-default)',
                                width: '14px',
                                height: '14px'
                            };
                            hintIcon.classList.add('hint');
                            wrapper.append(hintIcon);
                            activeHints.set(hintIcon, hint);
                            this.listItemElement.append(wrapper);
                            this.listItemElement.classList.add('inactive-property');
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "mouseUp",
            value: function mouseUp(event) {
                var activeTreeElement = parentMap.get(this.parentPaneInternal);
                parentMap.delete(this.parentPaneInternal);
                if (!activeTreeElement) {
                    return;
                }
                if (this.listItemElement.hasSelection()) {
                    return;
                }
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.UIUtils.isBeingEdited(event.target)) {
                    return;
                }
                if (_instanceof(event.composedPath()[0], HTMLButtonElement)) {
                    return;
                }
                event.consume(true);
                if (event.target === this.listItemElement) {
                    return;
                }
                var selectedElement = event.target;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.KeyboardShortcut.KeyboardShortcut.eventHasCtrlEquivalentKey(event) && _class_private_field_get(this, _parentSection).navigable) {
                    this.navigateToSource(selectedElement);
                    return;
                }
                if (this.expandElement && selectedElement === this.expandElement) {
                    return;
                }
                if (!_class_private_field_get(this, _parentSection).editable) {
                    return;
                }
                selectedElement = selectedElement.enclosingNodeOrSelfWithClass('webkit-css-property') || selectedElement.enclosingNodeOrSelfWithClass('value') || selectedElement.enclosingNodeOrSelfWithClass('styles-semicolon');
                if (!selectedElement || selectedElement === this.nameElement) {
                    _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.logClick(this.nameElement, event);
                    this.startEditingName();
                } else {
                    _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_12__.logClick(this.valueElement, event);
                    this.startEditingValue();
                }
            }
        },
        {
            key: "handleContextMenuEvent",
            value: function handleContextMenuEvent(context, event) {
                var contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.ContextMenu.ContextMenu(event);
                if (this.property.parsedOk && this.parent && this.parent.root) {
                    var sectionIndex = this.parentPaneInternal.focusedSectionIndex();
                    var _this = this;
                    contextMenu.defaultSection().appendCheckboxItem(i18nString(UIStrings.togglePropertyAndContinueEditing), /*#__PURE__*/ _async_to_generator(function() {
                        var propertyIndex;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    if (!_this.treeOutline) return [
                                        3,
                                        2
                                    ];
                                    propertyIndex = _this.treeOutline.rootElement().indexOfChild(_this);
                                    // order matters here: this.editingCancelled may invalidate this.treeOutline.
                                    _this.editingCancelled(null, context);
                                    return [
                                        4,
                                        _this.toggleDisabled(!_this.property.disabled)
                                    ];
                                case 1:
                                    _state.sent();
                                    event.consume();
                                    _this.parentPaneInternal.continueEditingElement(sectionIndex, propertyIndex);
                                    _state.label = 2;
                                case 2:
                                    return [
                                        2
                                    ];
                            }
                        });
                    }), {
                        checked: !this.property.disabled,
                        jslogContext: 'toggle-property-and-continue-editing'
                    });
                }
                var revealCallback = this.navigateToSource.bind(this);
                contextMenu.defaultSection().appendItem(i18nString(UIStrings.revealInSourcesPanel), revealCallback, {
                    jslogContext: 'reveal-in-sources-panel'
                });
                void contextMenu.show();
            }
        },
        {
            key: "handleCopyContextMenuEvent",
            value: function handleCopyContextMenuEvent(event) {
                var target = event.target;
                if (!target) {
                    return;
                }
                var contextMenu = this.createCopyContextMenu(event);
                void contextMenu.show();
            }
        },
        {
            key: "createCopyContextMenu",
            value: function createCopyContextMenu(event) {
                var _this = this;
                var contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.ContextMenu.ContextMenu(event);
                contextMenu.headerSection().appendItem(i18nString(UIStrings.copyDeclaration), function() {
                    var propertyText = "".concat(_this.property.name, ": ").concat(_this.property.value, ";");
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(propertyText);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(3 /* Host.UserMetrics.StyleTextCopied.DeclarationViaContextMenu */ );
                }, {
                    jslogContext: 'copy-declaration'
                });
                contextMenu.headerSection().appendItem(i18nString(UIStrings.copyProperty), function() {
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(_this.property.name);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(4 /* Host.UserMetrics.StyleTextCopied.PropertyViaContextMenu */ );
                }, {
                    jslogContext: 'copy-property'
                });
                contextMenu.headerSection().appendItem(i18nString(UIStrings.copyValue), function() {
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(_this.property.value);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(5 /* Host.UserMetrics.StyleTextCopied.ValueViaContextMenu */ );
                }, {
                    jslogContext: 'copy-value'
                });
                contextMenu.headerSection().appendItem(i18nString(UIStrings.copyRule), function() {
                    var ruleText = _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.StylesSidebarPane.formatLeadingProperties(_class_private_field_get(_this, _parentSection)).ruleText;
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(ruleText);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(7 /* Host.UserMetrics.StyleTextCopied.RuleViaContextMenu */ );
                }, {
                    jslogContext: 'copy-rule'
                });
                contextMenu.headerSection().appendItem(i18nString(UIStrings.copyCssDeclarationAsJs), this.copyCssDeclarationAsJs.bind(this), {
                    jslogContext: 'copy-css-declaration-as-js'
                });
                contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyAllDeclarations), function() {
                    var allDeclarationText = _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.StylesSidebarPane.formatLeadingProperties(_class_private_field_get(_this, _parentSection)).allDeclarationText;
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allDeclarationText);
                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(8 /* Host.UserMetrics.StyleTextCopied.AllDeclarationsViaContextMenu */ );
                }, {
                    jslogContext: 'copy-all-declarations'
                });
                contextMenu.clipboardSection().appendItem(i18nString(UIStrings.copyAllCssDeclarationsAsJs), this.copyAllCssDeclarationAsJs.bind(this), {
                    jslogContext: 'copy-all-css-declarations-as-js'
                });
                var _this1 = this;
                // TODO(changhaohan): conditionally add this item only when there are changes to copy
                contextMenu.defaultSection().appendItem(i18nString(UIStrings.copyAllCSSChanges), /*#__PURE__*/ _async_to_generator(function() {
                    var allChanges;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this1.parentPane().getFormattedChanges()
                                ];
                            case 1:
                                allChanges = _state.sent();
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allChanges);
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(2 /* Host.UserMetrics.StyleTextCopied.AllChangesViaStylesPane */ );
                                return [
                                    2
                                ];
                        }
                    });
                }), {
                    jslogContext: 'copy-all-css-changes'
                });
                contextMenu.footerSection().appendItem(i18nString(UIStrings.viewComputedValue), function() {
                    void _this.viewComputedValue();
                }, {
                    jslogContext: 'view-computed-value'
                });
                return contextMenu;
            }
        },
        {
            key: "viewComputedValue",
            value: function viewComputedValue() {
                var _this = this;
                return _async_to_generator(function() {
                    var computedStyleWidget, propertyNamePattern, regex;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                computedStyleWidget = _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_16__.ElementsPanel.instance().getComputedStyleWidget();
                                if (!!computedStyleWidget.isShowing()) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.ViewManager.ViewManager.instance().showView('Computed')
                                ];
                            case 1:
                                _state.sent();
                                _state.label = 2;
                            case 2:
                                propertyNamePattern = '';
                                if (_this.isShorthand) {
                                    propertyNamePattern = '^' + _this.property.name + '-';
                                } else {
                                    propertyNamePattern = '^' + _this.property.name + '$';
                                }
                                regex = new RegExp(propertyNamePattern, 'i');
                                return [
                                    4,
                                    computedStyleWidget.filterComputedStyles(regex)
                                ];
                            case 3:
                                _state.sent();
                                computedStyleWidget.input.setValue(_this.property.name);
                                computedStyleWidget.input.element.focus();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "copyCssDeclarationAsJs",
            value: function copyCssDeclarationAsJs() {
                var cssDeclarationValue = (0,_StylePropertyUtils_js__WEBPACK_IMPORTED_MODULE_20__.getCssDeclarationAsJavascriptProperty)(this.property);
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(cssDeclarationValue);
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(6 /* Host.UserMetrics.StyleTextCopied.DeclarationAsJSViaContextMenu */ );
            }
        },
        {
            key: "copyAllCssDeclarationAsJs",
            value: function copyAllCssDeclarationAsJs() {
                var leadingProperties = _class_private_field_get(this, _parentSection).style().leadingProperties();
                var cssDeclarationsAsJsProperties = leadingProperties.filter(function(property) {
                    return !property.disabled;
                }).map(_StylePropertyUtils_js__WEBPACK_IMPORTED_MODULE_20__.getCssDeclarationAsJavascriptProperty);
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(cssDeclarationsAsJsProperties.join(',\n'));
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(9 /* Host.UserMetrics.StyleTextCopied.AllDeclarationsAsJSViaContextMenu */ );
            }
        },
        {
            key: "navigateToSource",
            value: function navigateToSource(element, omitFocus) {
                if (!_class_private_field_get(this, _parentSection).navigable) {
                    return;
                }
                var propertyNameClicked = element === this.nameElement;
                var uiLocation = _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().propertyUILocation(this.property, propertyNameClicked);
                if (uiLocation) {
                    void _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Revealer.reveal(uiLocation, omitFocus);
                }
            }
        },
        {
            key: "startEditingValue",
            value: function startEditingValue() {
                var context = {
                    expanded: this.expanded,
                    hasChildren: this.isExpandable(),
                    isEditingName: false,
                    originalProperty: this.property,
                    previousContent: this.value
                };
                // Grid definitions are often multiline. Instead of showing the authored text reformat it a little bit nicer.
                if (_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().isGridAreaDefiningProperty(this.name)) {
                    var splitResult = _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__.TextUtils.Utils.splitStringByRegexes(this.value, [
                        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.GridAreaRowRegex
                    ]);
                    context.previousContent = splitResult.map(function(result) {
                        return result.value.trim();
                    }).join('\n');
                }
                _class_private_method_get(this, _startEditing, startEditing).call(this, context);
            }
        },
        {
            key: "startEditingName",
            value: function startEditingName() {
                var context = {
                    expanded: this.expanded,
                    hasChildren: this.isExpandable(),
                    isEditingName: true,
                    originalProperty: this.property,
                    previousContent: this.name.split('\n').map(function(l) {
                        return l.trim();
                    }).join('\n')
                };
                _class_private_method_get(this, _startEditing, startEditing).call(this, context);
            }
        },
        {
            key: "editingNameValueKeyDown",
            value: function editingNameValueKeyDown(context, event) {
                if (event.handled) {
                    return;
                }
                var keyboardEvent = event;
                var target = keyboardEvent.target;
                var result;
                if (keyboardEvent.key === 'Enter' && !keyboardEvent.shiftKey || context.isEditingName && keyboardEvent.key === ' ') {
                    result = 'forward';
                } else if (keyboardEvent.keyCode === _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.KeyboardShortcut.Keys.Esc.code || keyboardEvent.key === _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.KeyboardUtilities.ESCAPE_KEY) {
                    result = 'cancel';
                } else if (!context.isEditingName && this.newProperty && keyboardEvent.keyCode === _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.KeyboardShortcut.Keys.Backspace.code) {
                    // For a new property, when Backspace is pressed at the beginning of new property value, move back to the property name.
                    var selection = target.getComponentSelection();
                    if (selection && selection.isCollapsed && !selection.focusOffset) {
                        event.preventDefault();
                        result = 'backward';
                    }
                } else if (keyboardEvent.key === 'Tab') {
                    result = keyboardEvent.shiftKey ? 'backward' : 'forward';
                    event.preventDefault();
                }
                if (result) {
                    switch(result){
                        case 'cancel':
                            this.editingCancelled(null, context);
                            break;
                        case 'forward':
                        case 'backward':
                            void this.editingCommitted(target.textContent || '', context, result);
                            break;
                    }
                    event.consume();
                    return;
                }
            }
        },
        {
            key: "editingNameValueKeyPress",
            value: function editingNameValueKeyPress(context, event) {
                function shouldCommitValueSemicolon(text, cursorPosition) {
                    // FIXME: should this account for semicolons inside comments?
                    var openQuote = '';
                    for(var i = 0; i < cursorPosition; ++i){
                        var ch = text[i];
                        if (ch === '\\' && openQuote !== '') {
                            ++i;
                        } else if (!openQuote && (ch === '"' || ch === '\'')) {
                            openQuote = ch;
                        } else if (openQuote === ch) {
                            openQuote = '';
                        }
                    }
                    return !openQuote;
                }
                var keyboardEvent = event;
                var target = keyboardEvent.target;
                var keyChar = String.fromCharCode(keyboardEvent.charCode);
                var _$selectionLeftOffset = _class_private_method_get(this, _selectionLeftOffset, selectionLeftOffset).call(this, target);
                var isFieldInputTerminated = context.isEditingName ? keyChar === ':' : keyChar === ';' && _$selectionLeftOffset !== null && shouldCommitValueSemicolon(target.textContent || '', _$selectionLeftOffset);
                if (isFieldInputTerminated) {
                    // Enter or colon (for name)/semicolon outside of string (for value).
                    event.consume(true);
                    void this.editingCommitted(target.textContent || '', context, 'forward');
                    return;
                }
            }
        },
        {
            key: "applyFreeFlowStyleTextEdit",
            value: function applyFreeFlowStyleTextEdit(context) {
                var _this = this;
                return _async_to_generator(function() {
                    var enteredText, valueText, parentNode, isPseudo, lowerValueText;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.prompt || !_this.parentPaneInternal.node()) {
                                    return [
                                        2
                                    ];
                                }
                                enteredText = _this.prompt.text();
                                if (context.isEditingName && enteredText.includes(':')) {
                                    void _this.editingCommitted(enteredText, context, 'forward');
                                    return [
                                        2
                                    ];
                                }
                                valueText = _this.prompt.textWithCurrentSuggestion();
                                if (valueText.includes(';')) {
                                    return [
                                        2
                                    ];
                                }
                                // Prevent destructive side-effects during live-edit. crbug.com/433889
                                parentNode = _this.parentPaneInternal.node();
                                if (parentNode) {
                                    isPseudo = Boolean(parentNode.pseudoType());
                                    if (isPseudo) {
                                        if (_this.name.toLowerCase() === 'content') {
                                            return [
                                                2
                                            ];
                                        }
                                        lowerValueText = valueText.trim().toLowerCase();
                                        if (lowerValueText.startsWith('content:') || lowerValueText === 'display: none') {
                                            return [
                                                2
                                            ];
                                        }
                                    }
                                }
                                if (!context.isEditingName) return [
                                    3,
                                    5
                                ];
                                if (!valueText.includes(':')) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    _this.applyStyleText(valueText, false)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    3,
                                    4
                                ];
                            case 2:
                                if (!_this.hasBeenEditedIncrementally) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    _this.applyOriginalStyle(context)
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                return [
                                    3,
                                    7
                                ];
                            case 5:
                                if (!_this.nameElement) return [
                                    3,
                                    7
                                ];
                                return [
                                    4,
                                    _this.applyStyleText("".concat(_this.nameElement.textContent, ": ").concat(valueText), false)
                                ];
                            case 6:
                                _state.sent();
                                _state.label = 7;
                            case 7:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "kickFreeFlowStyleEditForTest",
            value: function kickFreeFlowStyleEditForTest() {
                var context = this.contextForTest;
                return this.applyFreeFlowStyleTextEdit(context);
            }
        },
        {
            key: "editingEnded",
            value: function editingEnded(context) {
                this.setExpandable(context.hasChildren);
                if (context.expanded) {
                    this.expand();
                }
                var editedElement = context.isEditingName ? this.nameElement : this.valueElement;
                // The proxyElement has been deleted, no need to remove listener.
                if (editedElement && editedElement.parentElement) {
                    editedElement.parentElement.classList.remove('child-editing');
                }
                this.parentPaneInternal.setEditingStyle(false);
            }
        },
        {
            key: "editingCancelled",
            value: function editingCancelled(element, context) {
                this.removePrompt();
                if (this.hasBeenEditedIncrementally) {
                    void this.applyOriginalStyle(context);
                } else if (this.newProperty && this.treeOutline) {
                    this.treeOutline.removeChild(this);
                }
                this.updateTitle();
                // This should happen last, as it clears the info necessary to restore the property value after [Page]Up/Down changes.
                this.editingEnded(context);
            }
        },
        {
            key: "applyOriginalStyle",
            value: function applyOriginalStyle(context) {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.applyStyleText(_this.originalPropertyText, false, context.originalProperty)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "findSibling",
            value: function findSibling(moveDirection) {
                var target = this;
                do {
                    var sibling = moveDirection === 'forward' ? target.nextSibling : target.previousSibling;
                    target = _instanceof(sibling, StylePropertyTreeElement) ? sibling : null;
                }while (target && target.inherited());
                return target;
            }
        },
        {
            key: "editingCommitted",
            value: function editingCommitted(userInput, context, moveDirection) {
                var _this = this;
                return _async_to_generator(function() {
                    var isEditingName, nameElementValue, nameValueEntered, createNewProperty, moveToSelector, isDataPasted, isDirtyViaPaste, isPropertySplitPaste, moveTo, moveToOther, abandonNewProperty, moveToIndex, blankInput, shouldCommitNewProperty, propertyText;
                    /**
         * The Callback to start editing the next/previous property/selector.
         */ function moveToNextCallback(alreadyNew, valueChanged, section) {
                        if (!moveDirection) {
                            this.parentPaneInternal.resetFocus();
                            return;
                        }
                        // User just tabbed through without changes.
                        if (moveTo && moveTo.parent) {
                            if (isEditingName) {
                                moveTo.startEditingValue();
                            } else {
                                moveTo.startEditingName();
                            }
                            return;
                        }
                        // User has made a change then tabbed, wiping all the original treeElements.
                        // Recalculate the new treeElement for the same property we were going to edit next.
                        if (moveTo && !moveTo.parent) {
                            var rootElement = section.propertiesTreeOutline.rootElement();
                            if (moveDirection === 'forward' && blankInput && !isEditingName) {
                                --moveToIndex;
                            }
                            if (moveToIndex >= rootElement.childCount() && !this.newProperty) {
                                createNewProperty = true;
                            } else {
                                var treeElement = moveToIndex >= 0 ? rootElement.childAt(moveToIndex) : null;
                                if (treeElement) {
                                    if (alreadyNew && blankInput) {
                                        if (moveDirection === 'forward') {
                                            treeElement.startEditingName();
                                        } else {
                                            treeElement.startEditingValue();
                                        }
                                    } else if (!isEditingName || isPropertySplitPaste) {
                                        treeElement.startEditingName();
                                    } else {
                                        treeElement.startEditingValue();
                                    }
                                    return;
                                }
                                if (!alreadyNew) {
                                    moveToSelector = true;
                                }
                            }
                        }
                        // Create a new attribute in this section (or move to next editable selector if possible).
                        if (createNewProperty) {
                            if (alreadyNew && !valueChanged && isEditingName !== (moveDirection === 'backward')) {
                                return;
                            }
                            section.addNewBlankProperty().startEditingName();
                            return;
                        }
                        if (abandonNewProperty) {
                            moveTo = this.findSibling(moveDirection);
                            var sectionToEdit = moveTo || moveDirection === 'backward' ? section : section.nextEditableSibling();
                            if (sectionToEdit) {
                                if (sectionToEdit.style().parentRule) {
                                    sectionToEdit.startEditingSelector();
                                } else {
                                    sectionToEdit.moveEditorFromSelector(moveDirection);
                                }
                            }
                            return;
                        }
                        if (moveToSelector) {
                            if (section.style().parentRule) {
                                section.startEditingSelector();
                            } else {
                                section.moveEditorFromSelector(moveDirection);
                            }
                        }
                    }
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.removePrompt();
                                _this.editingEnded(context);
                                isEditingName = context.isEditingName;
                                // If the underlying property has been ripped out, always assume that the value having been entered was
                                // a name-value pair and attempt to process it via the SDK.
                                if (!_this.nameElement || !_this.valueElement) {
                                    return [
                                        2
                                    ];
                                }
                                nameElementValue = _this.nameElement.textContent || '';
                                nameValueEntered = isEditingName && nameElementValue.includes(':') || !_this.property;
                                // Determine where to move to before making changes
                                createNewProperty = false;
                                moveToSelector = false;
                                isDataPasted = typeof context.originalName !== 'undefined';
                                isDirtyViaPaste = isDataPasted && (_this.nameElement.textContent !== context.originalName || _this.valueElement.textContent !== context.originalValue);
                                isPropertySplitPaste = isDataPasted && isEditingName && _this.valueElement.textContent !== context.originalValue;
                                moveTo = _this;
                                moveToOther = isEditingName !== (moveDirection === 'forward');
                                abandonNewProperty = _this.newProperty && !userInput && (moveToOther || isEditingName);
                                if (moveDirection === 'forward' && (!isEditingName || isPropertySplitPaste) || moveDirection === 'backward' && isEditingName) {
                                    moveTo = moveTo.findSibling(moveDirection);
                                    if (!moveTo) {
                                        if (moveDirection === 'forward' && (!_this.newProperty || userInput)) {
                                            createNewProperty = true;
                                        } else if (moveDirection === 'backward') {
                                            moveToSelector = true;
                                        }
                                    }
                                }
                                // Make the Changes and trigger the moveToNextCallback after updating.
                                moveToIndex = -1;
                                if (moveTo !== null && _this.treeOutline) {
                                    moveToIndex = _this.treeOutline.rootElement().indexOfChild(moveTo);
                                }
                                blankInput = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.isWhitespace(userInput);
                                shouldCommitNewProperty = _this.newProperty && (isPropertySplitPaste || moveToOther || !moveDirection && !isEditingName || isEditingName && blankInput || nameValueEntered);
                                if (!((userInput !== context.previousContent || isDirtyViaPaste) && !_this.newProperty || shouldCommitNewProperty)) return [
                                    3,
                                    2
                                ];
                                if (nameValueEntered) {
                                    propertyText = _this.nameElement.textContent;
                                } else if (blankInput || _this.newProperty && _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.isWhitespace(_this.valueElement.textContent || '')) {
                                    propertyText = '';
                                } else {
                                    if (isEditingName) {
                                        propertyText = userInput + ': ' + _this.property.value;
                                    } else {
                                        propertyText = _this.property.name + ': ' + userInput;
                                    }
                                }
                                return [
                                    4,
                                    _this.applyStyleText(propertyText || '', true)
                                ];
                            case 1:
                                _state.sent();
                                moveToNextCallback.call(_this, _this.newProperty, !blankInput, _class_private_field_get(_this, _parentSection));
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                if (isEditingName) {
                                    _this.property.name = userInput;
                                } else {
                                    _this.property.value = userInput;
                                }
                                if (!isDataPasted && !_this.newProperty) {
                                    _this.updateTitle();
                                }
                                moveToNextCallback.call(_this, _this.newProperty, false, _class_private_field_get(_this, _parentSection));
                                _state.label = 3;
                            case 3:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "removePrompt",
            value: function removePrompt() {
                // BUG 53242. This cannot go into editingEnded(), as it should always happen first for any editing outcome.
                if (this.prompt) {
                    this.prompt.detach();
                    this.prompt = null;
                }
            }
        },
        {
            key: "styleTextAppliedForTest",
            value: function styleTextAppliedForTest() {}
        },
        {
            key: "applyStyleText",
            value: function applyStyleText(styleText, majorChange, property) {
                return this.applyStyleThrottler.schedule(this.innerApplyStyleText.bind(this, styleText, majorChange, property));
            }
        },
        {
            key: "innerApplyStyleText",
            value: function innerApplyStyleText(styleText, majorChange, property) {
                var _this = this;
                return _async_to_generator(function() {
                    var oldStyleRange, hasBeenEditedIncrementally, currentNode, overwriteProperty, success, updatedProperty, isPropertyWithinBounds, deleteProperty;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                // this.property might have been nulled at the end of the last innerApplyStyleText
                                if (!_this.treeOutline || !_this.property) {
                                    return [
                                        2
                                    ];
                                }
                                oldStyleRange = _this.style.range;
                                if (!oldStyleRange) {
                                    return [
                                        2
                                    ];
                                }
                                hasBeenEditedIncrementally = _this.hasBeenEditedIncrementally;
                                styleText = styleText.replace(/[\xA0\t]/g, ' ').trim(); // Replace &nbsp; with whitespace.
                                if (!styleText.length && majorChange && _this.newProperty && !hasBeenEditedIncrementally) {
                                    // The user deleted everything and never applied a new property value via Up/Down scrolling/live editing, so remove the tree element and update.
                                    _this.parent && _this.parent.removeChild(_this);
                                    return [
                                        2
                                    ];
                                }
                                currentNode = _this.parentPaneInternal.node();
                                _this.parentPaneInternal.setUserOperation(true);
                                styleText += _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.findUnclosedCssQuote(styleText);
                                styleText += ')'.repeat(_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.countUnmatchedLeftParentheses(styleText));
                                // Append a ";" if the new text does not end in ";".
                                // FIXME: this does not handle trailing comments.
                                if (styleText.length && !/;\s*$/.test(styleText)) {
                                    styleText += ';';
                                }
                                overwriteProperty = !_this.newProperty || hasBeenEditedIncrementally;
                                return [
                                    4,
                                    _this.property.setText(styleText, majorChange, overwriteProperty)
                                ];
                            case 1:
                                success = _state.sent();
                                if (!(hasBeenEditedIncrementally && majorChange && !success)) return [
                                    3,
                                    3
                                ];
                                majorChange = false;
                                return [
                                    4,
                                    _this.property.setText(_this.originalPropertyText, majorChange, overwriteProperty)
                                ];
                            case 2:
                                success = _state.sent();
                                _state.label = 3;
                            case 3:
                                _this.parentPaneInternal.setUserOperation(false);
                                // TODO: using this.property.index to access its containing StyleDeclaration's property will result in
                                // off-by-1 errors when the containing StyleDeclaration's respective property has already been deleted.
                                // These referencing logic needs to be updated to be more robust.
                                updatedProperty = property || _this.style.propertyAt(_this.property.index);
                                isPropertyWithinBounds = _this.property.index < _this.style.allProperties().length;
                                if (!success || !updatedProperty && isPropertyWithinBounds) {
                                    if (majorChange) {
                                        // It did not apply, cancel editing.
                                        if (_this.newProperty) {
                                            _this.treeOutline.removeChild(_this);
                                        } else {
                                            _this.updateTitle();
                                        }
                                    }
                                    _this.styleTextAppliedForTest();
                                    return [
                                        2
                                    ];
                                }
                                if (updatedProperty) {
                                    _this.listItemElement.classList.toggle('changed', _this.isPropertyChanged(updatedProperty));
                                    _this.parentPane().updateChangeStatus();
                                }
                                _this.matchedStylesInternal.resetActiveProperties();
                                _this.hasBeenEditedIncrementally = true;
                                // null check for updatedProperty before setting this.property as the code never expects this.property to be undefined or null.
                                // This occurs when deleting the last index of a StylePropertiesSection as this.style._allProperties array gets updated
                                // before we index it when setting the value for updatedProperty
                                deleteProperty = majorChange && !styleText.length;
                                if (deleteProperty) {
                                    _class_private_field_get(_this, _parentSection).resetToolbars();
                                } else if (!deleteProperty && updatedProperty) {
                                    _this.property = updatedProperty;
                                }
                                if (currentNode === _this.node()) {
                                    _this.updatePane();
                                }
                                _this.styleTextAppliedForTest();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "ondblclick",
            value: function ondblclick() {
                return true; // handled
            }
        },
        {
            key: "isEventWithinDisclosureTriangle",
            value: function isEventWithinDisclosureTriangle(event) {
                return event.target === this.expandElement;
            }
        }
    ]);
    return StylePropertyTreeElement;
} //# sourceMappingURL=StylePropertyTreeElement.js.map
(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.TreeOutline.TreeElement);
function getRegisteredPropertyDetails(variableName) {
    var _this = this;
    var registration = this.matchedStyles().getRegisteredProperty(variableName);
    var goToDefinition = function() {
        return _this.parentPaneInternal.jumpToSection(variableName, _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.REGISTERED_PROPERTY_SECTION_NAME);
    };
    return registration ? {
        registration: registration,
        goToDefinition: goToDefinition
    } : undefined;
}
function computeCSSExpression(style, text) {
    var _this = this;
    var ast = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.tokenizeDeclaration('--unused', text);
    if (!ast) {
        return null;
    }
    var matching = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [
        new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.VariableMatcher(function(match) {
            var _this_matchedStylesInternal_computeCSSVariable;
            var variableValue = (_this_matchedStylesInternal_computeCSSVariable = _this.matchedStylesInternal.computeCSSVariable(style, match.name)) === null || _this_matchedStylesInternal_computeCSSVariable === void 0 ? void 0 : _this_matchedStylesInternal_computeCSSVariable.value;
            if (variableValue !== undefined) {
                return variableValue;
            }
            if (match.fallback.length === 0 || match.matching.hasUnresolvedVarsRange(match.fallback[0], match.fallback[match.fallback.length - 1])) {
                return null;
            }
            return match.matching.getComputedTextRange(match.fallback[0], match.fallback[match.fallback.length - 1]);
        })
    ]);
    var decl = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.ASTUtils.siblings(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSPropertyParser.ASTUtils.declValue(matching.ast.tree));
    return matching.getComputedTextRange(decl[0], decl[decl.length - 1]);
}
function startEditing(context) {
    var _this = this;
    var _selectedElement_parentElement, _selectedElement_parentElement1, _selectedElement_getComponentSelection;
    this.contextForTest = context;
    // FIXME: we don't allow editing of longhand properties under a shorthand right now.
    if (_instanceof(this.parent, StylePropertyTreeElement) && this.parent.isShorthand) {
        return;
    }
    var selectedElement = context.isEditingName ? this.nameElement : this.valueElement;
    if (!selectedElement) {
        return;
    }
    if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.UIUtils.isBeingEdited(selectedElement)) {
        return;
    }
    // Lie about our children to prevent expanding on double click and to collapse shorthands.
    this.setExpandable(false);
    (_selectedElement_parentElement = selectedElement.parentElement) === null || _selectedElement_parentElement === void 0 ? void 0 : _selectedElement_parentElement.classList.add('child-editing');
    selectedElement.textContent = context.previousContent; // remove color swatch and the like
    function pasteHandler(context, event) {
        var clipboardEvent = event;
        var clipboardData = clipboardEvent.clipboardData;
        if (!clipboardData) {
            return;
        }
        var data = clipboardData.getData('Text');
        if (!data) {
            return;
        }
        var colonIdx = data.indexOf(':');
        if (colonIdx < 0) {
            return;
        }
        var name = data.substring(0, colonIdx).trim();
        var value = data.substring(colonIdx + 1).trim();
        event.preventDefault();
        if (typeof context.originalName === 'undefined') {
            if (this.nameElement) {
                context.originalName = this.nameElement.textContent || '';
            }
            if (this.valueElement) {
                context.originalValue = this.valueElement.textContent || '';
            }
        }
        this.property.name = name;
        this.property.value = value;
        if (this.nameElement) {
            this.nameElement.textContent = name;
            this.nameElement.normalize();
        }
        if (this.valueElement) {
            this.valueElement.textContent = value;
            this.valueElement.normalize();
        }
        var target = event.target;
        void this.editingCommitted(target.textContent || '', context, 'forward');
    }
    function blurListener(context, event) {
        var target = event.target;
        var text = target.textContent;
        if (!context.isEditingName) {
            text = this.value || text;
        }
        void this.editingCommitted(text || '', context, '');
    }
    this.originalPropertyText = this.property.propertyText || '';
    this.parentPaneInternal.setEditingStyle(true, this);
    (_selectedElement_parentElement1 = selectedElement.parentElement) === null || _selectedElement_parentElement1 === void 0 ? void 0 : _selectedElement_parentElement1.scrollIntoViewIfNeeded(false);
    this.prompt = new _StylesSidebarPane_js__WEBPACK_IMPORTED_MODULE_21__.CSSPropertyPrompt(this, context.isEditingName);
    this.prompt.setAutocompletionTimeout(0);
    this.prompt.addEventListener("TextChanged" /* UI.TextPrompt.Events.TextChanged */ , function() {
        void _this.applyFreeFlowStyleTextEdit(context);
    });
    var invalidString = this.property.getInvalidStringForInvalidProperty();
    if (invalidString) {
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_11__.ARIAUtils.alert(invalidString);
    }
    var proxyElement = this.prompt.attachAndStartEditing(selectedElement, blurListener.bind(this, context));
    this.navigateToSource(selectedElement, true);
    proxyElement.addEventListener('keydown', this.editingNameValueKeyDown.bind(this, context), false);
    proxyElement.addEventListener('keypress', this.editingNameValueKeyPress.bind(this, context), false);
    if (context.isEditingName) {
        proxyElement.addEventListener('paste', pasteHandler.bind(this, context), false);
        proxyElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this, context), false);
    }
    (_selectedElement_getComponentSelection = selectedElement.getComponentSelection()) === null || _selectedElement_getComponentSelection === void 0 ? void 0 : _selectedElement_getComponentSelection.selectAllChildren(selectedElement);
}
function selectionLeftOffset(element) {
    var selection = element.getComponentSelection();
    if (!(selection === null || selection === void 0 ? void 0 : selection.containsNode(element, true))) {
        return null;
    }
    var leftOffset = selection.anchorOffset;
    var node = selection.anchorNode;
    while(node !== element){
        while(node === null || node === void 0 ? void 0 : node.previousSibling){
            var _node_textContent;
            node = node.previousSibling;
            var _node_textContent_length;
            leftOffset += (_node_textContent_length = (_node_textContent = node.textContent) === null || _node_textContent === void 0 ? void 0 : _node_textContent.length) !== null && _node_textContent_length !== void 0 ? _node_textContent_length : 0;
        }
        var _node_parentNodeOrShadowHost;
        node = (_node_parentNodeOrShadowHost = node === null || node === void 0 ? void 0 : node.parentNodeOrShadowHost()) !== null && _node_parentNodeOrShadowHost !== void 0 ? _node_parentNodeOrShadowHost : null;
    }
    return leftOffset;
}


}),
"./panels/elements/StylePropertyUtils.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getCssDeclarationAsJavascriptProperty: function() { return getCssDeclarationAsJavascriptProperty; }
});
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function getCssDeclarationAsJavascriptProperty(declaration) {
    var name = declaration.name, value = declaration.value;
    var declarationNameAsJs = name.startsWith('--') ? "'".concat(name, "'") : name.replace(/-([a-z])/gi, function(_str, group) {
        return group.toUpperCase();
    });
    var declarationAsJs = "'".concat(value.replaceAll('\'', '\\\''), "'");
    return "".concat(declarationNameAsJs, ": ").concat(declarationAsJs);
} //# sourceMappingURL=StylePropertyUtils.js.map


}),
"./panels/elements/StylesSidebarPane.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ActionDelegate: function() { return ActionDelegate; },
  ButtonProvider: function() { return ButtonProvider; },
  CSSPropertyPrompt: function() { return CSSPropertyPrompt; },
  IdleCallbackManager: function() { return IdleCallbackManager; },
  REGISTERED_PROPERTY_SECTION_NAME: function() { return REGISTERED_PROPERTY_SECTION_NAME; },
  SectionBlock: function() { return SectionBlock; },
  StylesSidebarPane: function() { return StylesSidebarPane; },
  escapeUrlAsCssComment: function() { return escapeUrlAsCssComment; },
  quoteFamilyName: function() { return quoteFamilyName; },
  unescapeCssString: function() { return unescapeCssString; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/host/host.js */ "./core/host/host.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */var _core_root_root_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/root/root.js */ "./core/root/root.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../models/bindings/bindings.js */ "./models/bindings/bindings.js");
/* harmony import */var _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../models/text_utils/text_utils.js */ "./models/text_utils/text_utils.js");
/* harmony import */var _models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../models/workspace/workspace.js */ "./models/workspace/workspace.js");
/* harmony import */var _models_workspace_diff_workspace_diff_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../models/workspace_diff/workspace_diff.js */ "./models/workspace_diff/workspace_diff.js");
/* harmony import */var _panels_utils_utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../panels/utils/utils.js */ "./panels/utils/utils.js");
/* harmony import */var _ui_components_diff_view_diff_view_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../ui/components/diff_view/diff_view.js */ "./ui/components/diff_view/diff_view.js");
/* harmony import */var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */var _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../ui/legacy/components/inline_editor/inline_editor.js */ "./ui/legacy/components/inline_editor/inline_editor.js");
/* harmony import */var _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../ui/legacy/components/utils/utils.js */ "./ui/legacy/components/utils/utils.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _ComputedStyleModel_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ComputedStyleModel.js */ "./panels/elements/ComputedStyleModel.js");
/* harmony import */var _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ElementsPanel.js */ "./panels/elements/ElementsPanel.js");
/* harmony import */var _ElementsSidebarPane_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ElementsSidebarPane.js */ "./panels/elements/ElementsSidebarPane.js");
/* harmony import */var _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ImagePreviewPopover.js */ "./panels/elements/ImagePreviewPopover.js");
/* harmony import */var _LayersWidget_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./LayersWidget.js */ "./panels/elements/LayersWidget.js");
/* harmony import */var _StyleEditorWidget_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./StyleEditorWidget.js */ "./panels/elements/StyleEditorWidget.js");
/* harmony import */var _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./StylePropertiesSection.js */ "./panels/elements/StylePropertiesSection.js");
/* harmony import */var _StylePropertyHighlighter_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./StylePropertyHighlighter.js */ "./panels/elements/StylePropertyHighlighter.js");
/* harmony import */var _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./StylePropertyTreeElement.js */ "./panels/elements/StylePropertyTreeElement.js");
/* harmony import */var _stylesSidebarPane_css_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./stylesSidebarPane.css.js */ "./panels/elements/stylesSidebarPane.css.js");
/* harmony import */var _WebCustomData_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./WebCustomData.js */ "./panels/elements/WebCustomData.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*
 * Copyright (C) 2007 Apple Inc.  All rights reserved.
 * Copyright (C) 2009 Joseph Pecoraro
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _class_private_method_get(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _class_private_method_init(obj, privateSet) {
    _check_private_redeclaration(obj, privateSet);
    privateSet.add(obj);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get;
    } else {
        _get = function get(target, property, receiver) {
            var base = _super_prop_base(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver || target);
            }
            return desc.value;
        };
    }
    return _get(target, property, receiver || target);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _super_prop_base(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = _get_prototype_of(object);
        if (object === null) break;
    }
    return object;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function _ts_values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}






























var UIStrings = {
    /**
     *@description No matches element text content in Styles Sidebar Pane of the Elements panel
     */ noMatchingSelectorOrStyle: 'No matching selector or style',
    /**
    /**
     *@description Text to announce the result of the filter input in the Styles Sidebar Pane of the Elements panel
     */ visibleSelectors: '{n, plural, =1 {# visible selector listed below} other {# visible selectors listed below}}',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ invalidPropertyValue: 'Invalid property value',
    /**
     *@description Text in Styles Sidebar Pane of the Elements panel
     */ unknownPropertyName: 'Unknown property name',
    /**
     *@description Separator element text content in Styles Sidebar Pane of the Elements panel
     *@example {scrollbar-corner} PH1
     */ pseudoSElement: 'Pseudo ::{PH1} element',
    /**
     *@description Text of a DOM element in Styles Sidebar Pane of the Elements panel
     */ inheritedFroms: 'Inherited from ',
    /**
     *@description Text of an inherited psuedo element in Styles Sidebar Pane of the Elements panel
     *@example {highlight} PH1
     */ inheritedFromSPseudoOf: 'Inherited from ::{PH1} pseudo of ',
    /**
     *@description Title of  in styles sidebar pane of the elements panel
     *@example {Ctrl} PH1
     *@example {Alt} PH2
     */ incrementdecrementWithMousewheelOne: 'Increment/decrement with mousewheel or up/down keys. {PH1}: R ±1, Shift: G ±1, {PH2}: B ±1',
    /**
     *@description Title of  in styles sidebar pane of the elements panel
     *@example {Ctrl} PH1
     *@example {Alt} PH2
     */ incrementdecrementWithMousewheelHundred: 'Increment/decrement with mousewheel or up/down keys. {PH1}: ±100, Shift: ±10, {PH2}: ±0.1',
    /**
     *@description Announcement string for invalid properties.
     *@example {Invalid property value} PH1
     *@example {font-size} PH2
     *@example {invalidValue} PH3
     */ invalidString: '{PH1}, property name: {PH2}, property value: {PH3}',
    /**
     *@description Tooltip text that appears when hovering over the rendering button in the Styles Sidebar Pane of the Elements panel
     */ toggleRenderingEmulations: 'Toggle common rendering emulations',
    /**
     *@description Rendering emulation option for toggling the automatic dark mode
     */ automaticDarkMode: 'Automatic dark mode',
    /**
     *@description Tooltip text that appears when hovering over the css changes button in the Styles Sidebar Pane of the Elements panel
     */ copyAllCSSChanges: 'Copy CSS changes',
    /**
     *@description Tooltip text that appears after clicking on the copy CSS changes button
     */ copiedToClipboard: 'Copied to clipboard',
    /**
     *@description Text displayed on layer separators in the styles sidebar pane.
     */ layer: 'Layer',
    /**
     *@description Tooltip text for the link in the sidebar pane layer separators that reveals the layer in the layer tree view.
     */ clickToRevealLayer: 'Click to reveal layer in layer tree',
    /**
     *@description Text displayed in tooltip that shows specificity information.
     *@example {(0,0,1)} PH1
     */ specificity: 'Specificity: {PH1}'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.registerUIStrings('panels/elements/StylesSidebarPane.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_2__.i18n.getLocalizedString.bind(undefined, str_);
// Number of ms elapsed with no keypresses to determine is the input is finished, to announce results
var FILTER_IDLE_PERIOD = 500;
// Minimum number of @property rules for the @property section block to be folded initially
var MIN_FOLDED_SECTIONS_COUNT = 5;
// Title of the registered properties section
var REGISTERED_PROPERTY_SECTION_NAME = '@property';
// Highlightable properties are those that can be hovered in the sidebar to trigger a specific
// highlighting mode on the current element.
var HIGHLIGHTABLE_PROPERTIES = [
    {
        mode: 'padding',
        properties: [
            'padding'
        ]
    },
    {
        mode: 'border',
        properties: [
            'border'
        ]
    },
    {
        mode: 'margin',
        properties: [
            'margin'
        ]
    },
    {
        mode: 'gap',
        properties: [
            'gap',
            'grid-gap'
        ]
    },
    {
        mode: 'column-gap',
        properties: [
            'column-gap',
            'grid-column-gap'
        ]
    },
    {
        mode: 'row-gap',
        properties: [
            'row-gap',
            'grid-row-gap'
        ]
    },
    {
        mode: 'grid-template-columns',
        properties: [
            'grid-template-columns'
        ]
    },
    {
        mode: 'grid-template-rows',
        properties: [
            'grid-template-rows'
        ]
    },
    {
        mode: 'grid-template-areas',
        properties: [
            'grid-areas'
        ]
    },
    {
        mode: 'justify-content',
        properties: [
            'justify-content'
        ]
    },
    {
        mode: 'align-content',
        properties: [
            'align-content'
        ]
    },
    {
        mode: 'align-items',
        properties: [
            'align-items'
        ]
    },
    {
        mode: 'flexibility',
        properties: [
            'flex',
            'flex-basis',
            'flex-grow',
            'flex-shrink'
        ]
    }
];
var stylesSidebarPaneInstance;
var _webCustomData = /*#__PURE__*/ new WeakMap(), _hintPopoverHelper = /*#__PURE__*/ new WeakMap(), _genericPopoverHelper = /*#__PURE__*/ new WeakMap(), _elementPopoverHooks = /*#__PURE__*/ new WeakMap(), _urlToChangeTracker = /*#__PURE__*/ new WeakMap(), _copyChangesButton = /*#__PURE__*/ new WeakMap(), _updateAbortController = /*#__PURE__*/ new WeakMap(), _updateComputedStylesAbortController = /*#__PURE__*/ new WeakMap(), _innerDoUpdate = /*#__PURE__*/ new WeakSet();
var StylesSidebarPane = /*#__PURE__*/ function(_Common_ObjectWrapper_eventMixin) {
    "use strict";
    _inherits(StylesSidebarPane, _Common_ObjectWrapper_eventMixin);
    var _super = _create_super(StylesSidebarPane);
    function StylesSidebarPane() {
        _class_call_check(this, StylesSidebarPane);
        var _this;
        _this = _super.call(this, true);
        _class_private_method_init(_assert_this_initialized(_this), _innerDoUpdate);
        _define_property(_assert_this_initialized(_this), "currentToolbarPane", void 0);
        _define_property(_assert_this_initialized(_this), "animatedToolbarPane", void 0);
        _define_property(_assert_this_initialized(_this), "pendingWidget", void 0);
        _define_property(_assert_this_initialized(_this), "pendingWidgetToggle", void 0);
        _define_property(_assert_this_initialized(_this), "toolbar", void 0);
        _define_property(_assert_this_initialized(_this), "toolbarPaneElement", void 0);
        _define_property(_assert_this_initialized(_this), "lastFilterChange", void 0);
        _define_property(_assert_this_initialized(_this), "visibleSections", void 0);
        _define_property(_assert_this_initialized(_this), "noMatchesElement", void 0);
        _define_property(_assert_this_initialized(_this), "sectionsContainer", void 0);
        _define_property(_assert_this_initialized(_this), "sectionByElement", void 0);
        _define_property(_assert_this_initialized(_this), "swatchPopoverHelperInternal", void 0);
        _define_property(_assert_this_initialized(_this), "linkifier", void 0);
        _define_property(_assert_this_initialized(_this), "decorator", void 0);
        _define_property(_assert_this_initialized(_this), "lastRevealedProperty", void 0);
        _define_property(_assert_this_initialized(_this), "userOperation", void 0);
        _define_property(_assert_this_initialized(_this), "isEditingStyle", void 0);
        _define_property(_assert_this_initialized(_this), "filterRegexInternal", void 0);
        _define_property(_assert_this_initialized(_this), "isActivePropertyHighlighted", void 0);
        _define_property(_assert_this_initialized(_this), "initialUpdateCompleted", void 0);
        _define_property(_assert_this_initialized(_this), "hasMatchedStyles", void 0);
        _define_property(_assert_this_initialized(_this), "sectionBlocks", void 0);
        _define_property(_assert_this_initialized(_this), "idleCallbackManager", void 0);
        _define_property(_assert_this_initialized(_this), "needsForceUpdate", void 0);
        _define_property(_assert_this_initialized(_this), "resizeThrottler", void 0);
        _define_property(_assert_this_initialized(_this), "scrollerElement", void 0);
        _define_property(_assert_this_initialized(_this), "boundOnScroll", void 0);
        _define_property(_assert_this_initialized(_this), "imagePreviewPopover", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _webCustomData, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _hintPopoverHelper, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _genericPopoverHelper, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _elementPopoverHooks, {
            writable: true,
            value: new WeakMap()
        });
        _define_property(_assert_this_initialized(_this), "activeCSSAngle", void 0);
        _class_private_field_init(_assert_this_initialized(_this), _urlToChangeTracker, {
            writable: true,
            value: new Map()
        });
        _class_private_field_init(_assert_this_initialized(_this), _copyChangesButton, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _updateAbortController, {
            writable: true,
            value: void 0
        });
        _class_private_field_init(_assert_this_initialized(_this), _updateComputedStylesAbortController, {
            writable: true,
            value: void 0
        });
        _this.setMinimumSize(96, 26);
        _this.registerCSSFiles([
            _stylesSidebarPane_css_js__WEBPACK_IMPORTED_MODULE_27__["default"]
        ]);
        _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').addChangeListener(_this.update.bind(_assert_this_initialized(_this)));
        _this.currentToolbarPane = null;
        _this.animatedToolbarPane = null;
        _this.pendingWidget = null;
        _this.pendingWidgetToggle = null;
        _this.toolbar = null;
        _this.lastFilterChange = null;
        _this.visibleSections = null;
        _this.toolbarPaneElement = _this.createStylesSidebarToolbar();
        _this.computedStyleModelInternal = new _ComputedStyleModel_js__WEBPACK_IMPORTED_MODULE_18__.ComputedStyleModel();
        _this.noMatchesElement = _this.contentElement.createChild('div', 'gray-info-message hidden');
        _this.noMatchesElement.textContent = i18nString(UIStrings.noMatchingSelectorOrStyle);
        _this.sectionsContainer = _this.contentElement.createChild('div');
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ARIAUtils.markAsList(_this.sectionsContainer);
        _this.sectionsContainer.addEventListener('keydown', _this.sectionsContainerKeyDown.bind(_assert_this_initialized(_this)), false);
        _this.sectionsContainer.addEventListener('focusin', _this.sectionsContainerFocusChanged.bind(_assert_this_initialized(_this)), false);
        _this.sectionsContainer.addEventListener('focusout', _this.sectionsContainerFocusChanged.bind(_assert_this_initialized(_this)), false);
        _this.sectionByElement = new WeakMap();
        _this.swatchPopoverHelperInternal = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_13__.SwatchPopoverHelper.SwatchPopoverHelper();
        _this.swatchPopoverHelperInternal.addEventListener("WillShowPopover" /* InlineEditor.SwatchPopoverHelper.Events.WillShowPopover */ , _this.hideAllPopovers, _assert_this_initialized(_this));
        _this.linkifier = new _ui_legacy_components_utils_utils_js__WEBPACK_IMPORTED_MODULE_14__.Linkifier.Linkifier(MAX_LINK_LENGTH, /* useLinkDecorator */ true);
        _this.decorator = new _StylePropertyHighlighter_js__WEBPACK_IMPORTED_MODULE_25__.StylePropertyHighlighter(_assert_this_initialized(_this));
        _this.lastRevealedProperty = null;
        _this.userOperation = false;
        _this.isEditingStyle = false;
        _this.filterRegexInternal = null;
        _this.isActivePropertyHighlighted = false;
        _this.initialUpdateCompleted = false;
        _this.hasMatchedStyles = false;
        _this.contentElement.classList.add('styles-pane');
        _this.sectionBlocks = [];
        _this.idleCallbackManager = null;
        _this.needsForceUpdate = false;
        stylesSidebarPaneInstance = _assert_this_initialized(_this);
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Context.Context.instance().addFlavorChangeListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMNode, _this.forceUpdate, _assert_this_initialized(_this));
        _this.contentElement.addEventListener('copy', _this.clipboardCopy.bind(_assert_this_initialized(_this)));
        _this.resizeThrottler = new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Throttler.Throttler(100);
        _this.boundOnScroll = _this.onScroll.bind(_assert_this_initialized(_this));
        _this.imagePreviewPopover = new _ImagePreviewPopover_js__WEBPACK_IMPORTED_MODULE_21__.ImagePreviewPopover(_this.contentElement, function(event) {
            var link = event.composedPath()[0];
            if (_instanceof(link, Element)) {
                return link;
            }
            return null;
        }, function() {
            return _this.node();
        });
        _this.activeCSSAngle = null;
        var showDocumentationSetting = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('show-css-property-documentation-on-hover');
        showDocumentationSetting.addChangeListener(function(event) {
            var metricType = Boolean(event.data) ? 1 /* Host.UserMetrics.CSSPropertyDocumentation.ToggledOn */  : 2 /* Host.UserMetrics.CSSPropertyDocumentation.ToggledOff */ ;
            _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.cssPropertyDocumentation(metricType);
        });
        _class_private_field_set(_assert_this_initialized(_this), _hintPopoverHelper, new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.PopoverHelper.PopoverHelper(_this.contentElement, function(event) {
            var hoveredNode = event.composedPath()[0];
            // This is a workaround to fix hint popover not showing after icon update.
            // Previously our `.hint` element was an icon itself and `composedPath()[0]` was referring to it.
            // However, our `Icon` component now is an element with shadow root and `event.composedPath()[0]`
            // refers to the markup inside shadow root. Though we want a reference to the `.hint` element itself.
            // So we trace back and reach to the possible `.hint` element from inside the shadow root.
            var possibleHintNodeFromHintIcon = event.composedPath()[2];
            if (!hoveredNode || !_instanceof(hoveredNode, Element)) {
                return null;
            }
            if (_instanceof(possibleHintNodeFromHintIcon, Element) && possibleHintNodeFromHintIcon.matches('.hint')) {
                var hint = _StylePropertyTreeElement_js__WEBPACK_IMPORTED_MODULE_26__.activeHints.get(possibleHintNodeFromHintIcon);
                if (hint) {
                    _class_private_field_get(_this, _hintPopoverHelper).jslogContext = 'elements.css-hint';
                    return {
                        box: hoveredNode.boxInWindow(),
                        show: function() {
                            var _ref = _async_to_generator(function(popover) {
                                var popupElement;
                                return _ts_generator(this, function(_state) {
                                    popupElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_17__.CSSHintDetailsView.CSSHintDetailsView(hint);
                                    popover.contentElement.appendChild(popupElement);
                                    return [
                                        2,
                                        true
                                    ];
                                });
                            });
                            return function(popover) {
                                return _ref.apply(this, arguments);
                            };
                        }()
                    };
                }
            }
            if (showDocumentationSetting.get() && hoveredNode.matches('.webkit-css-property')) {
                if (!_class_private_field_get(_assert_this_initialized(_this), _webCustomData)) {
                    _class_private_field_set(_assert_this_initialized(_this), _webCustomData, _WebCustomData_js__WEBPACK_IMPORTED_MODULE_28__.WebCustomData.create());
                }
                var cssPropertyName = hoveredNode.textContent;
                var cssProperty = cssPropertyName && _class_private_field_get(_this, _webCustomData).findCssProperty(cssPropertyName);
                if (cssProperty) {
                    _class_private_field_get(_this, _hintPopoverHelper).jslogContext = 'elements.css-property-doc';
                    return {
                        box: hoveredNode.boxInWindow(),
                        show: function() {
                            var _ref = _async_to_generator(function(popover) {
                                var popupElement;
                                return _ts_generator(this, function(_state) {
                                    popupElement = new _components_components_js__WEBPACK_IMPORTED_MODULE_17__.CSSPropertyDocsView.CSSPropertyDocsView(cssProperty);
                                    popover.contentElement.appendChild(popupElement);
                                    _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.cssPropertyDocumentation(0 /* Host.UserMetrics.CSSPropertyDocumentation.Shown */ );
                                    return [
                                        2,
                                        true
                                    ];
                                });
                            });
                            return function(popover) {
                                return _ref.apply(this, arguments);
                            };
                        }()
                    };
                }
            }
            if (hoveredNode.matches('.simple-selector')) {
                var specificity = _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.StylePropertiesSection.getSpecificityStoredForNodeElement(hoveredNode);
                _class_private_field_get(_this, _hintPopoverHelper).jslogContext = 'elements.css-selector-specificity';
                return {
                    box: hoveredNode.boxInWindow(),
                    show: function() {
                        var _ref = _async_to_generator(function(popover) {
                            var element;
                            return _ts_generator(this, function(_state) {
                                popover.setIgnoreLeftMargin(true);
                                element = document.createElement('span');
                                element.textContent = i18nString(UIStrings.specificity, {
                                    PH1: specificity ? "(".concat(specificity.a, ",").concat(specificity.b, ",").concat(specificity.c, ")") : '(?,?,?)'
                                });
                                popover.contentElement.appendChild(element);
                                return [
                                    2,
                                    true
                                ];
                            });
                        });
                        return function(popover) {
                            return _ref.apply(this, arguments);
                        };
                    }()
                };
            }
            return null;
        }));
        _class_private_field_get(_this, _hintPopoverHelper).setDisableOnClick(true);
        _class_private_field_get(_this, _hintPopoverHelper).setTimeout(300);
        _class_private_field_get(_this, _hintPopoverHelper).setHasPadding(true);
        _class_private_field_set(_assert_this_initialized(_this), _genericPopoverHelper, new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.PopoverHelper.PopoverHelper(_this.contentElement, function(event) {
            var _loop = function(e) {
                var element = event.composedPath()[e];
                var hook = _class_private_field_get(_this, _elementPopoverHooks).get(element);
                var contents = hook ? hook.contents() : undefined;
                if (contents) {
                    return {
                        v: {
                            box: element.boxInWindow(),
                            show: function() {
                                var _ref = _async_to_generator(function(popover) {
                                    var _hook_jslogContext;
                                    return _ts_generator(this, function(_state) {
                                        popover.setJsLog("".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.popover("".concat((_hook_jslogContext = hook === null || hook === void 0 ? void 0 : hook.jslogContext) !== null && _hook_jslogContext !== void 0 ? _hook_jslogContext : 'elements.generic-sidebar-popover')).parent('popoverParent')));
                                        popover.contentElement.classList.add('borderless-popover');
                                        popover.contentElement.appendChild(contents);
                                        return [
                                            2,
                                            true
                                        ];
                                    });
                                });
                                return function(popover) {
                                    return _ref.apply(this, arguments);
                                };
                            }()
                        }
                    };
                }
            };
            for(var e = event.composedPath().length - 1; e >= 0; --e){
                var _ret = _loop(e);
                if (_type_of(_ret) === "object") return _ret.v;
            }
            return null;
        }, 'elements.generic-sidebar-popover'));
        _class_private_field_get(_this, _genericPopoverHelper).setDisableOnClick(true);
        _class_private_field_get(_this, _genericPopoverHelper).setTimeout(500, 200);
        return _this;
    }
    _create_class(StylesSidebarPane, [
        {
            key: "addPopover",
            value: function addPopover(element, popover) {
                _class_private_field_get(this, _elementPopoverHooks).set(element, popover);
            }
        },
        {
            key: "onScroll",
            value: function onScroll(_event) {
                this.hideAllPopovers();
            }
        },
        {
            key: "swatchPopoverHelper",
            value: function swatchPopoverHelper() {
                return this.swatchPopoverHelperInternal;
            }
        },
        {
            key: "setUserOperation",
            value: function setUserOperation(userOperation) {
                this.userOperation = userOperation;
            }
        },
        {
            key: "createExclamationMark",
            value: function createExclamationMark(property, title) {
                var exclamationElement = document.createElement('span');
                exclamationElement.classList.add('exclamation-mark');
                var invalidMessage = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().isCSSPropertyName(property.name) ? i18nString(UIStrings.invalidPropertyValue) : i18nString(UIStrings.unknownPropertyName);
                if (title === null) {
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Tooltip.Tooltip.install(exclamationElement, invalidMessage);
                } else {
                    this.addPopover(exclamationElement, {
                        contents: function() {
                            return title;
                        }
                    });
                }
                var invalidString = i18nString(UIStrings.invalidString, {
                    PH1: invalidMessage,
                    PH2: property.name,
                    PH3: property.value
                });
                // Storing the invalidString for future screen reader support when editing the property
                property.setDisplayedStringForInvalidProperty(invalidString);
                return exclamationElement;
            }
        },
        {
            key: "revealProperty",
            value: function revealProperty(cssProperty) {
                this.decorator.highlightProperty(cssProperty);
                this.lastRevealedProperty = cssProperty;
                this.update();
            }
        },
        {
            key: "jumpToProperty",
            value: function jumpToProperty(propertyName, sectionName, blockName) {
                return this.decorator.findAndHighlightPropertyName(propertyName, sectionName, blockName);
            }
        },
        {
            key: "jumpToSection",
            value: function jumpToSection(sectionName, blockName) {
                this.decorator.findAndHighlightSection(sectionName, blockName);
            }
        },
        {
            key: "jumpToSectionBlock",
            value: function jumpToSectionBlock(section) {
                this.decorator.findAndHighlightSectionBlock(section);
            }
        },
        {
            key: "forceUpdate",
            value: function forceUpdate() {
                var _$_class_private_field_get;
                this.needsForceUpdate = true;
                this.swatchPopoverHelperInternal.hide();
                (_$_class_private_field_get = _class_private_field_get(this, _updateAbortController)) === null || _$_class_private_field_get === void 0 ? void 0 : _$_class_private_field_get.abort();
                this.resetCache();
                this.update();
            }
        },
        {
            key: "sectionsContainerKeyDown",
            value: function sectionsContainerKeyDown(event) {
                var activeElement = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.DOMUtilities.deepActiveElement(this.sectionsContainer.ownerDocument);
                if (!activeElement) {
                    return;
                }
                var section = this.sectionByElement.get(activeElement);
                if (!section) {
                    return;
                }
                var sectionToFocus = null;
                var willIterateForward = false;
                switch(event.key){
                    case 'ArrowUp':
                    case 'ArrowLeft':
                        {
                            sectionToFocus = section.previousSibling() || section.lastSibling();
                            willIterateForward = false;
                            break;
                        }
                    case 'ArrowDown':
                    case 'ArrowRight':
                        {
                            sectionToFocus = section.nextSibling() || section.firstSibling();
                            willIterateForward = true;
                            break;
                        }
                    case 'Home':
                        {
                            sectionToFocus = section.firstSibling();
                            willIterateForward = true;
                            break;
                        }
                    case 'End':
                        {
                            sectionToFocus = section.lastSibling();
                            willIterateForward = false;
                            break;
                        }
                }
                if (sectionToFocus && this.filterRegexInternal) {
                    sectionToFocus = sectionToFocus.findCurrentOrNextVisible(/* willIterateForward= */ willIterateForward);
                }
                if (sectionToFocus) {
                    sectionToFocus.element.focus();
                    event.consume(true);
                }
            }
        },
        {
            key: "sectionsContainerFocusChanged",
            value: function sectionsContainerFocusChanged() {
                this.resetFocus();
            }
        },
        {
            key: "resetFocus",
            value: function resetFocus() {
                // When a styles section is focused, shift+tab should leave the section.
                // Leaving tabIndex = 0 on the first element would cause it to be focused instead.
                if (!this.noMatchesElement.classList.contains('hidden')) {
                    return;
                }
                if (this.sectionBlocks[0] && this.sectionBlocks[0].sections[0]) {
                    var firstVisibleSection = this.sectionBlocks[0].sections[0].findCurrentOrNextVisible(/* willIterateForward= */ true);
                    if (firstVisibleSection) {
                        firstVisibleSection.element.tabIndex = this.sectionsContainer.hasFocus() ? -1 : 0;
                    }
                }
            }
        },
        {
            key: "onAddButtonLongClick",
            value: function onAddButtonLongClick(event) {
                var cssModel = this.cssModel();
                if (!cssModel) {
                    return;
                }
                var headers = cssModel.styleSheetHeaders().filter(styleSheetResourceHeader);
                var contextMenuDescriptors = [];
                for(var i = 0; i < headers.length; ++i){
                    var header = headers[i];
                    var handler = this.createNewRuleInStyleSheet.bind(this, header);
                    contextMenuDescriptors.push({
                        text: _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__.ResourceUtils.displayNameForURL(header.resourceURL()),
                        handler: handler
                    });
                }
                contextMenuDescriptors.sort(compareDescriptors);
                var contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ContextMenu.ContextMenu(event);
                for(var i1 = 0; i1 < contextMenuDescriptors.length; ++i1){
                    var descriptor = contextMenuDescriptors[i1];
                    contextMenu.defaultSection().appendItem(descriptor.text, descriptor.handler, {
                        jslogContext: 'style-sheet-header'
                    });
                }
                contextMenu.footerSection().appendItem('inspector-stylesheet', this.createNewRuleInViaInspectorStyleSheet.bind(this), {
                    jslogContext: 'inspector-stylesheet'
                });
                void contextMenu.show();
                function compareDescriptors(descriptor1, descriptor2) {
                    return _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.naturalOrderComparator(descriptor1.text, descriptor2.text);
                }
                function styleSheetResourceHeader(header) {
                    return !header.isViaInspector() && !header.isInline && Boolean(header.resourceURL());
                }
            }
        },
        {
            key: "onFilterChanged",
            value: function onFilterChanged(event) {
                var _this = this;
                var regex = event.data ? new RegExp(_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.escapeForRegExp(event.data), 'i') : null;
                this.lastFilterChange = Date.now();
                this.filterRegexInternal = regex;
                this.updateFilter();
                this.resetFocus();
                setTimeout(function() {
                    if (_this.lastFilterChange) {
                        var stillTyping = Date.now() - _this.lastFilterChange < FILTER_IDLE_PERIOD;
                        if (!stillTyping) {
                            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ARIAUtils.alert(_this.visibleSections ? i18nString(UIStrings.visibleSelectors, {
                                n: _this.visibleSections
                            }) : i18nString(UIStrings.noMatchingSelectorOrStyle));
                        }
                    }
                }, FILTER_IDLE_PERIOD);
            }
        },
        {
            key: "refreshUpdate",
            value: function refreshUpdate(editedSection, editedTreeElement) {
                if (editedTreeElement) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.allSections()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var section = _step.value;
                            if (_instanceof(section, _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.BlankStylePropertiesSection) && section.isBlank) {
                                continue;
                            }
                            section.updateVarFunctions(editedTreeElement);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                if (this.isEditingStyle) {
                    return;
                }
                var node = this.node();
                if (!node) {
                    return;
                }
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = this.allSections()[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var section1 = _step1.value;
                        if (_instanceof(section1, _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.BlankStylePropertiesSection) && section1.isBlank) {
                            continue;
                        }
                        section1.update(section1 === editedSection);
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
                if (this.filterRegexInternal) {
                    this.updateFilter();
                }
                this.swatchPopoverHelper().reposition();
                this.nodeStylesUpdatedForTest(node, false);
            }
        },
        {
            key: "doUpdate",
            value: function doUpdate() {
                var _this = this;
                return _async_to_generator(function() {
                    var _$_class_private_field_get, _this_contentElement_enclosingNodeOrSelfWithClass_parentElement, _this_contentElement_enclosingNodeOrSelfWithClass, _this_contentElement, _this1, scrollerElementLists, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, element;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                (_$_class_private_field_get = _class_private_field_get(_this, _updateAbortController)) === null || _$_class_private_field_get === void 0 ? void 0 : _$_class_private_field_get.abort();
                                _class_private_field_set(_this, _updateAbortController, new AbortController());
                                return [
                                    4,
                                    _class_private_method_get(_this, _innerDoUpdate, innerDoUpdate).call(_this, _class_private_field_get(_this, _updateAbortController).signal)
                                ];
                            case 1:
                                _state.sent();
                                // Hide all popovers when scrolling.
                                // Styles and Computed panels both have popover (e.g. imagePreviewPopover),
                                // so we need to bind both scroll events.
                                scrollerElementLists = (_this1 = _this) === null || _this1 === void 0 ? void 0 : (_this_contentElement = _this1.contentElement) === null || _this_contentElement === void 0 ? void 0 : (_this_contentElement_enclosingNodeOrSelfWithClass = _this_contentElement.enclosingNodeOrSelfWithClass('style-panes-wrapper')) === null || _this_contentElement_enclosingNodeOrSelfWithClass === void 0 ? void 0 : (_this_contentElement_enclosingNodeOrSelfWithClass_parentElement = _this_contentElement_enclosingNodeOrSelfWithClass.parentElement) === null || _this_contentElement_enclosingNodeOrSelfWithClass_parentElement === void 0 ? void 0 : _this_contentElement_enclosingNodeOrSelfWithClass_parentElement.querySelectorAll('.style-panes-wrapper');
                                if (scrollerElementLists.length > 0) {
                                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                    try {
                                        for(_iterator = scrollerElementLists[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                            element = _step.value;
                                            _this.scrollerElement = element;
                                            _this.scrollerElement.addEventListener('scroll', _this.boundOnScroll, false);
                                        }
                                    } catch (err) {
                                        _didIteratorError = true;
                                        _iteratorError = err;
                                    } finally{
                                        try {
                                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                _iterator.return();
                                            }
                                        } finally{
                                            if (_didIteratorError) {
                                                throw _iteratorError;
                                            }
                                        }
                                    }
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "fetchComputedStylesFor",
            value: function fetchComputedStylesFor(nodeId) {
                var _this = this;
                return _async_to_generator(function() {
                    var node;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                node = _this.node();
                                if (node === null || nodeId === undefined) {
                                    return [
                                        2,
                                        null
                                    ];
                                }
                                return [
                                    4,
                                    node.domModel().cssModel().getComputedStyle(nodeId)
                                ];
                            case 1:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "onResize",
            value: function onResize() {
                void this.resizeThrottler.schedule(this.innerResize.bind(this));
            }
        },
        {
            key: "innerResize",
            value: function innerResize() {
                var width = this.contentElement.getBoundingClientRect().width + 'px';
                this.allSections().forEach(function(section) {
                    section.propertiesTreeOutline.element.style.width = width;
                });
                this.hideAllPopovers();
                return Promise.resolve();
            }
        },
        {
            key: "resetCache",
            value: function resetCache() {
                var cssModel = this.cssModel();
                if (cssModel) {
                    cssModel.discardCachedMatchedCascade();
                }
            }
        },
        {
            key: "fetchMatchedCascade",
            value: function fetchMatchedCascade() {
                var node = this.node();
                if (!node || !this.cssModel()) {
                    return Promise.resolve(null);
                }
                var cssModel = this.cssModel();
                if (!cssModel) {
                    return Promise.resolve(null);
                }
                return cssModel.cachedMatchedCascadeForNode(node).then(validateStyles.bind(this));
                function validateStyles(matchedStyles) {
                    return matchedStyles && matchedStyles.node() === this.node() ? matchedStyles : null;
                }
            }
        },
        {
            key: "setEditingStyle",
            value: function setEditingStyle(editing, _treeElement) {
                if (this.isEditingStyle === editing) {
                    return;
                }
                this.contentElement.classList.toggle('is-editing-style', editing);
                this.isEditingStyle = editing;
                this.setActiveProperty(null);
            }
        },
        {
            key: "setActiveProperty",
            value: function setActiveProperty(treeElement) {
                if (this.isActivePropertyHighlighted) {
                    _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.OverlayModel.OverlayModel.hideDOMNodeHighlight();
                }
                this.isActivePropertyHighlighted = false;
                if (!this.node()) {
                    return;
                }
                if (!treeElement || treeElement.overloaded() || treeElement.inherited()) {
                    return;
                }
                var rule = treeElement.property.ownerStyle.parentRule;
                var selectorList = _instanceof(rule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule) ? rule.selectorText() : undefined;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = HIGHLIGHTABLE_PROPERTIES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _step.value, properties = _step_value.properties, mode = _step_value.mode;
                        if (!properties.includes(treeElement.name)) {
                            continue;
                        }
                        var node = this.node();
                        if (!node) {
                            continue;
                        }
                        node.domModel().overlayModel().highlightInOverlay({
                            node: this.node(),
                            selectorList: selectorList
                        }, mode);
                        this.isActivePropertyHighlighted = true;
                        break;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "onCSSModelChanged",
            value: function onCSSModelChanged(event) {
                var edit = (event === null || event === void 0 ? void 0 : event.data) && 'edit' in event.data ? event.data.edit : null;
                if (edit) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.allSections()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var section = _step.value;
                            section.styleSheetEdited(edit);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    void this.refreshComputedStyles();
                    return;
                }
                if (this.userOperation || this.isEditingStyle) {
                    void this.refreshComputedStyles();
                    return;
                }
                this.resetCache();
                this.update();
            }
        },
        {
            key: "refreshComputedStyles",
            value: function refreshComputedStyles() {
                var _this = this;
                return _async_to_generator(function() {
                    var _$_class_private_field_get, _this_node, signal, matchedStyles, nodeId, parentNodeId, _ref, computedStyles, parentsComputedStyles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, section;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                (_$_class_private_field_get = _class_private_field_get(_this, _updateComputedStylesAbortController)) === null || _$_class_private_field_get === void 0 ? void 0 : _$_class_private_field_get.abort();
                                _class_private_field_set(_this, _updateAbortController, new AbortController());
                                signal = _class_private_field_get(_this, _updateAbortController).signal;
                                return [
                                    4,
                                    _this.fetchMatchedCascade()
                                ];
                            case 1:
                                matchedStyles = _state.sent();
                                nodeId = (_this_node = _this.node()) === null || _this_node === void 0 ? void 0 : _this_node.id;
                                parentNodeId = matchedStyles === null || matchedStyles === void 0 ? void 0 : matchedStyles.getParentLayoutNodeId();
                                return [
                                    4,
                                    Promise.all([
                                        _this.fetchComputedStylesFor(nodeId),
                                        _this.fetchComputedStylesFor(parentNodeId)
                                    ])
                                ];
                            case 2:
                                _ref = _sliced_to_array.apply(void 0, [
                                    _state.sent(),
                                    2
                                ]), computedStyles = _ref[0], parentsComputedStyles = _ref[1];
                                if (signal.aborted) {
                                    return [
                                        2
                                    ];
                                }
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = _this.allSections()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        section = _step.value;
                                        section.setComputedStyles(computedStyles);
                                        section.setParentsComputedStyles(parentsComputedStyles);
                                        section.updateAuthoringHint();
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "focusedSectionIndex",
            value: function focusedSectionIndex() {
                var index = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.sectionBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var block = _step.value;
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = block.sections[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var section = _step1.value;
                                if (section.element.hasFocus()) {
                                    return index;
                                }
                                index++;
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return -1;
            }
        },
        {
            key: "continueEditingElement",
            value: function continueEditingElement(sectionIndex, propertyIndex) {
                var section = this.allSections()[sectionIndex];
                if (section) {
                    var element = section.closestPropertyForEditing(propertyIndex);
                    if (!element) {
                        section.element.focus();
                        return;
                    }
                    element.startEditingName();
                }
            }
        },
        {
            key: "innerRebuildUpdate",
            value: function innerRebuildUpdate(signal, matchedStyles, computedStyles, parentsComputedStyles) {
                var _this = this;
                return _async_to_generator(function() {
                    var focusedIndex, prevSections, node, blocks, newSections, styleEditorWidget, boundSection, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, index, prevSection, fragment, index1, elementToFocus, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, block, titleElement, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, section;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                // ElementsSidebarPane's throttler schedules this method. Usually,
                                // rebuild is suppressed while editing (see onCSSModelChanged()), but we need a
                                // 'force' flag since the currently running throttler process cannot be canceled.
                                if (_this.needsForceUpdate) {
                                    _this.needsForceUpdate = false;
                                } else if (_this.isEditingStyle || _this.userOperation) {
                                    return [
                                        2
                                    ];
                                }
                                focusedIndex = _this.focusedSectionIndex();
                                _this.linkifier.reset();
                                prevSections = _this.sectionBlocks.map(function(block) {
                                    return block.sections;
                                }).flat();
                                _this.sectionBlocks = [];
                                node = _this.node();
                                _this.hasMatchedStyles = matchedStyles !== null && node !== null;
                                if (!_this.hasMatchedStyles) {
                                    _this.sectionsContainer.removeChildren();
                                    _this.noMatchesElement.classList.remove('hidden');
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    _this.rebuildSectionsForMatchedStyleRules(matchedStyles, computedStyles, parentsComputedStyles)
                                ];
                            case 1:
                                blocks = _state.sent();
                                if (signal.aborted) {
                                    return [
                                        2
                                    ];
                                }
                                _this.sectionBlocks = blocks;
                                // Style sections maybe re-created when flexbox editor is activated.
                                // With the following code we re-bind the flexbox editor to the new
                                // section with the same index as the previous section had.
                                newSections = _this.sectionBlocks.map(function(block) {
                                    return block.sections;
                                }).flat();
                                styleEditorWidget = _StyleEditorWidget_js__WEBPACK_IMPORTED_MODULE_23__.StyleEditorWidget.instance();
                                boundSection = styleEditorWidget.getSection();
                                if (boundSection) {
                                    styleEditorWidget.unbindContext();
                                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                    try {
                                        for(_iterator = prevSections.entries()[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                            _step_value = _sliced_to_array(_step.value, 2), index = _step_value[0], prevSection = _step_value[1];
                                            if (boundSection === prevSection && index < newSections.length) {
                                                styleEditorWidget.bindContext(_this, newSections[index]);
                                            }
                                        }
                                    } catch (err) {
                                        _didIteratorError = true;
                                        _iteratorError = err;
                                    } finally{
                                        try {
                                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                _iterator.return();
                                            }
                                        } finally{
                                            if (_didIteratorError) {
                                                throw _iteratorError;
                                            }
                                        }
                                    }
                                }
                                _this.sectionsContainer.removeChildren();
                                fragment = document.createDocumentFragment();
                                index1 = 0;
                                elementToFocus = null;
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                try {
                                    for(_iterator1 = _this.sectionBlocks[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                        block = _step1.value;
                                        titleElement = block.titleElement();
                                        if (titleElement) {
                                            fragment.appendChild(titleElement);
                                        }
                                        _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                                        try {
                                            for(_iterator2 = block.sections[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                                                section = _step2.value;
                                                fragment.appendChild(section.element);
                                                if (index1 === focusedIndex) {
                                                    elementToFocus = section.element;
                                                }
                                                index1++;
                                            }
                                        } catch (err) {
                                            _didIteratorError2 = true;
                                            _iteratorError2 = err;
                                        } finally{
                                            try {
                                                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                                    _iterator2.return();
                                                }
                                            } finally{
                                                if (_didIteratorError2) {
                                                    throw _iteratorError2;
                                                }
                                            }
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError1 = true;
                                    _iteratorError1 = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                            _iterator1.return();
                                        }
                                    } finally{
                                        if (_didIteratorError1) {
                                            throw _iteratorError1;
                                        }
                                    }
                                }
                                _this.sectionsContainer.appendChild(fragment);
                                if (elementToFocus) {
                                    elementToFocus.focus();
                                }
                                if (focusedIndex >= index1) {
                                    _this.sectionBlocks[0].sections[0].element.focus();
                                }
                                _this.sectionsContainerFocusChanged();
                                if (_this.filterRegexInternal) {
                                    _this.updateFilter();
                                } else {
                                    _this.noMatchesElement.classList.toggle('hidden', _this.sectionBlocks.length > 0);
                                }
                                if (_this.lastRevealedProperty) {
                                    _this.decorator.highlightProperty(_this.lastRevealedProperty);
                                    _this.lastRevealedProperty = null;
                                }
                                _this.swatchPopoverHelper().reposition();
                                // Record the elements tool load time after the sidepane has loaded.
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.panelLoaded('elements', 'DevTools.Launch.Elements');
                                _this.dispatchEventToListeners("StylesUpdateCompleted" /* Events.StylesUpdateCompleted */ , {
                                    hasMatchedStyles: false
                                });
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "nodeStylesUpdatedForTest",
            value: function nodeStylesUpdatedForTest(_node, _rebuild) {
            // For sniffing in tests.
            }
        },
        {
            key: "rebuildSectionsForMatchedStyleRulesForTest",
            value: function rebuildSectionsForMatchedStyleRulesForTest(matchedStyles, computedStyles, parentsComputedStyles) {
                return this.rebuildSectionsForMatchedStyleRules(matchedStyles, computedStyles, parentsComputedStyles);
            }
        },
        {
            key: "rebuildSectionsForMatchedStyleRules",
            value: function rebuildSectionsForMatchedStyleRules(matchedStyles, computedStyles, parentsComputedStyles) {
                var _this = this;
                return _async_to_generator(function() {
                    var blocks, sectionIdx, lastParentNode, lastLayers, sawLayers, addLayerSeparator, refreshedURLs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, err, customHighlightPseudoRulesets, otherPseudoRulesets, pseudoRulesets, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _loop1, _iterator1, _step1, err, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop2, _iterator2, _step2, fontPaletteValuesRule, block, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _loop3, _iterator3, _step3, expandedByDefault, block1, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _loop4, _iterator4, _step4;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (_this.idleCallbackManager) {
                                    _this.idleCallbackManager.discard();
                                }
                                _this.idleCallbackManager = new IdleCallbackManager();
                                blocks = [
                                    new SectionBlock(null)
                                ];
                                sectionIdx = 0;
                                lastParentNode = null;
                                lastLayers = null;
                                sawLayers = false;
                                addLayerSeparator = function(style) {
                                    var parentRule = style.parentRule;
                                    if (_instanceof(parentRule, _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSRule.CSSStyleRule)) {
                                        var layers = parentRule.layers;
                                        if ((layers.length || lastLayers) && lastLayers !== layers) {
                                            var block = SectionBlock.createLayerBlock(parentRule);
                                            blocks.push(block);
                                            sawLayers = true;
                                            lastLayers = layers;
                                        }
                                    }
                                };
                                // We disable the layer widget initially. If we see a layer in
                                // the matched styles we reenable the button.
                                _LayersWidget_js__WEBPACK_IMPORTED_MODULE_22__.ButtonProvider.instance().item().setVisible(false);
                                refreshedURLs = new Set();
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    6,
                                    7,
                                    8
                                ]);
                                _loop = function() {
                                    var style, url, parentNode, block, lastBlock;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                style = _step.value;
                                                if (!(_core_root_root_js__WEBPACK_IMPORTED_MODULE_4__.Runtime.experiments.isEnabled("styles-pane-css-changes" /* Root.Runtime.ExperimentName.STYLES_PANE_CSS_CHANGES */ ) && style.parentRule)) return [
                                                    3,
                                                    2
                                                ];
                                                url = style.parentRule.resourceURL();
                                                if (!(url && !refreshedURLs.has(url))) return [
                                                    3,
                                                    2
                                                ];
                                                return [
                                                    4,
                                                    _this.trackURLForChanges(url)
                                                ];
                                            case 1:
                                                _state.sent();
                                                refreshedURLs.add(url);
                                                _state.label = 2;
                                            case 2:
                                                parentNode = matchedStyles.isInherited(style) ? matchedStyles.nodeForStyle(style) : null;
                                                if (!(parentNode && parentNode !== lastParentNode)) return [
                                                    3,
                                                    4
                                                ];
                                                lastParentNode = parentNode;
                                                return [
                                                    4,
                                                    SectionBlock.createInheritedNodeBlock(lastParentNode)
                                                ];
                                            case 3:
                                                block = _state.sent();
                                                blocks.push(block);
                                                _state.label = 4;
                                            case 4:
                                                addLayerSeparator(style);
                                                lastBlock = blocks[blocks.length - 1];
                                                if (lastBlock) {
                                                    _this.idleCallbackManager.schedule(function() {
                                                        var section = new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.StylePropertiesSection(_this, matchedStyles, style, sectionIdx, computedStyles, parentsComputedStyles);
                                                        sectionIdx++;
                                                        lastBlock.sections.push(section);
                                                    });
                                                }
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                };
                                _iterator = matchedStyles.nodeStyles()[Symbol.iterator]();
                                _state.label = 2;
                            case 2:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    5
                                ];
                                return [
                                    5,
                                    _ts_values(_loop())
                                ];
                            case 3:
                                _state.sent();
                                _state.label = 4;
                            case 4:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    8
                                ];
                            case 7:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 8:
                                customHighlightPseudoRulesets = Array.from(matchedStyles.customHighlightPseudoNames()).map(function(highlightName) {
                                    return {
                                        'highlightName': highlightName,
                                        'pseudoType': "highlight" /* Protocol.DOM.PseudoType.Highlight */ ,
                                        'pseudoStyles': matchedStyles.customHighlightPseudoStyles(highlightName)
                                    };
                                });
                                otherPseudoRulesets = _to_consumable_array(matchedStyles.pseudoTypes()).map(function(pseudoType) {
                                    return {
                                        'highlightName': null,
                                        'pseudoType': pseudoType,
                                        'pseudoStyles': matchedStyles.pseudoStyles(pseudoType)
                                    };
                                });
                                pseudoRulesets = customHighlightPseudoRulesets.concat(otherPseudoRulesets).sort(function(a, b) {
                                    // We want to show the ::before pseudos first, followed by the remaining pseudos
                                    // in alphabetical order.
                                    if (a.pseudoType === "before" /* Protocol.DOM.PseudoType.Before */  && b.pseudoType !== "before" /* Protocol.DOM.PseudoType.Before */ ) {
                                        return -1;
                                    }
                                    if (a.pseudoType !== "before" /* Protocol.DOM.PseudoType.Before */  && b.pseudoType === "before" /* Protocol.DOM.PseudoType.Before */ ) {
                                        return 1;
                                    }
                                    if (a.pseudoType < b.pseudoType) {
                                        return -1;
                                    }
                                    if (a.pseudoType > b.pseudoType) {
                                        return 1;
                                    }
                                    return 0;
                                });
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                _state.label = 9;
                            case 9:
                                _state.trys.push([
                                    9,
                                    14,
                                    15,
                                    16
                                ]);
                                _loop1 = function() {
                                    var _loop, pseudo, i;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _loop = function(i) {
                                                    var style, parentNode, block, block1, lastBlock;
                                                    return _ts_generator(this, function(_state) {
                                                        switch(_state.label){
                                                            case 0:
                                                                style = pseudo.pseudoStyles[i];
                                                                parentNode = matchedStyles.isInherited(style) ? matchedStyles.nodeForStyle(style) : null;
                                                                if (!(i === 0 || parentNode !== lastParentNode)) return [
                                                                    3,
                                                                    3
                                                                ];
                                                                lastLayers = null;
                                                                if (!parentNode) return [
                                                                    3,
                                                                    2
                                                                ];
                                                                return [
                                                                    4,
                                                                    SectionBlock.createInheritedPseudoTypeBlock(pseudo.pseudoType, pseudo.highlightName, parentNode)
                                                                ];
                                                            case 1:
                                                                block = _state.sent();
                                                                blocks.push(block);
                                                                return [
                                                                    3,
                                                                    3
                                                                ];
                                                            case 2:
                                                                block1 = SectionBlock.createPseudoTypeBlock(pseudo.pseudoType, pseudo.highlightName);
                                                                blocks.push(block1);
                                                                _state.label = 3;
                                                            case 3:
                                                                lastParentNode = parentNode;
                                                                addLayerSeparator(style);
                                                                lastBlock = blocks[blocks.length - 1];
                                                                _this.idleCallbackManager.schedule(function() {
                                                                    var section = new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.HighlightPseudoStylePropertiesSection(_this, matchedStyles, style, sectionIdx, computedStyles, parentsComputedStyles);
                                                                    sectionIdx++;
                                                                    lastBlock.sections.push(section);
                                                                });
                                                                return [
                                                                    2
                                                                ];
                                                        }
                                                    });
                                                };
                                                pseudo = _step1.value;
                                                lastParentNode = null;
                                                i = 0;
                                                _state.label = 1;
                                            case 1:
                                                if (!(i < pseudo.pseudoStyles.length)) return [
                                                    3,
                                                    4
                                                ];
                                                return [
                                                    5,
                                                    _ts_values(_loop(i))
                                                ];
                                            case 2:
                                                _state.sent();
                                                _state.label = 3;
                                            case 3:
                                                ++i;
                                                return [
                                                    3,
                                                    1
                                                ];
                                            case 4:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                };
                                _iterator1 = pseudoRulesets[Symbol.iterator]();
                                _state.label = 10;
                            case 10:
                                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                                    3,
                                    13
                                ];
                                return [
                                    5,
                                    _ts_values(_loop1())
                                ];
                            case 11:
                                _state.sent();
                                _state.label = 12;
                            case 12:
                                _iteratorNormalCompletion1 = true;
                                return [
                                    3,
                                    10
                                ];
                            case 13:
                                return [
                                    3,
                                    16
                                ];
                            case 14:
                                err = _state.sent();
                                _didIteratorError1 = true;
                                _iteratorError1 = err;
                                return [
                                    3,
                                    16
                                ];
                            case 15:
                                try {
                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                        _iterator1.return();
                                    }
                                } finally{
                                    if (_didIteratorError1) {
                                        throw _iteratorError1;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 16:
                                _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                                try {
                                    _loop2 = function() {
                                        var keyframesRule = _step2.value;
                                        var block = SectionBlock.createKeyframesBlock(keyframesRule.name().text);
                                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                        try {
                                            var _loop = function() {
                                                var keyframe = _step.value;
                                                _this.idleCallbackManager.schedule(function() {
                                                    block.sections.push(new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.KeyframePropertiesSection(_this, matchedStyles, keyframe.style, sectionIdx));
                                                    sectionIdx++;
                                                });
                                            };
                                            for(var _iterator = keyframesRule.keyframes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                                        } catch (err) {
                                            _didIteratorError = true;
                                            _iteratorError = err;
                                        } finally{
                                            try {
                                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                    _iterator.return();
                                                }
                                            } finally{
                                                if (_didIteratorError) {
                                                    throw _iteratorError;
                                                }
                                            }
                                        }
                                        blocks.push(block);
                                    };
                                    for(_iterator2 = matchedStyles.keyframes()[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true)_loop2();
                                } catch (err) {
                                    _didIteratorError2 = true;
                                    _iteratorError2 = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                            _iterator2.return();
                                        }
                                    } finally{
                                        if (_didIteratorError2) {
                                            throw _iteratorError2;
                                        }
                                    }
                                }
                                fontPaletteValuesRule = matchedStyles.fontPaletteValuesRule();
                                if (fontPaletteValuesRule) {
                                    block = SectionBlock.createFontPaletteValuesRuleBlock(fontPaletteValuesRule.name().text);
                                    _this.idleCallbackManager.schedule(function() {
                                        block.sections.push(new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.FontPaletteValuesRuleSection(_this, matchedStyles, fontPaletteValuesRule.style, sectionIdx));
                                        sectionIdx++;
                                    });
                                    blocks.push(block);
                                }
                                _iteratorNormalCompletion3 = true, _didIteratorError3 = false, _iteratorError3 = undefined;
                                try {
                                    _loop3 = function() {
                                        var positionTryRule = _step3.value;
                                        var block = SectionBlock.createPositionTryBlock(positionTryRule.name().text);
                                        _this.idleCallbackManager.schedule(function() {
                                            block.sections.push(new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.PositionTryRuleSection(_this, matchedStyles, positionTryRule.style, sectionIdx, positionTryRule.active()));
                                            sectionIdx++;
                                        });
                                        blocks.push(block);
                                    };
                                    for(_iterator3 = matchedStyles.positionTryRules()[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true)_loop3();
                                } catch (err) {
                                    _didIteratorError3 = true;
                                    _iteratorError3 = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                                            _iterator3.return();
                                        }
                                    } finally{
                                        if (_didIteratorError3) {
                                            throw _iteratorError3;
                                        }
                                    }
                                }
                                if (matchedStyles.registeredProperties().length > 0) {
                                    expandedByDefault = matchedStyles.registeredProperties().length <= MIN_FOLDED_SECTIONS_COUNT;
                                    block1 = SectionBlock.createRegisteredPropertiesBlock(expandedByDefault);
                                    _iteratorNormalCompletion4 = true, _didIteratorError4 = false, _iteratorError4 = undefined;
                                    try {
                                        _loop4 = function() {
                                            var propertyRule = _step4.value;
                                            _this.idleCallbackManager.schedule(function() {
                                                block1.sections.push(new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.RegisteredPropertiesSection(_this, matchedStyles, propertyRule.style(), sectionIdx, propertyRule.propertyName(), expandedByDefault));
                                                sectionIdx++;
                                            });
                                        };
                                        for(_iterator4 = matchedStyles.registeredProperties()[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true)_loop4();
                                    } catch (err) {
                                        _didIteratorError4 = true;
                                        _iteratorError4 = err;
                                    } finally{
                                        try {
                                            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                                                _iterator4.return();
                                            }
                                        } finally{
                                            if (_didIteratorError4) {
                                                throw _iteratorError4;
                                            }
                                        }
                                    }
                                    blocks.push(block1);
                                }
                                // If we have seen a layer in matched styles we enable
                                // the layer widget button.
                                if (sawLayers) {
                                    _LayersWidget_js__WEBPACK_IMPORTED_MODULE_22__.ButtonProvider.instance().item().setVisible(true);
                                } else if (_LayersWidget_js__WEBPACK_IMPORTED_MODULE_22__.LayersWidget.instance().isShowing()) {
                                    // Since the button for toggling the layers view is now hidden
                                    // we ensure that the layers view is not currently toggled.
                                    _ElementsPanel_js__WEBPACK_IMPORTED_MODULE_19__.ElementsPanel.instance().showToolbarPane(null, _LayersWidget_js__WEBPACK_IMPORTED_MODULE_22__.ButtonProvider.instance().item());
                                }
                                return [
                                    4,
                                    _this.idleCallbackManager.awaitDone()
                                ];
                            case 17:
                                _state.sent();
                                return [
                                    2,
                                    blocks
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createNewRuleInViaInspectorStyleSheet",
            value: function createNewRuleInViaInspectorStyleSheet() {
                var _this = this;
                return _async_to_generator(function() {
                    var cssModel, node, styleSheetHeader;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                cssModel = _this.cssModel();
                                node = _this.node();
                                if (!cssModel || !node) {
                                    return [
                                        2
                                    ];
                                }
                                _this.setUserOperation(true);
                                return [
                                    4,
                                    cssModel.requestViaInspectorStylesheet(node)
                                ];
                            case 1:
                                styleSheetHeader = _state.sent();
                                _this.setUserOperation(false);
                                return [
                                    4,
                                    _this.createNewRuleInStyleSheet(styleSheetHeader)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createNewRuleInStyleSheet",
            value: function createNewRuleInStyleSheet(styleSheetHeader) {
                var _this = this;
                return _async_to_generator(function() {
                    var text, lines, range;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!styleSheetHeader) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    styleSheetHeader.requestContent()
                                ];
                            case 1:
                                text = _state.sent().content || '';
                                lines = text.split('\n');
                                range = _models_text_utils_text_utils_js__WEBPACK_IMPORTED_MODULE_7__.TextRange.TextRange.createFromLocation(lines.length - 1, lines[lines.length - 1].length);
                                if (_this.sectionBlocks && _this.sectionBlocks.length > 0) {
                                    _this.addBlankSection(_this.sectionBlocks[0].sections[0], styleSheetHeader.id, range);
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "addBlankSection",
            value: function addBlankSection(insertAfterSection, styleSheetId, ruleLocation) {
                var node = this.node();
                var blankSection = new _StylePropertiesSection_js__WEBPACK_IMPORTED_MODULE_24__.BlankStylePropertiesSection(this, insertAfterSection.matchedStyles, node ? node.simpleSelector() : '', styleSheetId, ruleLocation, insertAfterSection.style(), 0);
                this.sectionsContainer.insertBefore(blankSection.element, insertAfterSection.element.nextSibling);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.sectionBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var block = _step.value;
                        var index = block.sections.indexOf(insertAfterSection);
                        if (index === -1) {
                            continue;
                        }
                        block.sections.splice(index + 1, 0, blankSection);
                        blankSection.startEditingSelector();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var sectionIdx = 0;
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = this.sectionBlocks[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var block1 = _step1.value;
                        var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                        try {
                            for(var _iterator2 = block1.sections[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                                var section = _step2.value;
                                section.setSectionIdx(sectionIdx);
                                sectionIdx++;
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                    _iterator2.return();
                                }
                            } finally{
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
            }
        },
        {
            key: "removeSection",
            value: function removeSection(section) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.sectionBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var block = _step.value;
                        var index = block.sections.indexOf(section);
                        if (index === -1) {
                            continue;
                        }
                        block.sections.splice(index, 1);
                        section.element.remove();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "filterRegex",
            value: function filterRegex() {
                return this.filterRegexInternal;
            }
        },
        {
            key: "updateFilter",
            value: function updateFilter() {
                var hasAnyVisibleBlock = false;
                var visibleSections = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.sectionBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var block = _step.value;
                        visibleSections += block.updateFilter();
                        hasAnyVisibleBlock = Boolean(visibleSections) || hasAnyVisibleBlock;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.noMatchesElement.classList.toggle('hidden', Boolean(hasAnyVisibleBlock));
                this.visibleSections = visibleSections;
            }
        },
        {
            key: "wasShown",
            value: function wasShown() {
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Context.Context.instance().setFlavor(StylesSidebarPane, this);
                _get(_get_prototype_of(StylesSidebarPane.prototype), "wasShown", this).call(this);
            }
        },
        {
            key: "willHide",
            value: function willHide() {
                this.hideAllPopovers();
                _get(_get_prototype_of(StylesSidebarPane.prototype), "willHide", this).call(this);
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Context.Context.instance().setFlavor(StylesSidebarPane, null);
            }
        },
        {
            key: "hideAllPopovers",
            value: function hideAllPopovers() {
                var _$_class_private_field_get, _$_class_private_field_get1;
                this.swatchPopoverHelperInternal.hide();
                this.imagePreviewPopover.hide();
                if (this.activeCSSAngle) {
                    this.activeCSSAngle.minify();
                    this.activeCSSAngle = null;
                }
                (_$_class_private_field_get = _class_private_field_get(this, _hintPopoverHelper)) === null || _$_class_private_field_get === void 0 ? void 0 : _$_class_private_field_get.hidePopover();
                (_$_class_private_field_get1 = _class_private_field_get(this, _genericPopoverHelper)) === null || _$_class_private_field_get1 === void 0 ? void 0 : _$_class_private_field_get1.hidePopover();
            }
        },
        {
            key: "getSectionBlockByName",
            value: function getSectionBlockByName(name) {
                return this.sectionBlocks.find(function(block) {
                    var _block_titleElement;
                    return ((_block_titleElement = block.titleElement()) === null || _block_titleElement === void 0 ? void 0 : _block_titleElement.textContent) === name;
                });
            }
        },
        {
            key: "allSections",
            value: function allSections() {
                var sections = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.sectionBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var block = _step.value;
                        sections = sections.concat(block.sections);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return sections;
            }
        },
        {
            key: "trackURLForChanges",
            value: function trackURLForChanges(url) {
                var _this = this;
                return _async_to_generator(function() {
                    var currentTracker, uiSourceCode, diffChangeCallback, newTracker;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                currentTracker = _class_private_field_get(_this, _urlToChangeTracker).get(url);
                                if (currentTracker) {
                                    _models_workspace_diff_workspace_diff_js__WEBPACK_IMPORTED_MODULE_9__.WorkspaceDiff.workspaceDiff().unsubscribeFromDiffChange(currentTracker.uiSourceCode, currentTracker.diffChangeCallback);
                                }
                                // We get a refreshed uiSourceCode each time because the underlying instance may be recreated.
                                uiSourceCode = _models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_8__.Workspace.WorkspaceImpl.instance().uiSourceCodeForURL(url);
                                if (!uiSourceCode) {
                                    return [
                                        2
                                    ];
                                }
                                diffChangeCallback = _this.refreshChangedLines.bind(_this, uiSourceCode);
                                _models_workspace_diff_workspace_diff_js__WEBPACK_IMPORTED_MODULE_9__.WorkspaceDiff.workspaceDiff().subscribeToDiffChange(uiSourceCode, diffChangeCallback);
                                newTracker = {
                                    uiSourceCode: uiSourceCode,
                                    changedLines: new Set(),
                                    diffChangeCallback: diffChangeCallback
                                };
                                _class_private_field_get(_this, _urlToChangeTracker).set(url, newTracker);
                                return [
                                    4,
                                    _this.refreshChangedLines(newTracker.uiSourceCode)
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "isPropertyChanged",
            value: function isPropertyChanged(property) {
                var _property_ownerStyle_parentRule;
                var url = (_property_ownerStyle_parentRule = property.ownerStyle.parentRule) === null || _property_ownerStyle_parentRule === void 0 ? void 0 : _property_ownerStyle_parentRule.resourceURL();
                if (!url) {
                    return false;
                }
                var changeTracker = _class_private_field_get(this, _urlToChangeTracker).get(url);
                if (!changeTracker) {
                    return false;
                }
                var changedLines = changeTracker.changedLines, formattedCurrentMapping = changeTracker.formattedCurrentMapping;
                var uiLocation = _models_bindings_bindings_js__WEBPACK_IMPORTED_MODULE_6__.CSSWorkspaceBinding.CSSWorkspaceBinding.instance().propertyUILocation(property, true);
                if (!uiLocation) {
                    return false;
                }
                if (!formattedCurrentMapping) {
                    // UILocation's lineNumber starts at 0, but changedLines start at 1.
                    return changedLines.has(uiLocation.lineNumber + 1);
                }
                var formattedLineNumber = formattedCurrentMapping.originalToFormatted(uiLocation.lineNumber, uiLocation.columnNumber)[0];
                return changedLines.has(formattedLineNumber + 1);
            }
        },
        {
            key: "updateChangeStatus",
            value: function updateChangeStatus() {
                if (!_class_private_field_get(this, _copyChangesButton)) {
                    return;
                }
                var hasChangedStyles = false;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = _class_private_field_get(this, _urlToChangeTracker).values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var changeTracker = _step.value;
                        if (changeTracker.changedLines.size > 0) {
                            hasChangedStyles = true;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                _class_private_field_get(this, _copyChangesButton).element.classList.toggle('hidden', !hasChangedStyles);
            }
        },
        {
            key: "refreshChangedLines",
            value: function refreshChangedLines(uiSourceCode) {
                var _this = this;
                return _async_to_generator(function() {
                    var changeTracker, diffResponse, changedLines, diff, formattedCurrentMapping, rows, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, row;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                changeTracker = _class_private_field_get(_this, _urlToChangeTracker).get(uiSourceCode.url());
                                if (!changeTracker) {
                                    return [
                                        2
                                    ];
                                }
                                return [
                                    4,
                                    _models_workspace_diff_workspace_diff_js__WEBPACK_IMPORTED_MODULE_9__.WorkspaceDiff.workspaceDiff().requestDiff(uiSourceCode, {
                                        shouldFormatDiff: true
                                    })
                                ];
                            case 1:
                                diffResponse = _state.sent();
                                changedLines = new Set();
                                changeTracker.changedLines = changedLines;
                                if (!diffResponse) {
                                    return [
                                        2
                                    ];
                                }
                                diff = diffResponse.diff, formattedCurrentMapping = diffResponse.formattedCurrentMapping;
                                rows = _ui_components_diff_view_diff_view_js__WEBPACK_IMPORTED_MODULE_11__.DiffView.buildDiffRows(diff).rows;
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = rows[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        row = _step.value;
                                        if (row.type === "addition" /* DiffView.DiffView.RowType.Addition */ ) {
                                            changedLines.add(row.currentLineNumber);
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                changeTracker.formattedCurrentMapping = formattedCurrentMapping;
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "getFormattedChanges",
            value: function getFormattedChanges() {
                var _this = this;
                return _async_to_generator(function() {
                    var allChanges, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, url, uiSourceCode, diffResponse, changes, err;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                allChanges = '';
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    7,
                                    8,
                                    9
                                ]);
                                _iterator = _class_private_field_get(_this, _urlToChangeTracker)[Symbol.iterator]();
                                _state.label = 2;
                            case 2:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    6
                                ];
                                _step_value = _sliced_to_array(_step.value, 2), url = _step_value[0], uiSourceCode = _step_value[1].uiSourceCode;
                                return [
                                    4,
                                    _models_workspace_diff_workspace_diff_js__WEBPACK_IMPORTED_MODULE_9__.WorkspaceDiff.workspaceDiff().requestDiff(uiSourceCode, {
                                        shouldFormatDiff: true
                                    })
                                ];
                            case 3:
                                diffResponse = _state.sent();
                                // Diff array with real diff will contain at least 2 lines.
                                if (!diffResponse || (diffResponse === null || diffResponse === void 0 ? void 0 : diffResponse.diff.length) < 2) {
                                    return [
                                        3,
                                        5
                                    ];
                                }
                                return [
                                    4,
                                    _panels_utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.PanelUtils.formatCSSChangesFromDiff(diffResponse.diff)
                                ];
                            case 4:
                                changes = _state.sent();
                                if (changes.length > 0) {
                                    allChanges += "/* ".concat(escapeUrlAsCssComment(url), " */\n\n").concat(changes, "\n\n");
                                }
                                _state.label = 5;
                            case 5:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    2
                                ];
                            case 6:
                                return [
                                    3,
                                    9
                                ];
                            case 7:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    9
                                ];
                            case 8:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 9:
                                return [
                                    2,
                                    allChanges
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "clipboardCopy",
            value: function clipboardCopy(_event) {
                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.actionTaken(_core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.UserMetrics.Action.StyleRuleCopied);
            }
        },
        {
            key: "createStylesSidebarToolbar",
            value: function createStylesSidebarToolbar() {
                var container = this.contentElement.createChild('div', 'styles-sidebar-pane-toolbar-container');
                var hbox = container.createChild('div', 'hbox styles-sidebar-pane-toolbar');
                var toolbar = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Toolbar.Toolbar('styles-pane-toolbar', hbox);
                var filterInput = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Toolbar.ToolbarFilter(undefined, 1, 1, undefined, undefined, false);
                filterInput.addEventListener("TextChanged" /* UI.Toolbar.ToolbarInput.Event.TextChanged */ , this.onFilterChanged, this);
                toolbar.appendToolbarItem(filterInput);
                void toolbar.appendItemsAtLocation('styles-sidebarpane-toolbar');
                this.toolbar = toolbar;
                if (_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ActionRegistry.ActionRegistry.instance().hasAction('freestyler.style-tab-context')) {
                    toolbar.appendToolbarItem(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Toolbar.Toolbar.createActionButtonForId('freestyler.style-tab-context'));
                }
                var toolbarPaneContainer = container.createChild('div', 'styles-sidebar-toolbar-pane-container');
                var toolbarPaneContent = toolbarPaneContainer.createChild('div', 'styles-sidebar-toolbar-pane');
                return toolbarPaneContent;
            }
        },
        {
            key: "showToolbarPane",
            value: function showToolbarPane(widget, toggle) {
                if (this.pendingWidgetToggle) {
                    this.pendingWidgetToggle.setToggled(false);
                }
                this.pendingWidgetToggle = toggle;
                if (this.animatedToolbarPane) {
                    this.pendingWidget = widget;
                } else {
                    this.startToolbarPaneAnimation(widget);
                }
                if (widget && toggle) {
                    toggle.setToggled(true);
                }
            }
        },
        {
            key: "appendToolbarItem",
            value: function appendToolbarItem(item) {
                if (this.toolbar) {
                    this.toolbar.appendToolbarItem(item);
                }
            }
        },
        {
            key: "startToolbarPaneAnimation",
            value: function startToolbarPaneAnimation(widget) {
                if (widget === this.currentToolbarPane) {
                    return;
                }
                if (widget && this.currentToolbarPane) {
                    this.currentToolbarPane.detach();
                    widget.show(this.toolbarPaneElement);
                    this.currentToolbarPane = widget;
                    this.currentToolbarPane.focus();
                    return;
                }
                this.animatedToolbarPane = widget;
                if (this.currentToolbarPane) {
                    this.toolbarPaneElement.style.animationName = 'styles-element-state-pane-slideout';
                } else if (widget) {
                    this.toolbarPaneElement.style.animationName = 'styles-element-state-pane-slidein';
                }
                if (widget) {
                    widget.show(this.toolbarPaneElement);
                }
                var listener = onAnimationEnd.bind(this);
                this.toolbarPaneElement.addEventListener('animationend', listener, false);
                function onAnimationEnd() {
                    this.toolbarPaneElement.style.removeProperty('animation-name');
                    this.toolbarPaneElement.removeEventListener('animationend', listener, false);
                    if (this.currentToolbarPane) {
                        this.currentToolbarPane.detach();
                    }
                    this.currentToolbarPane = this.animatedToolbarPane;
                    if (this.currentToolbarPane) {
                        this.currentToolbarPane.focus();
                    }
                    this.animatedToolbarPane = null;
                    if (this.pendingWidget) {
                        this.startToolbarPaneAnimation(this.pendingWidget);
                        this.pendingWidget = null;
                    }
                }
            }
        },
        {
            key: "createRenderingShortcuts",
            value: function createRenderingShortcuts() {
                var prefersColorSchemeSetting = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('emulated-css-media-feature-prefers-color-scheme');
                var autoDarkModeSetting = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('emulate-auto-dark-mode');
                var decorateStatus = function(condition, title) {
                    return "".concat(condition ? '✓ ' : '').concat(title);
                };
                var button = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Toolbar.ToolbarToggle(i18nString(UIStrings.toggleRenderingEmulations), 'brush', 'brush-filled', undefined, false);
                button.element.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.dropDown('rendering-emulations').track({
                    click: true
                })));
                button.element.addEventListener('click', function(event) {
                    var boundingRect = button.element.getBoundingClientRect();
                    var menu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ContextMenu.ContextMenu(event, {
                        x: boundingRect.left,
                        y: boundingRect.bottom
                    });
                    var preferredColorScheme = prefersColorSchemeSetting.get();
                    var isLightColorScheme = preferredColorScheme === 'light';
                    var isDarkColorScheme = preferredColorScheme === 'dark';
                    var isAutoDarkEnabled = autoDarkModeSetting.get();
                    var lightColorSchemeOption = decorateStatus(isLightColorScheme, 'prefers-color-scheme: light');
                    var darkColorSchemeOption = decorateStatus(isDarkColorScheme, 'prefers-color-scheme: dark');
                    var autoDarkModeOption = decorateStatus(isAutoDarkEnabled, i18nString(UIStrings.automaticDarkMode));
                    menu.defaultSection().appendItem(lightColorSchemeOption, function() {
                        autoDarkModeSetting.set(false);
                        prefersColorSchemeSetting.set(isLightColorScheme ? '' : 'light');
                        button.setToggled(Boolean(prefersColorSchemeSetting.get()));
                    }, {
                        jslogContext: 'prefer-light-color-scheme'
                    });
                    menu.defaultSection().appendItem(darkColorSchemeOption, function() {
                        autoDarkModeSetting.set(false);
                        prefersColorSchemeSetting.set(isDarkColorScheme ? '' : 'dark');
                        button.setToggled(Boolean(prefersColorSchemeSetting.get()));
                    }, {
                        jslogContext: 'prefer-dark-color-scheme'
                    });
                    menu.defaultSection().appendItem(autoDarkModeOption, function() {
                        autoDarkModeSetting.set(!isAutoDarkEnabled);
                        button.setToggled(Boolean(prefersColorSchemeSetting.get()));
                    }, {
                        jslogContext: 'emulate-auto-dark-mode'
                    });
                    void menu.show();
                    event.stopPropagation();
                }, {
                    capture: true
                });
                return button;
            }
        },
        {
            key: "createCopyAllChangesButton",
            value: function createCopyAllChangesButton() {
                var copyAllChangesButton = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Toolbar.ToolbarButton(i18nString(UIStrings.copyAllCSSChanges), 'copy');
                // TODO(1296947): implement a dedicated component to share between all copy buttons
                copyAllChangesButton.element.setAttribute('data-content', i18nString(UIStrings.copiedToClipboard));
                var timeout;
                var _this = this;
                copyAllChangesButton.addEventListener("Click" /* UI.Toolbar.ToolbarButton.Events.Click */ , /*#__PURE__*/ _async_to_generator(function() {
                    var allChanges;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.getFormattedChanges()
                                ];
                            case 1:
                                allChanges = _state.sent();
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(allChanges);
                                _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.styleTextCopied(2 /* Host.UserMetrics.StyleTextCopied.AllChangesViaStylesPane */ );
                                if (timeout) {
                                    clearTimeout(timeout);
                                    timeout = undefined;
                                }
                                copyAllChangesButton.element.classList.add('copied-to-clipboard');
                                timeout = window.setTimeout(function() {
                                    copyAllChangesButton.element.classList.remove('copied-to-clipboard');
                                    timeout = undefined;
                                }, 2000);
                                return [
                                    2
                                ];
                        }
                    });
                }));
                return copyAllChangesButton;
            }
        }
    ], [
        {
            key: "instance",
            value: function instance(opts) {
                if (!stylesSidebarPaneInstance || (opts === null || opts === void 0 ? void 0 : opts.forceNew)) {
                    stylesSidebarPaneInstance = new StylesSidebarPane();
                }
                return stylesSidebarPaneInstance;
            }
        },
        {
            key: "ignoreErrorsForProperty",
            value: function ignoreErrorsForProperty(property) {
                function hasUnknownVendorPrefix(string) {
                    return !string.startsWith('-webkit-') && /^[-_][\w\d]+-\w/.test(string);
                }
                var name = property.name.toLowerCase();
                // IE hack.
                if (name.charAt(0) === '_') {
                    return true;
                }
                // IE has a different format for this.
                if (name === 'filter') {
                    return true;
                }
                // Common IE-specific property prefix.
                if (name.startsWith('scrollbar-')) {
                    return true;
                }
                if (hasUnknownVendorPrefix(name)) {
                    return true;
                }
                var value = property.value.toLowerCase();
                // IE hack.
                if (value.endsWith('\\9')) {
                    return true;
                }
                if (hasUnknownVendorPrefix(value)) {
                    return true;
                }
                return false;
            }
        },
        {
            key: "formatLeadingProperties",
            value: function formatLeadingProperties(section) {
                var selectorText = section.headerText();
                var indent = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Settings.Settings.instance().moduleSetting('text-editor-indent').get();
                var style = section.style();
                var lines = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    // Invalid property should also be copied.
                    // For example: *display: inline.
                    for(var _iterator = style.leadingProperties()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var property = _step.value;
                        if (property.disabled) {
                            lines.push("".concat(indent, "/* ").concat(property.name, ": ").concat(property.value, "; */"));
                        } else {
                            lines.push("".concat(indent).concat(property.name, ": ").concat(property.value, ";"));
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var allDeclarationText = lines.join('\n');
                var ruleText = "".concat(selectorText, " {\n").concat(allDeclarationText, "\n}");
                return {
                    allDeclarationText: allDeclarationText,
                    ruleText: ruleText
                };
            }
        }
    ]);
    return StylesSidebarPane;
}(_core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.ObjectWrapper.eventMixin(_ElementsSidebarPane_js__WEBPACK_IMPORTED_MODULE_20__.ElementsSidebarPane));
function innerDoUpdate(signal) {
    return _innerDoUpdate1.apply(this, arguments);
}
function _innerDoUpdate1() {
    _innerDoUpdate1 = _async_to_generator(function(signal) {
        var _this, _this_node, matchedStyles, nodeId, parentNodeId, _ref, computedStyles, parentsComputedStyles;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _this = this;
                    if (!this.initialUpdateCompleted) {
                        window.setTimeout(function() {
                            if (signal.aborted) {
                                return;
                            }
                            if (!_this.initialUpdateCompleted) {
                                // the spinner will get automatically removed when innerRebuildUpdate is called
                                _this.sectionsContainer.createChild('span', 'spinner');
                            }
                        }, 200 /* only spin for loading time > 200ms to avoid unpleasant render flashes */ );
                    }
                    return [
                        4,
                        this.fetchMatchedCascade()
                    ];
                case 1:
                    matchedStyles = _state.sent();
                    if (signal.aborted) {
                        return [
                            2
                        ];
                    }
                    nodeId = (_this_node = this.node()) === null || _this_node === void 0 ? void 0 : _this_node.id;
                    parentNodeId = matchedStyles === null || matchedStyles === void 0 ? void 0 : matchedStyles.getParentLayoutNodeId();
                    return [
                        4,
                        Promise.all([
                            this.fetchComputedStylesFor(nodeId),
                            this.fetchComputedStylesFor(parentNodeId)
                        ])
                    ];
                case 2:
                    _ref = _sliced_to_array.apply(void 0, [
                        _state.sent(),
                        2
                    ]), computedStyles = _ref[0], parentsComputedStyles = _ref[1];
                    if (signal.aborted) {
                        return [
                            2
                        ];
                    }
                    return [
                        4,
                        this.innerRebuildUpdate(signal, matchedStyles, computedStyles, parentsComputedStyles)
                    ];
                case 3:
                    _state.sent();
                    if (signal.aborted) {
                        return [
                            2
                        ];
                    }
                    if (!this.initialUpdateCompleted) {
                        this.initialUpdateCompleted = true;
                        this.appendToolbarItem(this.createRenderingShortcuts());
                        if (_core_root_root_js__WEBPACK_IMPORTED_MODULE_4__.Runtime.experiments.isEnabled("styles-pane-css-changes" /* Root.Runtime.ExperimentName.STYLES_PANE_CSS_CHANGES */ )) {
                            _class_private_field_set(this, _copyChangesButton, this.createCopyAllChangesButton());
                            this.appendToolbarItem(_class_private_field_get(this, _copyChangesButton));
                            _class_private_field_get(this, _copyChangesButton).element.classList.add('hidden');
                        }
                        this.dispatchEventToListeners("InitialUpdateCompleted" /* Events.InitialUpdateCompleted */ );
                    }
                    this.nodeStylesUpdatedForTest(this.node(), true);
                    this.dispatchEventToListeners("StylesUpdateCompleted" /* Events.StylesUpdateCompleted */ , {
                        hasMatchedStyles: this.hasMatchedStyles
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return _innerDoUpdate1.apply(this, arguments);
}
var MAX_LINK_LENGTH = 23;
var _expanded = /*#__PURE__*/ new WeakMap(), _icon = /*#__PURE__*/ new WeakMap();
var SectionBlock = /*#__PURE__*/ function() {
    "use strict";
    function SectionBlock(titleElement, expandable, expandedByDefault) {
        var _this = this;
        _class_call_check(this, SectionBlock);
        _define_property(this, "titleElementInternal", void 0);
        _define_property(this, "sections", void 0);
        _class_private_field_init(this, _expanded, {
            writable: true,
            value: false
        });
        _class_private_field_init(this, _icon, {
            writable: true,
            value: void 0
        });
        this.titleElementInternal = titleElement;
        this.sections = [];
        _class_private_field_set(this, _expanded, expandedByDefault !== null && expandedByDefault !== void 0 ? expandedByDefault : false);
        if (expandable && _instanceof(titleElement, HTMLElement)) {
            _class_private_field_set(this, _icon, _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_12__.Icon.create(_class_private_field_get(this, _expanded) ? 'triangle-down' : 'triangle-right', 'section-block-expand-icon'));
            titleElement.classList.toggle('empty-section', !_class_private_field_get(this, _expanded));
            _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ARIAUtils.setExpanded(titleElement, _class_private_field_get(this, _expanded));
            titleElement.appendChild(_class_private_field_get(this, _icon));
            // Intercept focus to avoid highlight on click.
            titleElement.tabIndex = -1;
            titleElement.addEventListener('click', function() {
                return _this.expand(!_class_private_field_get(_this, _expanded));
            }, false);
        }
    }
    _create_class(SectionBlock, [
        {
            key: "expand",
            value: function expand(expand) {
                if (!this.titleElementInternal || !_class_private_field_get(this, _icon)) {
                    return;
                }
                this.titleElementInternal.classList.toggle('empty-section', !expand);
                _class_private_field_get(this, _icon).name = expand ? 'triangle-down' : 'triangle-right';
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.ARIAUtils.setExpanded(this.titleElementInternal, expand);
                _class_private_field_set(this, _expanded, expand);
                this.sections.forEach(function(section) {
                    return section.element.classList.toggle('hidden', !expand);
                });
            }
        },
        {
            key: "updateFilter",
            value: function updateFilter() {
                var hasAnyVisibleSection = false;
                var numVisibleSections = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.sections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var section = _step.value;
                        numVisibleSections += section.updateFilter() ? 1 : 0;
                        hasAnyVisibleSection = section.updateFilter() || hasAnyVisibleSection;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this.titleElementInternal) {
                    this.titleElementInternal.classList.toggle('hidden', !hasAnyVisibleSection);
                }
                return numVisibleSections;
            }
        },
        {
            key: "titleElement",
            value: function titleElement() {
                return this.titleElementInternal;
            }
        }
    ], [
        {
            key: "createPseudoTypeBlock",
            value: function createPseudoTypeBlock(pseudoType, pseudoArgument) {
                var separatorElement = document.createElement('div');
                separatorElement.className = 'sidebar-separator';
                separatorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.sectionHeader('pseudotype')));
                var pseudoArgumentString = pseudoArgument ? "(".concat(pseudoArgument, ")") : '';
                var pseudoTypeString = "".concat(pseudoType).concat(pseudoArgumentString);
                separatorElement.textContent = i18nString(UIStrings.pseudoSElement, {
                    PH1: pseudoTypeString
                });
                return new SectionBlock(separatorElement);
            }
        },
        {
            key: "createInheritedPseudoTypeBlock",
            value: function createInheritedPseudoTypeBlock(pseudoType, pseudoArgument, node) {
                return _async_to_generator(function() {
                    var separatorElement, pseudoArgumentString, pseudoTypeString, link;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                separatorElement = document.createElement('div');
                                separatorElement.className = 'sidebar-separator';
                                separatorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.sectionHeader('inherited-pseudotype')));
                                pseudoArgumentString = pseudoArgument ? "(".concat(pseudoArgument, ")") : '';
                                pseudoTypeString = "".concat(pseudoType).concat(pseudoArgumentString);
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.createTextChild(separatorElement, i18nString(UIStrings.inheritedFromSPseudoOf, {
                                    PH1: pseudoTypeString
                                }));
                                return [
                                    4,
                                    _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Linkifier.Linkifier.linkify(node, {
                                        preventKeyboardFocus: true,
                                        tooltip: undefined
                                    })
                                ];
                            case 1:
                                link = _state.sent();
                                separatorElement.appendChild(link);
                                return [
                                    2,
                                    new SectionBlock(separatorElement)
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createRegisteredPropertiesBlock",
            value: function createRegisteredPropertiesBlock(expandedByDefault) {
                var separatorElement = document.createElement('div');
                var block = new SectionBlock(separatorElement, true, expandedByDefault);
                separatorElement.className = 'sidebar-separator';
                separatorElement.appendChild(document.createTextNode(REGISTERED_PROPERTY_SECTION_NAME));
                return block;
            }
        },
        {
            key: "createKeyframesBlock",
            value: function createKeyframesBlock(keyframesName) {
                var separatorElement = document.createElement('div');
                separatorElement.className = 'sidebar-separator';
                separatorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.sectionHeader('keyframes')));
                separatorElement.textContent = "@keyframes ".concat(keyframesName);
                return new SectionBlock(separatorElement);
            }
        },
        {
            key: "createFontPaletteValuesRuleBlock",
            value: function createFontPaletteValuesRuleBlock(name) {
                var separatorElement = document.createElement('div');
                separatorElement.className = 'sidebar-separator';
                separatorElement.textContent = "@font-palette-values ".concat(name);
                return new SectionBlock(separatorElement);
            }
        },
        {
            key: "createPositionTryBlock",
            value: function createPositionTryBlock(positionTryName) {
                var separatorElement = document.createElement('div');
                separatorElement.className = 'sidebar-separator';
                separatorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.sectionHeader('position-try')));
                separatorElement.textContent = "@position-try ".concat(positionTryName);
                return new SectionBlock(separatorElement);
            }
        },
        {
            key: "createInheritedNodeBlock",
            value: function createInheritedNodeBlock(node) {
                return _async_to_generator(function() {
                    var separatorElement, link;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                separatorElement = document.createElement('div');
                                separatorElement.className = 'sidebar-separator';
                                separatorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.sectionHeader('inherited')));
                                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.createTextChild(separatorElement, i18nString(UIStrings.inheritedFroms));
                                return [
                                    4,
                                    _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Linkifier.Linkifier.linkify(node, {
                                        preventKeyboardFocus: true,
                                        tooltip: undefined
                                    })
                                ];
                            case 1:
                                link = _state.sent();
                                separatorElement.appendChild(link);
                                return [
                                    2,
                                    new SectionBlock(separatorElement)
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "createLayerBlock",
            value: function createLayerBlock(rule) {
                var separatorElement = document.createElement('div');
                separatorElement.className = 'sidebar-separator layer-separator';
                separatorElement.setAttribute('jslog', "".concat(_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_16__.sectionHeader('layer')));
                _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.createTextChild(separatorElement.createChild('div'), i18nString(UIStrings.layer));
                var layers = rule.layers;
                if (!layers.length && rule.origin === "user-agent" /* Protocol.CSS.StyleSheetOrigin.UserAgent */ ) {
                    var name = rule.origin === "user-agent" /* Protocol.CSS.StyleSheetOrigin.UserAgent */  ? '\xa0user\xa0agent\xa0stylesheet' : '\xa0implicit\xa0outer\xa0layer';
                    _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.createTextChild(separatorElement.createChild('div'), name);
                    return new SectionBlock(separatorElement);
                }
                var layerLink = separatorElement.createChild('button');
                layerLink.className = 'link';
                layerLink.title = i18nString(UIStrings.clickToRevealLayer);
                var name1 = layers.map(function(layer) {
                    return _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSModel.CSSModel.readableLayerName(layer.text);
                }).join('.');
                layerLink.textContent = name1;
                layerLink.onclick = function() {
                    return _LayersWidget_js__WEBPACK_IMPORTED_MODULE_22__.LayersWidget.instance().revealLayer(name1);
                };
                return new SectionBlock(separatorElement);
            }
        }
    ]);
    return SectionBlock;
}();
var IdleCallbackManager = /*#__PURE__*/ function() {
    "use strict";
    function IdleCallbackManager() {
        _class_call_check(this, IdleCallbackManager);
        _define_property(this, "discarded", void 0);
        _define_property(this, "promises", void 0);
        _define_property(this, "queue", void 0);
        this.discarded = false;
        this.promises = [];
        this.queue = [];
    }
    _create_class(IdleCallbackManager, [
        {
            key: "discard",
            value: function discard() {
                this.discarded = true;
            }
        },
        {
            key: "schedule",
            value: function schedule(fn) {
                var _this = this;
                if (this.discarded) {
                    return;
                }
                var promise = new Promise(function(resolve, reject) {
                    _this.queue.push({
                        fn: fn,
                        resolve: resolve,
                        reject: reject
                    });
                });
                this.promises.push(promise);
                this.scheduleIdleCallback(/* timeout=*/ 100);
            }
        },
        {
            key: "scheduleIdleCallback",
            value: function scheduleIdleCallback(timeout) {
                var _this = this;
                window.requestIdleCallback(function() {
                    var next = _this.queue.shift();
                    (0,_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.assertNotNullOrUndefined)(next);
                    try {
                        if (!_this.discarded) {
                            next.fn();
                        }
                        next.resolve();
                    } catch (err) {
                        next.reject(err);
                    }
                }, {
                    timeout: timeout
                });
            }
        },
        {
            key: "awaitDone",
            value: function awaitDone() {
                return Promise.all(this.promises);
            }
        }
    ]);
    return IdleCallbackManager;
}();
function quoteFamilyName(familyName) {
    return "'".concat(familyName.replaceAll('\'', '\\\''), "'");
}
var CSSPropertyPrompt = /*#__PURE__*/ function(_UI_TextPrompt_TextPrompt) {
    "use strict";
    _inherits(CSSPropertyPrompt, _UI_TextPrompt_TextPrompt);
    var _super = _create_super(CSSPropertyPrompt);
    function CSSPropertyPrompt(treeElement, isEditingName) {
        _class_call_check(this, CSSPropertyPrompt);
        var _this;
        // Use the same callback both for applyItemCallback and acceptItemCallback.
        _this = _super.call(this);
        _define_property(_assert_this_initialized(_this), "isColorAware", void 0);
        _define_property(_assert_this_initialized(_this), "cssCompletions", void 0);
        _define_property(_assert_this_initialized(_this), "selectedNodeComputedStyles", void 0);
        _define_property(_assert_this_initialized(_this), "parentNodeComputedStyles", void 0);
        _define_property(_assert_this_initialized(_this), "treeElement", void 0);
        _define_property(_assert_this_initialized(_this), "isEditingName", void 0);
        _define_property(_assert_this_initialized(_this), "cssVariables", void 0);
        _this.initialize(_this.buildPropertyCompletions.bind(_assert_this_initialized(_this)), _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.StyleValueDelimiters);
        var cssMetadata = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata();
        _this.isColorAware = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().isColorAwareProperty(treeElement.property.name);
        _this.cssCompletions = [];
        var node = treeElement.node();
        if (isEditingName) {
            _this.cssCompletions = cssMetadata.allProperties();
            if (node && !node.isSVGNode()) {
                _this.cssCompletions = _this.cssCompletions.filter(function(property) {
                    return !cssMetadata.isSVGProperty(property);
                });
            }
        } else {
            _this.cssCompletions = cssMetadata.getPropertyValues(treeElement.property.name);
            if (node && cssMetadata.isFontFamilyProperty(treeElement.property.name)) {
                var _this_cssCompletions;
                var fontFamilies = node.domModel().cssModel().fontFaces().map(function(font) {
                    return quoteFamilyName(font.getFontFamily());
                });
                (_this_cssCompletions = _this.cssCompletions).unshift.apply(_this_cssCompletions, _to_consumable_array(fontFamilies));
            }
        }
        /**
         * Computed styles cache populated for flexbox features.
         */ _this.selectedNodeComputedStyles = null;
        /**
         * Computed styles cache populated for flexbox features.
         */ _this.parentNodeComputedStyles = null;
        _this.treeElement = treeElement;
        _this.isEditingName = isEditingName;
        _this.cssVariables = treeElement.matchedStyles().availableCSSVariables(treeElement.property.ownerStyle);
        if (_this.cssVariables.length < 1000) {
            _this.cssVariables.sort(_core_platform_platform_js__WEBPACK_IMPORTED_MODULE_3__.StringUtilities.naturalOrderComparator);
        } else {
            _this.cssVariables.sort();
        }
        if (!isEditingName) {
            _this.disableDefaultSuggestionForEmptyInput();
            // If a CSS value is being edited that has a numeric or hex substring, hint that precision modifier shortcuts are available.
            if (treeElement && treeElement.valueElement) {
                var cssValueText = treeElement.valueElement.textContent;
                var cmdOrCtrl = _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.Platform.isMac() ? 'Cmd' : 'Ctrl';
                var optionOrAlt = _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.Platform.isMac() ? 'Option' : 'Alt';
                if (cssValueText !== null) {
                    if (cssValueText.match(/#[\da-f]{3,6}$/i)) {
                        _this.setTitle(i18nString(UIStrings.incrementdecrementWithMousewheelOne, {
                            PH1: cmdOrCtrl,
                            PH2: optionOrAlt
                        }));
                    } else if (cssValueText.match(/\d+/)) {
                        _this.setTitle(i18nString(UIStrings.incrementdecrementWithMousewheelHundred, {
                            PH1: cmdOrCtrl,
                            PH2: optionOrAlt
                        }));
                    }
                }
            }
        }
        return _this;
    }
    _create_class(CSSPropertyPrompt, [
        {
            key: "onKeyDown",
            value: function onKeyDown(event) {
                var keyboardEvent = event;
                switch(keyboardEvent.key){
                    case 'ArrowUp':
                    case 'ArrowDown':
                    case 'PageUp':
                    case 'PageDown':
                        if (!this.isSuggestBoxVisible() && this.handleNameOrValueUpDown(keyboardEvent)) {
                            keyboardEvent.preventDefault();
                            return;
                        }
                        break;
                    case 'Enter':
                        if (keyboardEvent.shiftKey) {
                            return;
                        }
                        // Accept any available autocompletions and advance to the next field.
                        this.tabKeyPressed();
                        keyboardEvent.preventDefault();
                        return;
                    case ' ':
                        if (this.isEditingName) {
                            // Since property names cannot contain a space
                            // we accept available autocompletions for property name when the user presses space.
                            this.tabKeyPressed();
                            keyboardEvent.preventDefault();
                            return;
                        }
                }
                _get(_get_prototype_of(CSSPropertyPrompt.prototype), "onKeyDown", this).call(this, keyboardEvent);
            }
        },
        {
            key: "onMouseWheel",
            value: function onMouseWheel(event) {
                if (this.handleNameOrValueUpDown(event)) {
                    event.consume(true);
                    return;
                }
                _get(_get_prototype_of(CSSPropertyPrompt.prototype), "onMouseWheel", this).call(this, event);
            }
        },
        {
            key: "tabKeyPressed",
            value: function tabKeyPressed() {
                this.acceptAutoComplete();
                // Always tab to the next field.
                return false;
            }
        },
        {
            key: "handleNameOrValueUpDown",
            value: function handleNameOrValueUpDown(event) {
                function finishHandler(_originalValue, _replacementString) {
                    // Synthesize property text disregarding any comments, custom whitespace etc.
                    if (this.treeElement.nameElement && this.treeElement.valueElement) {
                        void this.treeElement.applyStyleText(this.treeElement.nameElement.textContent + ': ' + this.treeElement.valueElement.textContent, false);
                    }
                }
                function customNumberHandler(prefix, number, suffix) {
                    if (number !== 0 && !suffix.length && _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().isLengthProperty(this.treeElement.property.name) && !this.treeElement.property.value.toLowerCase().startsWith('calc(')) {
                        suffix = 'px';
                    }
                    return prefix + number + suffix;
                }
                // Handle numeric value increment/decrement only at this point.
                if (!this.isEditingName && this.treeElement.valueElement && _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.handleElementValueModifications(event, this.treeElement.valueElement, finishHandler.bind(this), this.isValueSuggestion.bind(this), customNumberHandler.bind(this))) {
                    return true;
                }
                return false;
            }
        },
        {
            key: "isValueSuggestion",
            value: function isValueSuggestion(word) {
                if (!word) {
                    return false;
                }
                word = word.toLowerCase();
                return this.cssCompletions.indexOf(word) !== -1 || word.startsWith('--');
            }
        },
        {
            key: "buildPropertyCompletions",
            value: function buildPropertyCompletions(expression, query, force) {
                var _this = this;
                return _async_to_generator(function() {
                    var lowerQuery, editingVariable, prefixResults, anywhereResults, node, nameValuePresets, results, userEnteredText, i, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, result, valuePreset, ensureComputedStyles, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, result1, iconInfo, icon, width, height, err;
                    function filterCompletions(completion, variable, nameValue) {
                        var index = completion.toLowerCase().indexOf(lowerQuery);
                        var result = {
                            text: completion,
                            title: undefined,
                            subtitle: undefined,
                            priority: undefined,
                            isSecondary: undefined,
                            subtitleRenderer: undefined,
                            selectionRange: undefined,
                            hideGhostText: undefined,
                            iconElement: undefined,
                            isCSSVariableColor: false
                        };
                        if (variable) {
                            var computedValue = this.treeElement.matchedStyles().computeCSSVariable(this.treeElement.property.ownerStyle, completion);
                            if (computedValue) {
                                var color = _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Color.parse(computedValue.value);
                                if (color) {
                                    result.subtitleRenderer = colorSwatchRenderer.bind(null, color);
                                    result.isCSSVariableColor = true;
                                } else {
                                    result.subtitleRenderer = computedValueSubtitleRenderer.bind(null, computedValue.value);
                                }
                            }
                        }
                        if (nameValue) {
                            result.hideGhostText = true;
                        }
                        if (index === 0) {
                            result.priority = this.isEditingName ? _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().propertyUsageWeight(completion) : 1;
                            prefixResults.push(result);
                        } else if (index > -1) {
                            anywhereResults.push(result);
                        }
                    }
                    function colorSwatchRenderer(color) {
                        var swatch = new _ui_legacy_components_inline_editor_inline_editor_js__WEBPACK_IMPORTED_MODULE_13__.ColorSwatch.ColorSwatch();
                        swatch.renderColor(color);
                        swatch.style.pointerEvents = 'none';
                        return swatch;
                    }
                    function computedValueSubtitleRenderer(computedValue) {
                        var subtitleElement = document.createElement('span');
                        subtitleElement.className = 'suggestion-subtitle';
                        subtitleElement.textContent = "".concat(computedValue);
                        subtitleElement.style.maxWidth = '100px';
                        subtitleElement.title = "".concat(computedValue);
                        return subtitleElement;
                    }
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                lowerQuery = query.toLowerCase();
                                editingVariable = !_this.isEditingName && expression.trim().endsWith('var(');
                                if (!query && !force && !editingVariable && (_this.isEditingName || expression)) {
                                    return [
                                        2,
                                        Promise.resolve([])
                                    ];
                                }
                                prefixResults = [];
                                anywhereResults = [];
                                if (!editingVariable) {
                                    _this.cssCompletions.forEach(function(completion) {
                                        return filterCompletions.call(_this, completion, false);
                                    });
                                    // When and only when editing property names, we also include aliases for autocomplete.
                                    if (_this.isEditingName) {
                                        _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().aliasesFor().forEach(function(canonicalProperty, alias) {
                                            var index = alias.toLowerCase().indexOf(lowerQuery);
                                            if (index !== 0) {
                                                return;
                                            }
                                            var aliasResult = {
                                                text: alias,
                                                priority: _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().propertyUsageWeight(alias),
                                                isCSSVariableColor: false
                                            };
                                            var canonicalPropertyResult = {
                                                text: canonicalProperty,
                                                priority: _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().propertyUsageWeight(canonicalProperty),
                                                subtitle: "= ".concat(alias),
                                                isCSSVariableColor: false
                                            };
                                            // We add aliasResult *before* the canonicalProperty one because we want to prompt
                                            // the alias one first, since it corresponds to what the user has typed.
                                            prefixResults.push(aliasResult, canonicalPropertyResult);
                                        });
                                    }
                                }
                                node = _this.treeElement.node();
                                if (_this.isEditingName && node) {
                                    nameValuePresets = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().nameValuePresets(node.isSVGNode());
                                    nameValuePresets.forEach(function(preset) {
                                        return filterCompletions.call(_this, preset, false, true);
                                    });
                                }
                                if (_this.isEditingName || editingVariable) {
                                    _this.cssVariables.forEach(function(variable) {
                                        return filterCompletions.call(_this, variable, true);
                                    });
                                }
                                results = prefixResults.concat(anywhereResults);
                                if (!_this.isEditingName && !results.length && query.length > 1 && '!important'.startsWith(lowerQuery)) {
                                    results.push({
                                        text: '!important',
                                        title: undefined,
                                        subtitle: undefined,
                                        priority: undefined,
                                        isSecondary: undefined,
                                        subtitleRenderer: undefined,
                                        selectionRange: undefined,
                                        hideGhostText: undefined,
                                        iconElement: undefined
                                    });
                                }
                                userEnteredText = query.replace('-', '');
                                if (userEnteredText && userEnteredText === userEnteredText.toUpperCase()) {
                                    for(i = 0; i < results.length; ++i){
                                        if (!results[i].text.startsWith('--')) {
                                            results[i].text = results[i].text.toUpperCase();
                                        }
                                    }
                                }
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                try {
                                    for(_iterator = results[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                        result = _step.value;
                                        if (editingVariable) {
                                            result.title = result.text;
                                            result.text += ')';
                                            continue;
                                        }
                                        valuePreset = _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.CSSMetadata.cssMetadata().getValuePreset(_this.treeElement.name, result.text);
                                        if (!_this.isEditingName && valuePreset) {
                                            result.title = result.text;
                                            result.text = valuePreset.text;
                                            result.selectionRange = {
                                                startColumn: valuePreset.startColumn,
                                                endColumn: valuePreset.endColumn
                                            };
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally{
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                            _iterator.return();
                                        }
                                    } finally{
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                                ensureComputedStyles = function() {
                                    var _ref = _async_to_generator(function() {
                                        var parentNode;
                                        return _ts_generator(this, function(_state) {
                                            switch(_state.label){
                                                case 0:
                                                    if (!node || _this.selectedNodeComputedStyles) {
                                                        return [
                                                            2
                                                        ];
                                                    }
                                                    return [
                                                        4,
                                                        node.domModel().cssModel().getComputedStyle(node.id)
                                                    ];
                                                case 1:
                                                    _this.selectedNodeComputedStyles = _state.sent();
                                                    parentNode = node.parentNode;
                                                    if (!parentNode) return [
                                                        3,
                                                        3
                                                    ];
                                                    return [
                                                        4,
                                                        parentNode.domModel().cssModel().getComputedStyle(parentNode.id)
                                                    ];
                                                case 2:
                                                    _this.parentNodeComputedStyles = _state.sent();
                                                    _state.label = 3;
                                                case 3:
                                                    return [
                                                        2
                                                    ];
                                            }
                                        });
                                    });
                                    return function ensureComputedStyles() {
                                        return _ref.apply(this, arguments);
                                    };
                                }();
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    6,
                                    7,
                                    8
                                ]);
                                _iterator1 = results[Symbol.iterator]();
                                _state.label = 2;
                            case 2:
                                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                                    3,
                                    5
                                ];
                                result1 = _step1.value;
                                return [
                                    4,
                                    ensureComputedStyles()
                                ];
                            case 3:
                                _state.sent();
                                // Using parent node's computed styles does not work in all cases. For example:
                                //
                                // <div id="container" style="display: flex;">
                                //  <div id="useless" style="display: contents;">
                                //    <div id="item">item</div>
                                //  </div>
                                // </div>
                                // TODO(crbug/1139945): Find a better way to get the flex container styles.
                                iconInfo = _components_components_js__WEBPACK_IMPORTED_MODULE_17__.CSSPropertyIconResolver.findIcon(_this.isEditingName ? result1.text : "".concat(_this.treeElement.property.name, ": ").concat(result1.text), _this.selectedNodeComputedStyles, _this.parentNodeComputedStyles);
                                if (!iconInfo) {
                                    return [
                                        3,
                                        4
                                    ];
                                }
                                icon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_12__.Icon.Icon();
                                width = '12.5px';
                                height = '12.5px';
                                icon.data = {
                                    iconName: iconInfo.iconName,
                                    width: width,
                                    height: height,
                                    color: 'var(--icon-default)'
                                };
                                icon.style.transform = "rotate(".concat(iconInfo.rotate, "deg) scale(").concat(iconInfo.scaleX * 1.1, ", ").concat(iconInfo.scaleY * 1.1, ")");
                                icon.style.maxHeight = height;
                                icon.style.maxWidth = width;
                                result1.iconElement = icon;
                                _state.label = 4;
                            case 4:
                                _iteratorNormalCompletion1 = true;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                err = _state.sent();
                                _didIteratorError1 = true;
                                _iteratorError1 = err;
                                return [
                                    3,
                                    8
                                ];
                            case 7:
                                try {
                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                        _iterator1.return();
                                    }
                                } finally{
                                    if (_didIteratorError1) {
                                        throw _iteratorError1;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 8:
                                if (_this.isColorAware && !_this.isEditingName) {
                                    results.sort(function(a, b) {
                                        if (a.isCSSVariableColor && b.isCSSVariableColor) {
                                            return 0;
                                        }
                                        return a.isCSSVariableColor ? -1 : 1;
                                    });
                                }
                                return [
                                    2,
                                    Promise.resolve(results)
                                ];
                        }
                    });
                })();
            }
        }
    ]);
    return CSSPropertyPrompt;
}(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.TextPrompt.TextPrompt);
function unescapeCssString(input) {
    // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point
    var reCssEscapeSequence = RegExp("(?<!\\\\)\\\\(?:([a-fA-F0-9]{1,6})|(.))[\\n\\t\\x20]?", "gs");
    return input.replace(reCssEscapeSequence, function(_, $1, $2) {
        if ($2) {
            return $2;
        }
        // Otherwise, handle the code point escape sequence.
        var codePoint = parseInt($1, 16);
        var isSurrogate = 0xD800 <= codePoint && codePoint <= 0xDFFF;
        if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {
            return '\uFFFD';
        }
        return String.fromCodePoint(codePoint);
    });
}
function escapeUrlAsCssComment(urlText) {
    var url = new URL(urlText);
    if (url.search) {
        return "".concat(url.origin).concat(url.pathname).concat(url.search.replaceAll('*/', '*%2F')).concat(url.hash);
    }
    return url.toString();
}
var ActionDelegate = /*#__PURE__*/ function() {
    "use strict";
    function ActionDelegate() {
        _class_call_check(this, ActionDelegate);
    }
    _create_class(ActionDelegate, [
        {
            key: "handleAction",
            value: function handleAction(_context, actionId) {
                switch(actionId){
                    case 'elements.new-style-rule':
                        {
                            _core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.userMetrics.actionTaken(_core_host_host_js__WEBPACK_IMPORTED_MODULE_1__.UserMetrics.Action.NewStyleRuleAdded);
                            void StylesSidebarPane.instance().createNewRuleInViaInspectorStyleSheet();
                            return true;
                        }
                }
                return false;
            }
        }
    ]);
    return ActionDelegate;
}();
var buttonProviderInstance;
var ButtonProvider = /*#__PURE__*/ function() {
    "use strict";
    function ButtonProvider() {
        _class_call_check(this, ButtonProvider);
        var onNodeChanged = function onNodeChanged() {
            var node = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Context.Context.instance().flavor(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMNode);
            node = node ? node.enclosingElementOrSelf() : null;
            this.button.setEnabled(Boolean(node));
        };
        _define_property(this, "button", void 0);
        this.button = _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Toolbar.Toolbar.createActionButtonForId('elements.new-style-rule');
        this.button.setLongClickable(true);
        new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.UIUtils.LongClickController(this.button.element, this.longClicked.bind(this));
        _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_15__.Context.Context.instance().addFlavorChangeListener(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_5__.DOMModel.DOMNode, onNodeChanged.bind(this));
        onNodeChanged.call(this);
    }
    _create_class(ButtonProvider, [
        {
            key: "longClicked",
            value: function longClicked(event) {
                StylesSidebarPane.instance().onAddButtonLongClick(event);
            }
        },
        {
            key: "item",
            value: function item() {
                return this.button;
            }
        }
    ], [
        {
            key: "instance",
            value: function instance() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
                    forceNew: null
                };
                var forceNew = opts.forceNew;
                if (!buttonProviderInstance || forceNew) {
                    buttonProviderInstance = new ButtonProvider();
                }
                return buttonProviderInstance;
            }
        }
    ]);
    return ButtonProvider;
} //# sourceMappingURL=StylesSidebarPane.js.map
();


}),
"./panels/elements/TopLayerContainer.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TopLayerContainer: function() { return TopLayerContainer; }
});
/* harmony import */var _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/common/common.js */ "./core/common/common.js");
/* harmony import */var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */var _components_components_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/components.js */ "./panels/elements/components/components.js");
/* harmony import */var _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ElementsTreeOutline.js */ "./panels/elements/ElementsTreeOutline.js");
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}







var UIStrings = {
    /**
     *@description Link text content in Elements Tree Outline of the Elements panel. When clicked, it "reveals" the true location of an element.
     */ reveal: 'reveal'
};
var str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/elements/TopLayerContainer.ts', UIStrings);
var i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
var TopLayerContainer = /*#__PURE__*/ function(_UI_TreeOutline_TreeElement) {
    "use strict";
    _inherits(TopLayerContainer, _UI_TreeOutline_TreeElement);
    var _super = _create_super(TopLayerContainer);
    function TopLayerContainer(tree, document1) {
        _class_call_check(this, TopLayerContainer);
        var _this;
        _this = _super.call(this, '#top-layer');
        _define_property(_assert_this_initialized(_this), "tree", void 0);
        _define_property(_assert_this_initialized(_this), "document", void 0);
        _define_property(_assert_this_initialized(_this), "currentTopLayerDOMNodes", new Set());
        _define_property(_assert_this_initialized(_this), "topLayerUpdateThrottler", void 0);
        _this.tree = tree;
        _this.document = document1;
        _this.topLayerUpdateThrottler = new _core_common_common_js__WEBPACK_IMPORTED_MODULE_0__.Throttler.Throttler(1);
        return _this;
    }
    _create_class(TopLayerContainer, [
        {
            key: "throttledUpdateTopLayerElements",
            value: function throttledUpdateTopLayerElements() {
                var _this = this;
                return _async_to_generator(function() {
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    _this.topLayerUpdateThrottler.schedule(function() {
                                        return _this.updateTopLayerElements();
                                    })
                                ];
                            case 1:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "updateTopLayerElements",
            value: function updateTopLayerElements() {
                var _this = this;
                return _async_to_generator(function() {
                    var domModel, newTopLayerElementsIDs, topLayerElementIndex, i, topLayerDOMNode, topLayerElementShortcut, topLayerElementRepresentation, previousTopLayerDOMNode, backdropElementShortcut, backdropElementRepresentation, topLayerTreeElement;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.removeChildren();
                                _this.removeCurrentTopLayerElementsAdorners();
                                _this.currentTopLayerDOMNodes = new Set();
                                domModel = _this.document.domModel();
                                return [
                                    4,
                                    domModel.getTopLayerElements()
                                ];
                            case 1:
                                newTopLayerElementsIDs = _state.sent();
                                if (!newTopLayerElementsIDs || newTopLayerElementsIDs.length === 0) {
                                    return [
                                        2
                                    ];
                                }
                                topLayerElementIndex = 0;
                                for(i = 0; i < newTopLayerElementsIDs.length; i++){
                                    topLayerDOMNode = domModel.idToDOMNode.get(newTopLayerElementsIDs[i]);
                                    if (!topLayerDOMNode || topLayerDOMNode.ownerDocument !== _this.document) {
                                        continue;
                                    }
                                    if (topLayerDOMNode.nodeName() !== '::backdrop') {
                                        topLayerElementShortcut = new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.DOMModel.DOMNodeShortcut(domModel.target(), topLayerDOMNode.backendNodeId(), 0, topLayerDOMNode.nodeName());
                                        topLayerElementRepresentation = new _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_6__.ShortcutTreeElement(topLayerElementShortcut);
                                        _this.appendChild(topLayerElementRepresentation);
                                        _this.currentTopLayerDOMNodes.add(topLayerDOMNode);
                                        // Add the element's backdrop if previous top layer element is a backdrop.
                                        previousTopLayerDOMNode = i > 0 ? domModel.idToDOMNode.get(newTopLayerElementsIDs[i - 1]) : undefined;
                                        if (previousTopLayerDOMNode && previousTopLayerDOMNode.nodeName() === '::backdrop') {
                                            backdropElementShortcut = new _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_2__.DOMModel.DOMNodeShortcut(domModel.target(), previousTopLayerDOMNode.backendNodeId(), 0, previousTopLayerDOMNode.nodeName());
                                            backdropElementRepresentation = new _ElementsTreeOutline_js__WEBPACK_IMPORTED_MODULE_6__.ShortcutTreeElement(backdropElementShortcut);
                                            topLayerElementRepresentation.appendChild(backdropElementRepresentation);
                                        }
                                        // TODO(changhaohan): store not-yet-inserted DOMNodes and adorn them when inserted.
                                        topLayerTreeElement = _this.tree.treeElementByNode.get(topLayerDOMNode);
                                        if (topLayerTreeElement) {
                                            _this.addTopLayerAdorner(topLayerTreeElement, topLayerElementRepresentation, ++topLayerElementIndex);
                                        }
                                    }
                                }
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "removeCurrentTopLayerElementsAdorners",
            value: function removeCurrentTopLayerElementsAdorners() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.currentTopLayerDOMNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var node = _step.value;
                        var topLayerTreeElement = this.tree.treeElementByNode.get(node);
                        // TODO(changhaohan): remove only top layer adorner.
                        topLayerTreeElement === null || topLayerTreeElement === void 0 ? void 0 : topLayerTreeElement.removeAllAdorners();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "addTopLayerAdorner",
            value: function addTopLayerAdorner(element, topLayerElementRepresentation, topLayerElementIndex) {
                var config = _components_components_js__WEBPACK_IMPORTED_MODULE_5__.AdornerManager.getRegisteredAdorner(_components_components_js__WEBPACK_IMPORTED_MODULE_5__.AdornerManager.RegisteredAdorners.TOP_LAYER);
                var adornerContent = document.createElement('span');
                adornerContent.classList.add('adorner-with-icon');
                var linkIcon = new _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_3__.Icon.Icon();
                linkIcon.name = 'select-element';
                var adornerText = document.createElement('span');
                adornerText.textContent = "top-layer (".concat(topLayerElementIndex, ")");
                adornerContent.append(linkIcon);
                adornerContent.append(adornerText);
                var adorner = element === null || element === void 0 ? void 0 : element.adorn(config, adornerContent);
                if (adorner) {
                    var onClick = function() {
                        topLayerElementRepresentation.revealAndSelect();
                    };
                    adorner.addInteraction(onClick, {
                        isToggle: false,
                        shouldPropagateOnKeydown: false,
                        ariaLabelDefault: i18nString(UIStrings.reveal),
                        ariaLabelActive: i18nString(UIStrings.reveal)
                    });
                    adorner.addEventListener('mousedown', function(e) {
                        return e.consume();
                    }, false);
                }
            }
        }
    ]);
    return TopLayerContainer;
} //# sourceMappingURL=TopLayerContainer.js.map
(_ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_4__.TreeOutline.TreeElement);


}),
"./panels/elements/WebCustomData.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WebCustomData: function() { return WebCustomData; }
});
/* harmony import */var _core_root_root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/root/root.js */ "./core/root/root.js");
// Copyright 2023 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

var _data = /*#__PURE__*/ new WeakMap();
/**
 * Lazily loads the vscode.web-custom-data/browser.css-data.json and allows
 * lookup by property name.
 *
 * The class intentionally doesn't return any promise to the loaded data.
 * Otherwise clients would need to Promise.race against a timeout to handle
 * the case where the data is not yet available.
 */ var WebCustomData = /*#__PURE__*/ function() {
    "use strict";
    function WebCustomData(remoteBase) {
        var _this = this;
        _class_call_check(this, WebCustomData);
        _class_private_field_init(this, _data, {
            writable: true,
            value: new Map()
        });
        /** The test actually needs to wait for the result */ _define_property(this, "fetchPromiseForTest", void 0);
        if (!remoteBase) {
            this.fetchPromiseForTest = Promise.resolve();
            return;
        }
        this.fetchPromiseForTest = fetch("".concat(remoteBase, "third_party/vscode.web-custom-data/browsers.css-data.json")).then(function(response) {
            return response.json();
        }).then(function(json) {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = json.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var property = _step.value;
                    _class_private_field_get(_this, _data).set(property.name, property);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }).catch();
    }
    _create_class(WebCustomData, [
        {
            /**
     * Returns the documentation for the CSS property `name` or `undefined` if
     * no such property is documented. Also returns `undefined` if data hasn't
     * finished loading or failed to load.
     */ key: "findCssProperty",
            value: function findCssProperty(name) {
                return _class_private_field_get(this, _data).get(name);
            }
        }
    ], [
        {
            key: "create",
            value: /**
     * Creates a fresh `WebCustomData` instance using the standard
     * DevTools remote base.
     * Throws if no valid remoteBase was found.
     */ function create() {
                var remoteBase = _core_root_root_js__WEBPACK_IMPORTED_MODULE_0__.Runtime.getRemoteBase();
                var _remoteBase_base;
                // Silently skip loading of the CSS data if remoteBase is not set properly.
                return new WebCustomData((_remoteBase_base = remoteBase === null || remoteBase === void 0 ? void 0 : remoteBase.base) !== null && _remoteBase_base !== void 0 ? _remoteBase_base : '');
            }
        }
    ]);
    return WebCustomData;
} //# sourceMappingURL=WebCustomData.js.map
();


}),
"./panels/elements/accessibilityTreeView.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync("/**\n * Copyright 2022 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.accessibility-tree-view-container {\n  height: 100%;\n  overflow: auto;\n}\n\n/*# sourceURL=accessibilityTreeView.css */\n");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/computedStyleSidebarPane.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync("/*\n * Copyright (c) 2015 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.styles-sidebar-pane-toolbar {\n  border-bottom: 1px solid var(--sys-color-divider);\n  flex-shrink: 0;\n}\n\n.styles-sidebar-computed-style-widget {\n  min-height: auto;\n}\n\n.styles-pane-toolbar {\n  width: 100%;\n}\n\n/*# sourceURL=computedStyleSidebarPane.css */\n");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/domLinkifier.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync("/*\n * Copyright 2018 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n:host {\n  display: inline;\n}\n\n.node-link {\n  cursor: pointer;\n  display: inline;\n  pointer-events: auto;\n  outline-offset: 2px;\n\n  &:focus-visible {\n    outline-width: unset;\n  }\n\n  &.dynamic-link:hover {\n    text-decoration: underline;\n  }\n}\n\n.node-label-name {\n  color: var(--sys-color-token-property-special);\n\n  .dynamic-link & {\n    color: var(--text-link);\n  }\n}\n\n.node-label-class,\n.node-label-pseudo {\n  color: var(--sys-color-token-attribute);\n}\n\n/*# sourceURL=domLinkifier.css */\n");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/elementsPanel.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync('/*\n * Copyright (C) 2006, 2007, 2008 Apple Inc.  All rights reserved.\n * Copyright (C) 2009 Anthony Ricaud <rik@webkit.org>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1.  Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n * 2.  Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of\n *     its contributors may be used to endorse or promote products derived\n *     from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n#main-content {\n  position: relative;\n  flex: 1 1;\n}\n\n#elements-content {\n  overflow: auto;\n  padding: 2px 0 0;\n  height: 100%;\n}\n\n.style-panes-wrapper {\n  overflow: hidden scroll;\n  background-color: var(--sys-color-cdt-base-container);\n\n  & > div:not(:last-child) {\n    border-bottom: 1px solid var(--sys-color-divider);\n  }\n}\n\n#elements-content:not(.elements-wrap) > div {\n  display: inline-block;\n  min-width: 100%;\n}\n\n#elements-crumbs {\n  background-color: var(--sys-color-cdt-base-container);\n  border-top: 1px solid var(--sys-color-divider);\n  overflow: hidden;\n  width: 100%;\n}\n\ndevtools-adorner-settings-pane {\n  margin-bottom: 10px;\n  border-bottom: 1px solid var(--sys-color-divider);\n  overflow: auto;\n}\n\ndevtools-tree-outline {\n  overflow: auto;\n}\n\n.axtree-button {\n  position: absolute;\n  top: 16px;\n  right: 20px;\n  background-color: var(--sys-color-cdt-base-container);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  border: 1px solid var(--sys-color-neutral-outline);\n  border-radius: 3px;\n}\n\n/*# sourceURL=elementsPanel.css */\n');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/elementsTreeOutline.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync('/*\n * Copyright (c) 2014 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.editing {\n  box-shadow: var(--drop-shadow);\n  background-color: var(--sys-color-cdt-base-container);\n  text-overflow: clip !important; /* stylelint-disable-line declaration-no-important */\n  padding-left: 2px;\n  margin-left: -2px;\n  padding-right: 2px;\n  margin-right: -2px;\n  margin-bottom: -1px;\n  padding-bottom: 1px;\n  opacity: 100% !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.editing,\n.editing * {\n  color: var(--sys-color-on-surface) !important; /* stylelint-disable-line declaration-no-important */\n  text-decoration: none !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.editing br {\n  display: none;\n}\n\n.adorner-reveal {\n  margin: 0 3px;\n}\n\n.adorner-with-icon {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  height: 100%;\n\n  devtools-icon {\n    width: var(--sys-size-6);\n    height: var(--sys-size-6);\n    color: var(--icon-primary);\n  }\n}\n\n.adorner-with-icon *:not(:last-child) {\n  margin-right: 2px;\n}\n\n.elements-disclosure {\n  width: 100%;\n  display: inline-block;\n  line-height: normal;\n}\n\n.elements-disclosure li {\n  /** Keep margin-left & padding-left in sync with ElementsTreeElements.updateDecorations **/\n  padding: 1px 0 0 14px;\n  margin-left: -2px;\n  word-break: normal;\n  position: relative;\n  min-height: 15px;\n  line-height: 1.36;\n  min-width: 200px;\n}\n\n.elements-disclosure li::after {\n  content: "";\n  position: absolute;\n  inset: 0;\n  left: calc(var(--indent) * -1);\n  width: var(--indent);\n}\n\n.elements-disclosure li.parent {\n  display: flex;\n}\n\n.elements-disclosure li.parent:not(.always-parent) {\n  /** Keep it in sync with ElementsTreeElements.updateDecorations **/\n  margin-left: -12px;\n}\n\n.elements-disclosure li .selected-hint::before {\n  font-style: italic;\n  content: " == $0";\n  opacity: 0%;\n  position: absolute;\n  white-space: pre;\n}\n\n.elements-disclosure .elements-tree-outline:not(.hide-selection-when-blurred) li.selected .selected-hint::before {\n  position: static;\n  opacity: 60%;\n}\n\n.elements-disclosure li.parent:not(.always-parent)::before {\n  box-sizing: border-box;\n  user-select: none;\n  mask-image: var(--image-file-triangle-right);\n  height: 14px;\n  width: 14px;\n  content: "\\A0\\A0";\n  color: transparent;\n  text-shadow: none;\n  margin-left: -3px;\n  background-color: var(--icon-default);\n  transition: transform 200ms;\n}\n\n.elements-disclosure li.parent.expanded::before {\n  transform: rotate(90deg);\n  margin-top: -2px;\n}\n\n.elements-disclosure li .selection {\n  display: none;\n  z-index: -1;\n}\n\n.elements-disclosure li.selected .selection {\n  display: block;\n}\n\n.elements-disclosure li.elements-drag-over .selection {\n  display: block;\n  margin-top: -2px;\n  border-top: 2px solid var(--sys-color-primary);\n}\n\n.elements-disclosure .elements-tree-outline:not(.hide-selection-when-blurred) .selection {\n  background-color: var(--sys-color-neutral-container);\n}\n\n.elements-disclosure li.hovered:not(.selected) .selection {\n  display: block;\n  left: 3px;\n  right: 3px;\n  background-color: var(--sys-color-state-hover-on-subtle);\n  border-radius: 5px;\n}\n\n.elements-disclosure li .webkit-html-tag.close {\n  margin-left: -12px;\n}\n\n.elements-disclosure .elements-tree-outline.hide-selection-when-blurred .selected:focus-visible .highlight > * {\n  background: var(--sys-color-state-focus-highlight);\n  border-radius: 2px;\n  outline: 2px solid var(--sys-color-state-focus-ring);\n}\n\n.elements-disclosure .elements-tree-outline:not(.hide-selection-when-blurred) li.selected:focus .selection {\n  background-color: var(--sys-color-tonal-container);\n}\n\n.elements-disclosure ol {\n  list-style-type: none;\n  /** Keep it in sync with ElementsTreeElements.updateDecorations **/\n  padding-inline-start: 12px;\n  margin: 0;\n}\n\n.elements-disclosure ol.children {\n  display: none;\n  min-width: 100%;\n}\n\n.elements-disclosure ol.children.expanded {\n  display: inline-block;\n}\n\n.elements-disclosure > ol {\n  position: relative;\n  margin: 0;\n  min-width: 100%;\n  min-height: 100%;\n  padding-left: 2px;\n}\n\n.elements-disclosure li.in-clipboard .highlight {\n  outline: 1px dotted var(--sys-color-divider);\n}\n\n.elements-tree-outline ol.shadow-root-deep {\n  background-color: transparent;\n}\n\n.elements-tree-editor {\n  box-shadow: var(--drop-shadow);\n  margin-right: 4px;\n}\n\nbutton,\ninput,\nselect {\n  font-family: inherit;\n  font-size: inherit;\n}\n\n.elements-gutter-decoration {\n  position: absolute;\n  top: 3px;\n  left: 2px;\n  height: 9px;\n  width: 9px;\n  border-radius: 5px;\n  border: 1px solid var(--sys-color-orange-bright);\n  background-color: var(--sys-color-orange-bright);\n}\n\n.elements-gutter-decoration.elements-has-decorated-children {\n  opacity: 50%;\n}\n\n.add-attribute {\n  margin-left: 1px;\n  margin-right: 1px;\n  white-space: nowrap;\n}\n\n.elements-tree-nowrap,\n.elements-tree-nowrap .li {\n  white-space: pre !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.elements-disclosure .elements-tree-nowrap li {\n  word-wrap: normal;\n}\n/* DOM update highlight */\n@keyframes dom-update-highlight-animation {\n  from {\n    background-color: var(--sys-color-token-tag);\n    color: var(--sys-color-cdt-base-container);\n  }\n\n  80% {\n    background-color: var(--sys-color-token-meta);\n  }\n\n  to {\n    background-color: inherit;\n  }\n}\n\n@keyframes dom-update-highlight-animation-dark {\n  from {\n    background-color: var(--sys-color-token-tag);\n    color: var(--sys-color-cdt-base-container);\n  }\n\n  80% {\n    background-color: var(--sys-color-cdt-base-container);\n    color: inherit;\n  }\n\n  to {\n    background-color: inherit;\n  }\n}\n\n.dom-update-highlight {\n  animation: dom-update-highlight-animation 1.4s 1 cubic-bezier(0, 0, 0.2, 1);\n  border-radius: 2px;\n}\n\n:host-context(.theme-with-dark-background) .dom-update-highlight {\n  animation: dom-update-highlight-animation-dark 1.4s 1 cubic-bezier(0, 0, 0.2, 1);\n}\n\n.elements-disclosure.single-node li {\n  padding-left: 2px;\n}\n\n.elements-tree-shortcut-title,\n.elements-tree-shortcut-link {\n  color: var(--sys-color-token-subtle);\n}\n\n.elements-disclosure .gutter-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 15px;\n  height: 15px;\n  z-index: 1;\n}\n\n.elements-hide-gutter .gutter-container {\n  display: none;\n}\n\n.gutter-container > devtools-icon {\n  display: block;\n  visibility: hidden;\n  position: relative;\n  left: -1px;\n}\n\n.elements-disclosure li.selected .gutter-container:not(.has-decorations) > devtools-icon {\n  visibility: visible;\n}\n/** Guide line */\n\nli.hovered:not(.always-parent) + ol.children,\n.elements-tree-outline ol.shadow-root,\nli.selected:not(.always-parent) + ol.children {\n  background: linear-gradient(to right, var(--override-indentation-level-border-color), var(--override-indentation-level-border-color) 0.5px, transparent 0);\n  background-position-x: 5px;\n  background-size: 0.5px 100%;\n  background-repeat: no-repeat;\n}\n\nli.selected:not(.always-parent) + ol.children {\n  --override-indentation-level-border-color: var(--sys-color-divider) !important; /* stylelint-disable-line declaration-no-important */\n}\n\nli.hovered:not(.always-parent) + ol.children:not(.shadow-root) {\n  --override-indentation-level-border-color: color-mix(in sRGB, var(--ref-palette-neutral0) 10%, transparent);\n}\n\n.elements-tree-outline ol.shadow-root {\n  --override-indentation-level-border-color: var(--ref-palette-orange95);\n}\n\n@media (forced-colors: active) {\n  .elements-disclosure li.parent::before {\n    forced-color-adjust: none;\n    background-color: ButtonText !important; /* stylelint-disable-line declaration-no-important */\n  }\n\n  .elements-disclosure .elements-tree-outline:not(.hide-selection-when-blurred) li.selected .selected-hint::before {\n    opacity: unset;\n  }\n\n  .elements-disclosure .elements-tree-outline:not(.hide-selection-when-blurred) .selection,\n  .elements-disclosure li.hovered:not(.selected) .selection,\n  .elements-disclosure .elements-tree-outline:not(.hide-selection-when-blurred) li.selected:focus .selection {\n    forced-color-adjust: none;\n    background: canvas !important; /* stylelint-disable-line declaration-no-important */\n    border: 1px solid Highlight !important; /* stylelint-disable-line declaration-no-important */\n  }\n\n  .gutter-container > devtools-icon {\n    forced-color-adjust: none;\n  }\n}\n\n.violating-element {\n  background-image: var(--image-file-errorWave);\n  background-repeat: repeat-x;\n  background-position: bottom;\n  padding-bottom: 1px;\n}\n\n/*# sourceURL=elementsTreeOutline.css */\n');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/layersWidget.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync("/**\n * Copyright 2022 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.styles-layers-pane {\n  overflow: hidden;\n  padding-left: 2px;\n  background-color: var(--sys-color-cdt-base-container);\n  border-bottom: 1px solid var(--sys-color-divider);\n  margin-top: 0;\n  padding-bottom: 2px;\n}\n\n.styles-layers-pane > div {\n  font-weight: bold;\n  margin: 8px 4px 6px;\n}\n\n.styles-layers-pane > table {\n  width: 100%;\n  border-spacing: 0;\n}\n\n.styles-layers-pane td {\n  padding: 0;\n}\n\n/*# sourceURL=layersWidget.css */\n");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/stylePropertiesTreeOutline.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync('/*\n * Copyright 2016 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.has-ignorable-error .webkit-css-property {\n  color: inherit;\n}\n\n.tree-outline {\n  padding: 0;\n}\n\n.tree-outline li {\n  margin-left: 12px;\n  padding-left: 22px;\n  white-space: normal;\n  text-overflow: ellipsis;\n  cursor: auto;\n  display: block;\n\n  &::before {\n    display: none;\n  }\n\n  .webkit-css-property {\n    margin-left: -22px; /* outdent the first line of longhand properties (in an expanded shorthand) to compensate for the "padding-left" shift in .tree-outline li */\n  }\n\n  &.not-parsed-ok {\n    margin-left: 0;\n\n    .exclamation-mark {\n      display: inline-block;\n      position: relative;\n      width: 11px;\n      height: 10px;\n      margin: 0 7px 0 0;\n      top: 1px;\n      left: -36px; /* outdent to compensate for the top-level property indent */\n      user-select: none;\n      cursor: default;\n      z-index: 1;\n      mask: var(--image-file-warning-filled) center / 14px no-repeat;\n      background-color: var(--icon-warning);\n    }\n\n    &.has-ignorable-error .exclamation-mark {\n      background-color: unset;\n    }\n  }\n\n  &.filter-match {\n    background-color: var(--sys-color-tonal-container);\n  }\n\n  &.editing {\n    margin-left: 10px;\n    text-overflow: clip;\n  }\n\n  &.editing-sub-part {\n    padding: 3px 6px 8px 18px;\n    margin: -1px -6px -8px;\n    text-overflow: clip;\n  }\n\n  &.child-editing {\n    word-wrap: break-word !important; /* stylelint-disable-line declaration-no-important */\n    white-space: normal !important; /* stylelint-disable-line declaration-no-important */\n    padding-left: 0;\n  }\n\n  .info {\n    padding-top: 4px;\n    padding-bottom: 3px;\n  }\n}\n\n.tree-outline > li {\n  padding-left: 38px;\n  clear: both;\n  min-height: 14px;\n\n  .webkit-css-property {\n    margin-left: -38px; /* outdent the first line of the top-level properties to compensate for the "padding-left" shift in .tree-outline > li */\n  }\n\n  &.child-editing {\n    .text-prompt {\n      white-space: pre-wrap;\n    }\n\n    .webkit-css-property {\n      margin-left: 0;\n    }\n  }\n}\n\nol:not(.tree-outline) {\n  display: none;\n  margin: 0;\n  padding-inline-start: 12px;\n  list-style: none;\n}\n\nol.expanded {\n  display: block;\n}\n\n.enabled-button {\n  visibility: hidden;\n  float: left;\n  font-size: 10px;\n  margin: 0;\n  vertical-align: top;\n  position: relative;\n  z-index: 1;\n  width: 18px;\n  left: -40px; /* original -2px + (-38px) to compensate for the first line outdent */\n  top: 0.5px;\n  height: 13px;\n}\n\ninput.enabled-button.small {\n  &:hover::after,\n  &:active::before {\n    left: 3px;\n  }\n}\n\n.overloaded:not(.has-ignorable-error, .invalid-property-value),\n.inactive:not(.invalid-property-value),\n.disabled,\n.not-parsed-ok:not(.has-ignorable-error, .invalid-property-value),\n.not-parsed-ok.invalid-property-value .value {\n  text-decoration: line-through;\n}\n\n.implicit,\n.inherited,\n.inactive-property {\n  opacity: 50%;\n}\n\n.changed {\n  background-color: var(--sys-color-tertiary-container);\n\n  &::after {\n    content: "";\n    position: absolute;\n    left: -4px;\n    top: 0;\n    width: 2px;\n    height: 100%;\n    background-color: var(--sys-color-tertiary);\n  }\n}\n\n.copy {\n  display: none;\n\n  .changed:hover & {\n    position: absolute;\n    right: -4px;\n    top: 0;\n    bottom: 0;\n    margin: auto;\n    display: inline-block;\n    cursor: pointer;\n    transform: scale(0.9);\n  }\n}\n\n.hint-wrapper {\n  align-items: center;\n  display: inline-block;\n  margin-left: 3px;\n  max-height: 13px;\n  max-width: 13px;\n  vertical-align: middle;\n}\n\n.hint {\n  cursor: pointer;\n  display: block;\n  position: relative;\n  left: -1.5px;\n  top: -1.5px;\n}\n\n.has-ignorable-error {\n  color: var(--sys-color-state-disabled);\n}\n\n:host-context(.no-affect) .tree-outline li {\n  opacity: 50%;\n\n  &.editing {\n    opacity: 100%;\n  }\n}\n\n:host-context(.styles-panel-hovered:not(.read-only)) .webkit-css-property:hover,\n:host-context(.styles-panel-hovered:not(.read-only)) .value:hover {\n  text-decoration: underline;\n  cursor: default;\n}\n\n.styles-name-value-separator {\n  display: inline-block;\n  width: 14px;\n  text-decoration: inherit;\n  white-space: pre;\n}\n\n.styles-clipboard-only {\n  display: inline-block;\n  width: 0;\n  opacity: 0%;\n  pointer-events: none;\n  white-space: pre;\n\n  .tree-outline li.child-editing & {\n    display: none;\n  }\n}\n\n.styles-pane-button {\n  width: 15px;\n  height: 15px;\n  padding: 0;\n  border: 0;\n  margin: 0 0 0 6px;\n  position: absolute;\n  top: -1px;\n  background-color: var(--sys-color-cdt-base-container);\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  &:hover devtools-icon {\n    color: var(--icon-default-hover);\n  }\n}\n/* Matched styles */\n\n:host-context(.matched-styles) .tree-outline li {\n  margin-left: 0 !important; /* stylelint-disable-line declaration-no-important */\n}\n\n.expand-icon {\n  user-select: none;\n  margin-left: -6px;\n  margin-right: 2px;\n  margin-bottom: -4px;\n\n  .tree-outline li:not(.parent) & {\n    display: none;\n  }\n}\n\n:host-context(.matched-styles:not(.read-only):hover) li:not(.child-editing) .enabled-button,\n:host-context(.matched-styles:not(.read-only)) .tree-outline li.disabled:not(.child-editing) .enabled-button {\n  visibility: visible;\n}\n\n:host-context(.matched-styles) ol.expanded {\n  margin-left: 16px;\n}\n\n.devtools-link-styled-trim {\n  display: inline-block;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 80%;\n  vertical-align: bottom;\n}\n\ndevtools-css-angle,\ndevtools-css-length {\n  display: inline-block;\n}\n\n/*# sourceURL=stylePropertiesTreeOutline.css */\n');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/elements/stylesSidebarPane.css.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return __WEBPACK_DEFAULT_EXPORT__; }
});
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */ var styles = new CSSStyleSheet();
styles.replaceSync("/**\n * Copyright 2017 The Chromium Authors. All rights reserved.\n * Use of this source code is governed by a BSD-style license that can be\n * found in the LICENSE file.\n */\n\n.styles-section {\n  min-height: 18px;\n  white-space: nowrap;\n  user-select: text;\n  border-bottom: 1px solid var(--sys-color-divider);\n  position: relative;\n  overflow: hidden;\n  padding: 2px 2px 4px 4px;\n\n  &:last-child {\n    border-bottom: none;\n  }\n\n  &.has-open-popover {\n    z-index: 1;\n  }\n\n  &.read-only {\n    background-color: var(--sys-color-cdt-base-container);\n    font-style: italic;\n  }\n\n  &:focus-visible,\n  &.read-only:focus-visible {\n    background-color: var(--sys-color-state-focus-highlight);\n  }\n\n  .simple-selector.filter-match {\n    background-color: var(--sys-color-tonal-container);\n    color: var(--sys-color-on-surface);\n  }\n\n  .devtools-link {\n    user-select: none;\n  }\n\n  .styles-section-subtitle devtools-icon {\n    margin-bottom: -4px;\n  }\n\n  .styles-section-subtitle .devtools-link {\n    color: var(--sys-color-on-surface);\n    text-decoration-color: var(--sys-color-neutral-bright);\n    outline-offset: 0;\n  }\n\n  .selector,\n  .try-rule-selector-element,\n  .ancestor-rule-list,\n  .ancestor-closing-braces {\n    color: var(--sys-color-token-meta);\n  }\n\n  .ancestor-rule-list,\n  .styles-section-title {\n    overflow-wrap: break-word;\n    white-space: normal;\n  }\n\n  .ancestor-rule-list devtools-css-query {\n    display: block;\n  }\n\n  .simple-selector.selector-matches,\n  &.keyframe-key {\n    color: var(--sys-color-on-surface);\n  }\n\n  .style-properties {\n    margin: 0;\n    padding: 2px 4px 0 0;\n    list-style: none;\n    clear: both;\n    display: flex;\n  }\n\n  &.matched-styles .style-properties {\n    padding-left: 0;\n  }\n\n  & span.simple-selector:hover {\n    text-decoration: var(--override-styles-section-text-hover-text-decoration);\n    cursor: var(--override-styles-section-text-hover-cursor);\n  }\n\n  &.styles-panel-hovered:not(.read-only),\n  &.styles-panel-hovered:not(.read-only) devtools-css-query {\n    --override-styles-section-text-hover-text-decoration: underline;\n    --override-styles-section-text-hover-cursor: default;\n  }\n}\n\n.sidebar-pane-closing-brace {\n  clear: both;\n}\n\n.styles-section-subtitle {\n  color: var(--sys-color-token-subtle);\n  float: right;\n  padding: var(--sys-size-2) var(--sys-size-2) 0 var(--sys-size-8);\n  max-width: 100%;\n  height: 15px;\n  margin-bottom: -1px;\n}\n\n.styles-section-subtitle * {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  max-width: 100%;\n}\n\n.sidebar-pane-open-brace,\n.sidebar-pane-closing-brace {\n  color: var(--sys-color-on-surface);\n}\n\n@keyframes styles-element-state-pane-slidein {\n  from {\n    margin-top: -60px;\n  }\n\n  to {\n    margin-top: 0;\n  }\n}\n\n@keyframes styles-element-state-pane-slideout {\n  from {\n    margin-top: 0;\n  }\n\n  to {\n    margin-top: -60px;\n  }\n}\n\n.styles-sidebar-toolbar-pane {\n  position: relative;\n  animation-duration: 0.1s;\n  animation-direction: normal;\n}\n\n.styles-sidebar-toolbar-pane-container {\n  position: relative;\n  overflow: hidden;\n  flex-shrink: 0;\n}\n\n.styles-selector {\n  cursor: text;\n}\n\n/* TODO(changhaohan): restructure this in relation to stylePropertiesTreeOutline.css. */\n.styles-clipboard-only {\n  display: inline-block;\n  width: 0;\n  opacity: 0%;\n  pointer-events: none;\n  white-space: pre;\n}\n\n.styles-sidebar-pane-toolbar-container {\n  flex-shrink: 0;\n  overflow: hidden;\n  position: sticky;\n  top: 0;\n  background-color: var(--sys-color-cdt-base-container);\n  z-index: 2;\n}\n\n.styles-sidebar-pane-toolbar {\n  border-bottom: 1px solid var(--sys-color-divider);\n}\n\n.styles-pane-toolbar {\n  width: 100%;\n}\n\n.font-toolbar-hidden {\n  visibility: hidden;\n}\n\n.sidebar-separator {\n  background-color: var(--sys-color-surface2);\n  padding: 0 5px;\n  border-bottom: 1px solid var(--sys-color-divider);\n  color: var(--sys-color-token-subtle);\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  line-height: 22px;\n\n  > span.monospace {\n    max-width: 180px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    vertical-align: middle;\n    margin-left: 2px;\n  }\n\n  &.layer-separator {\n    display: flex;\n  }\n\n  &.empty-section {\n    border-bottom: none;\n  }\n}\n\n.sidebar-pane-section-toolbar {\n  position: absolute;\n  right: 0;\n  bottom: -1px;\n  z-index: 0;\n\n  &.new-rule-toolbar {\n    visibility: hidden;\n    margin-bottom: 5px;\n\n    --toolbar-height: 16px;\n  }\n\n  &.shifted-toolbar {\n    padding-right: 32px;\n  }\n}\n\n.styles-pane:not(.is-editing-style) .styles-section.matched-styles:not(.read-only):hover .sidebar-pane-section-toolbar.new-rule-toolbar {\n  visibility: visible;\n}\n\n.styles-show-all {\n  margin-left: 16px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  max-width: -webkit-fill-available;\n}\n\n@media (forced-colors: active) {\n  .sidebar-pane-section-toolbar {\n    forced-color-adjust: none;\n    border-color: 1px solid ButtonText;\n    background-color: ButtonFace;\n  }\n\n  .styles-section {\n    &:focus-visible,\n    &.read-only:focus-visible {\n      forced-color-adjust: none;\n      background-color: Highlight;\n    }\n\n    .styles-section-subtitle {\n      .devtools-link {\n        color: linktext;\n        text-decoration-color: linktext;\n\n        &:focus-visible {\n          color: HighlightText;\n        }\n      }\n    }\n\n    &:focus-visible *,\n    &.read-only:focus-visible *,\n    &:focus-visible .styles-section-subtitle .devtools-link {\n      color: HighlightText;\n      text-decoration-color: HighlightText;\n    }\n\n    &:focus-visible .sidebar-pane-section-toolbar {\n      background-color: ButtonFace;\n    }\n\n    &:focus-visible {\n      --webkit-css-property-color: HighlightText;\n    }\n  }\n}\n\n.spinner::before {\n  --dimension: 24px;\n\n  margin-top: 2em;\n  left: calc(50% - var(--dimension) / 2);\n}\n\n.section-block-expand-icon {\n  margin-bottom: -4px;\n}\n\n/*# sourceURL=stylesSidebarPane.css */\n");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


}),
"./panels/emulation/emulation.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AdvancedApp: function() { return /* reexport module object */ _AdvancedApp_js__WEBPACK_IMPORTED_MODULE_0__; },
  DeviceModeToolbar: function() { return /* reexport module object */ _DeviceModeToolbar_js__WEBPACK_IMPORTED_MODULE_3__; },
  DeviceModeView: function() { return /* reexport module object */ _DeviceModeView_js__WEBPACK_IMPORTED_MODULE_4__; },
  DeviceModeWrapper: function() { return /* reexport module object */ _DeviceModeWrapper_js__WEBPACK_IMPORTED_MODULE_5__; },
  InspectedPagePlaceholder: function() { return /* reexport module object */ _InspectedPagePlaceholder_js__WEBPACK_IMPORTED_MODULE_1__; },
  MediaQueryInspector: function() { return /* reexport module object */ _MediaQueryInspector_js__WEBPACK_IMPORTED_MODULE_2__; }
});
/* harmony import */var _AdvancedApp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AdvancedApp.js */ "./panels/emulation/AdvancedApp.js");
/* harmony import */var _InspectedPagePlaceholder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InspectedPagePlaceholder.js */ "./panels/emulation/InspectedPagePlaceholder.js");
/* harmony import */var _MediaQueryInspector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MediaQueryInspector.js */ "./panels/emulation/MediaQueryInspector.js");
/* harmony import */var _DeviceModeToolbar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DeviceModeToolbar.js */ "./panels/emulation/DeviceModeToolbar.js");
/* harmony import */var _DeviceModeView_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DeviceModeView.js */ "./panels/emulation/DeviceModeView.js");
/* harmony import */var _DeviceModeWrapper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DeviceModeWrapper.js */ "./panels/emulation/DeviceModeWrapper.js");
// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.












 //# sourceMappingURL=emulation.js.map


}),
"./ui/components/highlighting/highlighting.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  HighlightManager: function() { return /* reexport module object */ _HighlightManager_js__WEBPACK_IMPORTED_MODULE_0__; }
});
/* harmony import */var _HighlightManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HighlightManager.js */ "./ui/components/highlighting/HighlightManager.js");
// Copyright 2023 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

 //# sourceMappingURL=highlighting.js.map


}),
"./ui/components/tree_outline/tree_outline.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TreeOutline: function() { return /* reexport module object */ _TreeOutline_js__WEBPACK_IMPORTED_MODULE_0__; },
  TreeOutlineUtils: function() { return /* reexport module object */ _TreeOutlineUtils_js__WEBPACK_IMPORTED_MODULE_1__; }
});
/* harmony import */var _TreeOutline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TreeOutline.js */ "./ui/components/tree_outline/TreeOutline.js");
/* harmony import */var _TreeOutlineUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TreeOutlineUtils.js */ "./ui/components/tree_outline/TreeOutlineUtils.js");
// Copyright (c) 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


 //# sourceMappingURL=tree_outline.js.map


}),

}]);