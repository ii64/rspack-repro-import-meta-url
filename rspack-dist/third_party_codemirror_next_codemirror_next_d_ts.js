"use strict";
(self['webpackChunk'] = self['webpackChunk'] || []).push([["third_party_codemirror_next_codemirror_next_d_ts"], {
"./third_party/codemirror.next/codemirror.next.d.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Annotation: function() { return Annotation; },
  AnnotationType: function() { return AnnotationType; },
  ChangeDesc: function() { return ChangeDesc; },
  ChangeSet: function() { return ChangeSet; },
  Compartment: function() { return Compartment; },
  CompletionContext: function() { return CompletionContext; },
  Decoration: function() { return Decoration; },
  EditorSelection: function() { return EditorSelection; },
  EditorState: function() { return EditorState; },
  EditorView: function() { return EditorView; },
  Facet: function() { return Facet; },
  GutterMarker: function() { return GutterMarker; },
  HighlightStyle: function() { return HighlightStyle; },
  LRParser: function() { return LRParser; },
  Language: function() { return Language; },
  LanguageSupport: function() { return LanguageSupport; },
  Line: function() { return Line$1; },
  MapMode: function() { return MapMode; },
  MatchDecorator: function() { return MatchDecorator; },
  NodeProp: function() { return NodeProp; },
  NodeSet: function() { return NodeSet; },
  NodeType: function() { return NodeType; },
  Parser: function() { return Parser; },
  Prec: function() { return Prec; },
  Range: function() { return Range; },
  RangeSet: function() { return RangeSet; },
  RangeSetBuilder: function() { return RangeSetBuilder; },
  SelectionRange: function() { return SelectionRange; },
  StateEffect: function() { return StateEffect; },
  StateEffectType: function() { return StateEffectType; },
  StateField: function() { return StateField; },
  StreamLanguage: function() { return StreamLanguage; },
  StringStream: function() { return StringStream; },
  StyleModule: function() { return StyleModule; },
  Tag: function() { return Tag; },
  Text: function() { return Text; },
  Transaction: function() { return Transaction; },
  Tree: function() { return Tree; },
  TreeCursor: function() { return TreeCursor; },
  ViewPlugin: function() { return ViewPlugin; },
  ViewUpdate: function() { return ViewUpdate; },
  WidgetType: function() { return WidgetType; },
  acceptCompletion: function() { return acceptCompletion; },
  angular: function() { return angular; },
  autocompletion: function() { return autocompletion; },
  bidiIsolates: function() { return bidiIsolates; },
  bracketMatching: function() { return bracketMatching; },
  clojure: function() { return clojure; },
  closeBrackets: function() { return closeBrackets; },
  closeBracketsKeymap: function() { return closeBracketsKeymap; },
  closeCompletion: function() { return closeCompletion; },
  codeFolding: function() { return codeFolding; },
  coffeescript: function() { return coffeescript; },
  completeAnyWord: function() { return completeAnyWord; },
  completionStatus: function() { return completionStatus; },
  cpp: function() { return cpp; },
  css: function() { return css; },
  cssStreamParser: function() { return cssStreamParser; },
  currentCompletions: function() { return currentCompletions; },
  cursorGroupLeft: function() { return cursorGroupLeft; },
  cursorGroupRight: function() { return cursorGroupRight; },
  cursorMatchingBracket: function() { return cursorMatchingBracket; },
  cursorSyntaxLeft: function() { return cursorSyntaxLeft; },
  cursorSyntaxRight: function() { return cursorSyntaxRight; },
  dart: function() { return dart; },
  drawSelection: function() { return drawSelection; },
  ensureSyntaxTree: function() { return ensureSyntaxTree; },
  foldGutter: function() { return foldGutter; },
  foldKeymap: function() { return foldKeymap; },
  forceParsing: function() { return forceParsing; },
  go: function() { return go; },
  gss: function() { return gss; },
  gutter: function() { return gutter; },
  gutters: function() { return gutters; },
  highlightSelectionMatches: function() { return highlightSelectionMatches; },
  highlightSpecialChars: function() { return highlightSpecialChars; },
  highlightTree: function() { return highlightTree; },
  history: function() { return history; },
  historyKeymap: function() { return historyKeymap; },
  html: function() { return index_d$1; },
  ifNotIn: function() { return ifNotIn; },
  indentLess: function() { return indentLess; },
  indentMore: function() { return indentMore; },
  indentOnInput: function() { return indentOnInput; },
  indentUnit: function() { return indentUnit; },
  indentationMarkers: function() { return indentationMarkers; },
  insertNewlineAndIndent: function() { return insertNewlineAndIndent; },
  java: function() { return java; },
  javascript: function() { return index_d; },
  keymap: function() { return keymap; },
  kotlin: function() { return kotlin; },
  less: function() { return less; },
  lineNumberMarkers: function() { return lineNumberMarkers; },
  lineNumbers: function() { return lineNumbers; },
  markdown: function() { return markdown; },
  moveCompletionSelection: function() { return moveCompletionSelection; },
  php: function() { return php; },
  placeholder: function() { return placeholder; },
  python: function() { return python; },
  redo: function() { return redo; },
  redoSelection: function() { return redoSelection; },
  repositionTooltips: function() { return repositionTooltips; },
  sass: function() { return sass; },
  scala: function() { return scala; },
  scrollPastEnd: function() { return scrollPastEnd; },
  selectGroupLeft: function() { return selectGroupLeft; },
  selectGroupRight: function() { return selectGroupRight; },
  selectMatchingBracket: function() { return selectMatchingBracket; },
  selectNextOccurrence: function() { return selectNextOccurrence; },
  selectSyntaxLeft: function() { return selectSyntaxLeft; },
  selectSyntaxRight: function() { return selectSyntaxRight; },
  selectedCompletion: function() { return selectedCompletion; },
  selectedCompletionIndex: function() { return selectedCompletionIndex; },
  shell: function() { return shell; },
  showPanel: function() { return showPanel; },
  showTooltip: function() { return showTooltip; },
  standardKeymap: function() { return standardKeymap; },
  startCompletion: function() { return startCompletion; },
  svelte: function() { return svelte; },
  syntaxHighlighting: function() { return syntaxHighlighting; },
  syntaxParserRunning: function() { return syntaxParserRunning; },
  syntaxTree: function() { return syntaxTree; },
  tags: function() { return tags; },
  toggleComment: function() { return toggleComment; },
  tooltips: function() { return tooltips; },
  undo: function() { return undo; },
  undoSelection: function() { return undoSelection; },
  vue: function() { return vue; },
  wast: function() { return wast; },
  xml: function() { return xml; }
});
/**
The [`TreeFragment.applyChanges`](#common.TreeFragment^applyChanges)
method expects changed ranges in this format.
*/ 


}),

}]);