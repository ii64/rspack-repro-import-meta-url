"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["panels_sources_components_HeadersView_js"],{

/***/ "./panels/sources/components/HeadersView.css.js":
/*!******************************************************!*\
  !*** ./panels/sources/components/HeadersView.css.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */
const styles = new CSSStyleSheet();
styles.replaceSync(
`/*
 * Copyright 2022 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

:host {
  flex-grow: 1;
  padding: 6px;
}

.row {
  display: flex;
  flex-direction: row;
  color: var(--sys-color-token-property-special);
  font-family: var(--monospace-font-family);
  font-size: var(--monospace-font-size);
  align-items: center;
  line-height: 24px;
}

.row devtools-button {
  line-height: 1;
  margin-left: 0.1em;
}

.row devtools-button:nth-of-type(1) {
  margin-left: 0.8em;
}

.padded {
  margin-left: 2em;
}

.separator {
  margin-right: 0.5em;
  color: var(--sys-color-on-surface);
}

.editable {
  cursor: text;
  color: var(--sys-color-on-surface);
  overflow-wrap: break-word;
  min-height: 18px;
  line-height: 18px;
  min-width: 0.5em;
  background: transparent;
  border: none;
  outline: none;
  display: inline-block;
}

.editable.red {
  color: var(--sys-color-token-property-special);
}

.editable:hover,
.editable:focus {
  border: 1px solid var(--sys-color-neutral-outline);
  border-radius: 2px;
}

.row .inline-button {
  opacity: 0%;
  visibility: hidden;
  transition: opacity 200ms;
}

.row:focus-within .inline-button:not([hidden]),
.row:hover .inline-button:not([hidden]) {
  opacity: 100%;
  visibility: visible;
}

.center-wrapper {
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.centered {
  margin: 1em;
  max-width: 300px;
  text-align: center;
}

.error-header {
  font-weight: bold;
  margin-bottom: 1em;
}

.error-body {
  line-height: 1.5em;
  color: var(--sys-color-token-subtle);
}

.add-block {
  margin-top: 3px;
}

.header-name,
.header-value {
  min-width: min-content;
}

.link {
  color: var(--sys-color-primary);
  text-decoration: underline;
  cursor: pointer;
  outline-offset: 2px;
  padding: 0;
}

.learn-more-row {
  line-height: 24px;
}

/*# sourceURL=HeadersView.css */
`);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


/***/ }),

/***/ "./panels/sources/components/HeadersView.js":
/*!**************************************************!*\
  !*** ./panels/sources/components/HeadersView.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HeadersView: () => (/* binding */ HeadersView),
/* harmony export */   HeadersViewComponent: () => (/* binding */ HeadersViewComponent)
/* harmony export */ });
/* harmony import */ var _core_host_host_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/host/host.js */ "./core/host/host.js");
/* harmony import */ var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */ var _models_persistence_persistence_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../models/persistence/persistence.js */ "./models/persistence/persistence.js");
/* harmony import */ var _models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../models/workspace/workspace.js */ "./models/workspace/workspace.js");
/* harmony import */ var _ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../ui/components/buttons/buttons.js */ "./ui/components/buttons/buttons.js");
/* harmony import */ var _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../ui/components/helpers/helpers.js */ "./ui/components/helpers/helpers.js");
/* harmony import */ var _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../ui/legacy/legacy.js */ "./ui/legacy/legacy.js");
/* harmony import */ var _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../ui/lit-html/lit-html.js */ "./ui/lit-html/lit-html.js");
/* harmony import */ var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */ var _HeadersView_css_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./HeadersView.css.js */ "./panels/sources/components/HeadersView.css.js");
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.










const UIStrings = {
    /**
     *@description The title of a button that adds a field to input a header in the editor form.
     */
    addHeader: 'Add a header',
    /**
     *@description The title of a button that removes a field to input a header in the editor form.
     */
    removeHeader: 'Remove this header',
    /**
     *@description The title of a button that removes a section for defining header overrides in the editor form.
     */
    removeBlock: 'Remove this \'`ApplyTo`\'-section',
    /**
     *@description Error message for files which cannot not be parsed.
     *@example {.headers} PH1
     */
    errorWhenParsing: 'Error when parsing \'\'{PH1}\'\'.',
    /**
     *@description Explainer for files which cannot be parsed.
     *@example {.headers} PH1
     */
    parsingErrorExplainer: 'This is most likely due to a syntax error in \'\'{PH1}\'\'. Try opening this file in an external editor to fix the error or delete the file and re-create the override.',
    /**
     *@description Button text for a button which adds an additional header override rule.
     */
    addOverrideRule: 'Add override rule',
    /**
     *@description Text which is a hyperlink to more documentation
     */
    learnMore: 'Learn more',
};
const str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/sources/components/HeadersView.ts', UIStrings);
const i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
const plusIconUrl = new URL(/* asset import */ __webpack_require__(/*! ../../../Images/plus.svg */ "./Images/plus.svg?5c07"), __webpack_require__.b).toString();
const trashIconUrl = new URL(/* asset import */ __webpack_require__(/*! ../../../Images/bin.svg */ "./Images/bin.svg?a30a"), __webpack_require__.b).toString();
const DEFAULT_HEADER_VALUE = 'header value';
const getDefaultHeaderName = (i) => `header-name-${i}`;
class HeadersView extends _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_6__.View.SimpleView {
    #headersViewComponent = new HeadersViewComponent();
    #uiSourceCode;
    constructor(uiSourceCode) {
        super(_core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.lockedString('HeadersView'));
        this.element.setAttribute('jslog', `${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.pane('headers-view')}`);
        this.#uiSourceCode = uiSourceCode;
        this.#uiSourceCode.addEventListener(_models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_3__.UISourceCode.Events.WorkingCopyChanged, this.#onWorkingCopyChanged, this);
        this.#uiSourceCode.addEventListener(_models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_3__.UISourceCode.Events.WorkingCopyCommitted, this.#onWorkingCopyCommitted, this);
        this.element.appendChild(this.#headersViewComponent);
        void this.#setInitialData();
    }
    async #setInitialData() {
        const content = await this.#uiSourceCode.requestContent();
        this.#setComponentData(content.content || '');
    }
    #setComponentData(content) {
        let parsingError = false;
        let headerOverrides = [];
        content = content || '[]';
        try {
            headerOverrides = JSON.parse(content);
            if (!headerOverrides.every(_models_persistence_persistence_js__WEBPACK_IMPORTED_MODULE_2__.NetworkPersistenceManager.isHeaderOverride)) {
                throw 'Type mismatch after parsing';
            }
        }
        catch (e) {
            console.error('Failed to parse', this.#uiSourceCode.url(), 'for locally overriding headers.');
            parsingError = true;
        }
        this.#headersViewComponent.data = {
            headerOverrides,
            uiSourceCode: this.#uiSourceCode,
            parsingError,
        };
    }
    #onWorkingCopyChanged() {
        this.#setComponentData(this.#uiSourceCode.workingCopy());
    }
    #onWorkingCopyCommitted() {
        this.#setComponentData(this.#uiSourceCode.workingCopy());
    }
    getComponent() {
        return this.#headersViewComponent;
    }
    dispose() {
        this.#uiSourceCode.removeEventListener(_models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_3__.UISourceCode.Events.WorkingCopyChanged, this.#onWorkingCopyChanged, this);
        this.#uiSourceCode.removeEventListener(_models_workspace_workspace_js__WEBPACK_IMPORTED_MODULE_3__.UISourceCode.Events.WorkingCopyCommitted, this.#onWorkingCopyCommitted, this);
    }
}
class HeadersViewComponent extends HTMLElement {
    static litTagName = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.literal `devtools-sources-headers-view`;
    #shadow = this.attachShadow({ mode: 'open' });
    #boundRender = this.#render.bind(this);
    #headerOverrides = [];
    #uiSourceCode = null;
    #parsingError = false;
    #focusElement = null;
    #textOnFocusIn = '';
    constructor() {
        super();
        this.#shadow.addEventListener('focusin', this.#onFocusIn.bind(this));
        this.#shadow.addEventListener('focusout', this.#onFocusOut.bind(this));
        this.#shadow.addEventListener('click', this.#onClick.bind(this));
        this.#shadow.addEventListener('input', this.#onInput.bind(this));
        this.#shadow.addEventListener('keydown', this.#onKeyDown.bind(this));
        this.#shadow.addEventListener('paste', this.#onPaste.bind(this));
        this.addEventListener('contextmenu', this.#onContextMenu.bind(this));
    }
    connectedCallback() {
        this.#shadow.adoptedStyleSheets = [_HeadersView_css_js__WEBPACK_IMPORTED_MODULE_9__["default"]];
    }
    set data(data) {
        this.#headerOverrides = data.headerOverrides;
        this.#uiSourceCode = data.uiSourceCode;
        this.#parsingError = data.parsingError;
        void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_5__.ScheduledRender.scheduleRender(this, this.#boundRender);
    }
    // 'Enter' key should not create a new line in the contenteditable. Focus
    // on the next contenteditable instead.
    #onKeyDown(event) {
        const target = event.target;
        if (!target.matches('.editable')) {
            return;
        }
        const keyboardEvent = event;
        if (target.matches('.header-name') && target.innerText === '' &&
            (keyboardEvent.key === 'Enter' || keyboardEvent.key === 'Tab')) {
            // onFocusOut will remove the header -> blur instead of focusing on next editable
            event.preventDefault();
            target.blur();
        }
        else if (keyboardEvent.key === 'Enter') {
            event.preventDefault();
            target.blur();
            this.#focusNext(target);
        }
        else if (keyboardEvent.key === 'Escape') {
            event.consume();
            target.innerText = this.#textOnFocusIn;
            target.blur();
            this.#onChange(target);
        }
    }
    #focusNext(target) {
        const elements = Array.from(this.#shadow.querySelectorAll('.editable'));
        const idx = elements.indexOf(target);
        if (idx !== -1 && idx + 1 < elements.length) {
            elements[idx + 1].focus();
        }
    }
    #selectAllText(target) {
        const selection = window.getSelection();
        const range = document.createRange();
        range.selectNodeContents(target);
        selection?.removeAllRanges();
        selection?.addRange(range);
    }
    #onFocusIn(event) {
        const target = event.target;
        if (target.matches('.editable')) {
            this.#selectAllText(target);
            this.#textOnFocusIn = target.innerText;
        }
    }
    #onFocusOut(event) {
        const target = event.target;
        if (target.innerText === '') {
            const rowElement = target.closest('.row');
            const blockIndex = Number(rowElement.dataset.blockIndex);
            const headerIndex = Number(rowElement.dataset.headerIndex);
            if (target.matches('.apply-to')) {
                target.innerText = '*';
                this.#headerOverrides[blockIndex].applyTo = '*';
                this.#onHeadersChanged();
            }
            else if (target.matches('.header-name')) {
                this.#removeHeader(blockIndex, headerIndex);
            }
        }
        // clear selection
        const selection = window.getSelection();
        selection?.removeAllRanges();
        this.#uiSourceCode?.commitWorkingCopy();
    }
    #onContextMenu(event) {
        if (!this.#uiSourceCode) {
            return;
        }
        const contextMenu = new _ui_legacy_legacy_js__WEBPACK_IMPORTED_MODULE_6__.ContextMenu.ContextMenu(event);
        contextMenu.appendApplicableItems(this.#uiSourceCode);
        void contextMenu.show();
    }
    #generateNextHeaderName(headers) {
        const takenNames = new Set(headers.map(header => header.name));
        let idx = 1;
        while (takenNames.has(getDefaultHeaderName(idx))) {
            idx++;
        }
        return getDefaultHeaderName(idx);
    }
    #onClick(event) {
        const target = event.target;
        const rowElement = target.closest('.row');
        const blockIndex = Number(rowElement?.dataset.blockIndex || 0);
        const headerIndex = Number(rowElement?.dataset.headerIndex || 0);
        if (target.matches('.add-header')) {
            this.#headerOverrides[blockIndex].headers.splice(headerIndex + 1, 0, { name: this.#generateNextHeaderName(this.#headerOverrides[blockIndex].headers), value: DEFAULT_HEADER_VALUE });
            this.#focusElement = { blockIndex, headerIndex: headerIndex + 1 };
            this.#onHeadersChanged();
        }
        else if (target.matches('.remove-header')) {
            this.#removeHeader(blockIndex, headerIndex);
        }
        else if (target.matches('.add-block')) {
            this.#headerOverrides.push({ applyTo: '*', headers: [{ name: getDefaultHeaderName(1), value: DEFAULT_HEADER_VALUE }] });
            this.#focusElement = { blockIndex: this.#headerOverrides.length - 1 };
            this.#onHeadersChanged();
        }
        else if (target.matches('.remove-block')) {
            this.#headerOverrides.splice(blockIndex, 1);
            this.#onHeadersChanged();
        }
    }
    #isDeletable(blockIndex, headerIndex) {
        const isOnlyDefaultHeader = headerIndex === 0 && this.#headerOverrides[blockIndex].headers.length === 1 &&
            this.#headerOverrides[blockIndex].headers[headerIndex].name === getDefaultHeaderName(1) &&
            this.#headerOverrides[blockIndex].headers[headerIndex].value === DEFAULT_HEADER_VALUE;
        return !isOnlyDefaultHeader;
    }
    #removeHeader(blockIndex, headerIndex) {
        this.#headerOverrides[blockIndex].headers.splice(headerIndex, 1);
        if (this.#headerOverrides[blockIndex].headers.length === 0) {
            this.#headerOverrides[blockIndex].headers.push({ name: this.#generateNextHeaderName(this.#headerOverrides[blockIndex].headers), value: DEFAULT_HEADER_VALUE });
        }
        this.#onHeadersChanged();
    }
    #onInput(event) {
        this.#onChange(event.target);
    }
    #onChange(target) {
        const rowElement = target.closest('.row');
        const blockIndex = Number(rowElement.dataset.blockIndex);
        const headerIndex = Number(rowElement.dataset.headerIndex);
        if (target.matches('.header-name')) {
            this.#headerOverrides[blockIndex].headers[headerIndex].name = target.innerText;
            this.#onHeadersChanged();
        }
        if (target.matches('.header-value')) {
            this.#headerOverrides[blockIndex].headers[headerIndex].value = target.innerText;
            this.#onHeadersChanged();
        }
        if (target.matches('.apply-to')) {
            this.#headerOverrides[blockIndex].applyTo = target.innerText;
            this.#onHeadersChanged();
        }
    }
    #onHeadersChanged() {
        this.#uiSourceCode?.setWorkingCopy(JSON.stringify(this.#headerOverrides, null, 2));
        _core_host_host_js__WEBPACK_IMPORTED_MODULE_0__.userMetrics.actionTaken(_core_host_host_js__WEBPACK_IMPORTED_MODULE_0__.UserMetrics.Action.HeaderOverrideHeadersFileEdited);
    }
    #onPaste(event) {
        const clipboardEvent = event;
        event.preventDefault();
        if (clipboardEvent.clipboardData) {
            const text = clipboardEvent.clipboardData.getData('text/plain');
            const range = this.#shadow.getSelection()?.getRangeAt(0);
            if (!range) {
                return;
            }
            range.deleteContents();
            const textNode = document.createTextNode(text);
            range.insertNode(textNode);
            range.selectNodeContents(textNode);
            range.collapse(false);
            const selection = window.getSelection();
            selection?.removeAllRanges();
            selection?.addRange(range);
            this.#onChange(event.target);
        }
    }
    #render() {
        if (!_ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_5__.ScheduledRender.isScheduledRender(this)) {
            throw new Error('HeadersView render was not scheduled');
        }
        if (this.#parsingError) {
            const fileName = this.#uiSourceCode?.name() || '.headers';
            // clang-format off
            _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.render(_ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `
        <div class="center-wrapper">
          <div class="centered">
            <div class="error-header">${i18nString(UIStrings.errorWhenParsing, { PH1: fileName })}</div>
            <div class="error-body">${i18nString(UIStrings.parsingErrorExplainer, { PH1: fileName })}</div>
          </div>
        </div>
      `, this.#shadow, { host: this });
            // clang-format on
            return;
        }
        // clang-format off
        _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.render(_ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `
      ${this.#headerOverrides.map((headerOverride, blockIndex) => _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `
          ${this.#renderApplyToRow(headerOverride.applyTo, blockIndex)}
          ${headerOverride.headers.map((header, headerIndex) => _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `
              ${this.#renderHeaderRow(header, blockIndex, headerIndex)}
            `)}
        `)}
      <${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}
          .variant=${"outlined" /* Buttons.Button.Variant.OUTLINED */}
          .jslogContext=${'headers-view.add-override-rule'}
          class="add-block">
        ${i18nString(UIStrings.addOverrideRule)}
      </${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}>
      <div class="learn-more-row">
        <x-link
            href="https://goo.gle/devtools-override"
            class="link"
            jslog=${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.link('learn-more').track({ click: true })}>${i18nString(UIStrings.learnMore)}</x-link>
      </div>
    `, this.#shadow, { host: this });
        // clang-format on
        if (this.#focusElement) {
            let focusElement = null;
            if (this.#focusElement.headerIndex) {
                focusElement = this.#shadow.querySelector(`[data-block-index="${this.#focusElement.blockIndex}"][data-header-index="${this.#focusElement.headerIndex}"] .header-name`);
            }
            else {
                focusElement = this.#shadow.querySelector(`[data-block-index="${this.#focusElement.blockIndex}"] .apply-to`);
            }
            if (focusElement) {
                focusElement.focus();
            }
            this.#focusElement = null;
        }
    }
    #renderApplyToRow(pattern, blockIndex) {
        // clang-format off
        return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `
      <div class="row" data-block-index=${blockIndex}
           jslog=${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.treeItem(pattern === '*' ? pattern : undefined)}>
        <div>${_core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.lockedString('Apply to')}</div>
        <div class="separator">:</div>
        ${this.#renderEditable(pattern, 'apply-to')}
        <${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}
        title=${i18nString(UIStrings.removeBlock)}
        .size=${"SMALL" /* Buttons.Button.Size.SMALL */}
        .iconUrl=${trashIconUrl}
        .iconWidth=${'14px'}
        .iconHeight=${'14px'}
        .variant=${"icon" /* Buttons.Button.Variant.ICON */}
        .jslogContext=${'headers-view.remove-apply-to-section'}
        class="remove-block inline-button"
      ></${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}>
      </div>
    `;
        // clang-format on
    }
    #renderHeaderRow(header, blockIndex, headerIndex) {
        // clang-format off
        return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `
      <div class="row padded" data-block-index=${blockIndex} data-header-index=${headerIndex}
           jslog=${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.treeItem(header.name).parent('headers-editor-row-parent')}>
        ${this.#renderEditable(header.name, 'header-name red', true)}
        <div class="separator">:</div>
        ${this.#renderEditable(header.value, 'header-value')}
        <${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}
          title=${i18nString(UIStrings.addHeader)}
          .size=${"SMALL" /* Buttons.Button.Size.SMALL */}
          .iconUrl=${plusIconUrl}
          .variant=${"icon" /* Buttons.Button.Variant.ICON */}
          .jslogContext=${'headers-view.add-header'}
          class="add-header inline-button"
        ></${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}>
        <${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}
          title=${i18nString(UIStrings.removeHeader)}
          .size=${"SMALL" /* Buttons.Button.Size.SMALL */}
          .iconUrl=${trashIconUrl}
          .variant=${"icon" /* Buttons.Button.Variant.ICON */}
          ?hidden=${!this.#isDeletable(blockIndex, headerIndex)}
          .jslogContext=${'headers-view.remove-header'}
          class="remove-header inline-button"
        ></${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_4__.Button.Button.litTagName}>
      </div>
    `;
        // clang-format on
    }
    #renderEditable(value, className, isKey) {
        // This uses LitHtml's `live`-directive, so that when checking whether to
        // update during re-render, `value` is compared against the actual live DOM
        // value of the contenteditable element and not the potentially outdated
        // value from the previous render.
        // clang-format off
        const jslog = isKey ? _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.key() : _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.value();
        return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.html `<span jslog=${jslog.track({ change: true, keydown: 'Enter|Escape|Tab', click: true })}
                              contenteditable="true"
                              class="editable ${className}"
                              tabindex="0"
                              .innerText=${_ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_7__.Directives.live(value)}></span>`;
        // clang-format on
    }
}
_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_8__.registerParentProvider('headers-editor-row-parent', (e) => {
    while (e.previousElementSibling?.classList?.contains('padded')) {
        e = e.previousElementSibling;
    }
    return e.previousElementSibling || undefined;
});
customElements.define('devtools-sources-headers-view', HeadersViewComponent);
//# sourceMappingURL=HeadersView.js.map

/***/ })

}]);