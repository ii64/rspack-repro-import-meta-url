"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["panels_network_components_HeaderSectionRow_js"],{

/***/ "./panels/network/components/EditableSpan.css.js":
/*!*******************************************************!*\
  !*** ./panels/network/components/EditableSpan.css.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */
const styles = new CSSStyleSheet();
styles.replaceSync(
`/*
 * Copyright 2022 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

:host {
  display: inline;
}

.editable {
  cursor: text;
  overflow-wrap: anywhere;
  min-height: 18px;
  line-height: 18px;
  min-width: 0.5em;
  background: transparent;
  border: none;
  border-radius: 4px;
  outline: none;
  display: inline-block;
  font-family: var(--monospace-font-family);
  font-size: var(--monospace-font-size);

  &:hover {
    border: 1px solid var(--sys-color-neutral-outline);
  }

  &:focus {
    border: 1px solid var(--sys-color-state-focus-ring);
  }
}

.editable::selection {
  color: var(--sys-color-on-tonal-container);
  background-color: var(--sys-color-tonal-container);
}

/*# sourceURL=EditableSpan.css */
`);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


/***/ }),

/***/ "./panels/network/components/EditableSpan.js":
/*!***************************************************!*\
  !*** ./panels/network/components/EditableSpan.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditableSpan: () => (/* binding */ EditableSpan)
/* harmony export */ });
/* harmony import */ var _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../ui/components/helpers/helpers.js */ "./ui/components/helpers/helpers.js");
/* harmony import */ var _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../ui/lit-html/lit-html.js */ "./ui/lit-html/lit-html.js");
/* harmony import */ var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */ var _EditableSpan_css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EditableSpan.css.js */ "./panels/network/components/EditableSpan.css.js");
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.




const { render, html } = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_1__;
class EditableSpan extends HTMLElement {
    static litTagName = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_1__.literal `devtools-editable-span`;
    #shadow = this.attachShadow({ mode: 'open' });
    #boundRender = this.#render.bind(this);
    #value = '';
    connectedCallback() {
        this.#shadow.adoptedStyleSheets = [_EditableSpan_css_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
        this.#shadow.addEventListener('focusin', this.#selectAllText.bind(this));
        this.#shadow.addEventListener('keydown', this.#onKeyDown.bind(this));
        this.#shadow.addEventListener('input', this.#onInput.bind(this));
    }
    set data(data) {
        this.#value = data.value;
        void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.ScheduledRender.scheduleRender(this, this.#boundRender);
    }
    get value() {
        return this.#shadow.querySelector('span')?.innerText || '';
    }
    set value(value) {
        this.#value = value;
        const span = this.#shadow.querySelector('span');
        if (span) {
            span.innerText = value;
        }
    }
    #onKeyDown(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            event.target?.blur();
        }
    }
    #onInput(event) {
        this.#value = event.target.innerText;
    }
    #selectAllText(event) {
        const target = event.target;
        const selection = window.getSelection();
        const range = document.createRange();
        range.selectNodeContents(target);
        selection?.removeAllRanges();
        selection?.addRange(range);
    }
    #render() {
        if (!_ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_0__.ScheduledRender.isScheduledRender(this)) {
            throw new Error('HeaderSectionRow render was not scheduled');
        }
        // Disabled until https://crbug.com/1079231 is fixed.
        // clang-format off
        render(html `<span
        contenteditable="plaintext-only"
        class="editable"
        tabindex="0"
        .innerText=${this.#value}
        jslog=${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_2__.value('header-editor').track({ change: true, keydown: 'Enter|Escape' })}
    </span>`, this.#shadow, { host: this });
        // clang-format on
    }
    focus() {
        requestAnimationFrame(() => {
            const span = this.#shadow.querySelector('.editable');
            span?.focus();
        });
    }
}
customElements.define('devtools-editable-span', EditableSpan);
//# sourceMappingURL=EditableSpan.js.map

/***/ }),

/***/ "./panels/network/components/HeaderSectionRow.css.js":
/*!***********************************************************!*\
  !*** ./panels/network/components/HeaderSectionRow.css.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright 2024 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// IMPORTANT: this file is auto generated. Please do not edit this file.
/* istanbul ignore file */
const styles = new CSSStyleSheet();
styles.replaceSync(
`/*
 * Copyright 2022 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

:host {
  display: block;
}

.row {
  display: flex;
  line-height: 20px;
  padding-left: 8px;
  gap: 12px;
  user-select: text;
}

.row.header-editable {
  font-family: var(--monospace-font-family);
  font-size: var(--monospace-font-size);
}

.header-name {
  color: var(--sys-color-on-surface);
  font-weight: 400;
  width: 30%;
  min-width: 160px;
  max-width: 240px;
  flex-shrink: 0;
  text-transform: capitalize;
  overflow-wrap: break-word;
}

.header-name,
.header-value {
  &::selection {
    color: var(--sys-color-on-tonal-container);
    background-color: var(--sys-color-tonal-container);
  }
}

.header-name.pseudo-header {
  text-transform: none;
}

.header-editable .header-name {
  color: var(--sys-color-token-property-special);
}

.row.header-deleted .header-name {
  color: var(--sys-color-token-subtle);
}

.header-value {
  display: flex;
  overflow-wrap: anywhere;
  margin-inline-end: 14px;
}

.header-badge-text {
  font-variant: small-caps;
  font-weight: 500;
  white-space: pre-wrap;
  word-break: break-all;
  text-transform: none;
}

.header-badge {
  display: inline;
  background-color: var(--sys-color-error);
  color: var(--sys-color-on-error);
  border-radius: 100vh;
  padding-left: 6px;
  padding-right: 6px;
}

.call-to-action {
  background-color: var(--sys-color-neutral-container);
  padding: 8px;
  border-radius: 5px;
  margin: 4px;
}

.call-to-action-body {
  padding: 6px 0;
  margin-left: 9.5px;
  border-left: 2px solid var(--issue-color-yellow);
  padding-left: 18px;
  line-height: 20px;
}

.call-to-action .explanation {
  font-weight: bold;
}

.call-to-action code {
  font-size: 90%;
}

.call-to-action .example .comment::before {
  content: " â€” ";
}

.link,
.devtools-link {
  color: var(--sys-color-primary);
  text-decoration: underline;
  cursor: pointer;
  outline-offset: 2px;
}

.explanation .link {
  font-weight: normal;
}

.inline-icon {
  vertical-align: middle;
}

.row-flex-icon {
  margin: 2px 5px 0;
}

.header-value code {
  display: block;
  white-space: pre-wrap;
  font-size: 90%;
  color: var(--sys-color-token-subtle);
}

x-link .inline-icon { /* stylelint-disable-line selector-type-no-unknown */
  padding-right: 3px;
}

.header-highlight {
  background-color: var(--sys-color-yellow-container);
}

.header-warning {
  color: var(--sys-color-error);
}

.header-overridden {
  background-color: var(--sys-color-tertiary-container);
  border-left: 3px solid var(--sys-color-tertiary);
  padding-left: 5px;
}

.header-deleted {
  background-color: var(--sys-color-surface-error);
  border-left: 3px solid var(--sys-color-error-bright);
  color: var(--sys-color-token-subtle);
  text-decoration: line-through;
}

.header-highlight.header-overridden {
  background-color: var(--sys-color-yellow-container);
  border-left: 3px solid var(--sys-color-tertiary);
  padding-left: 5px;
}

.inline-button {
  vertical-align: middle;
}

.row .inline-button {
  opacity: 0%;
  visibility: hidden;
  transition: opacity 200ms;
  padding-left: 2px;
}

.row.header-overridden:focus-within .inline-button,
.row.header-overridden:hover .inline-button {
  opacity: 100%;
  visibility: visible;
}

.row:hover .inline-button.enable-editing {
  opacity: 100%;
  visibility: visible;
}

.flex-right {
  margin-left: auto;
}

.flex-columns {
  flex-direction: column;
}

/*# sourceURL=HeaderSectionRow.css */
`);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (styles);


/***/ }),

/***/ "./panels/network/components/HeaderSectionRow.js":
/*!*******************************************************!*\
  !*** ./panels/network/components/HeaderSectionRow.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EnableHeaderEditingEvent: () => (/* binding */ EnableHeaderEditingEvent),
/* harmony export */   HeaderEditedEvent: () => (/* binding */ HeaderEditedEvent),
/* harmony export */   HeaderRemovedEvent: () => (/* binding */ HeaderRemovedEvent),
/* harmony export */   HeaderSectionRow: () => (/* binding */ HeaderSectionRow),
/* harmony export */   compareHeaders: () => (/* binding */ compareHeaders),
/* harmony export */   isValidHeaderName: () => (/* binding */ isValidHeaderName)
/* harmony export */ });
/* harmony import */ var _core_host_host_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/host/host.js */ "./core/host/host.js");
/* harmony import */ var _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/i18n/i18n.js */ "./core/i18n/i18n.js");
/* harmony import */ var _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/platform/platform.js */ "./core/platform/platform.js");
/* harmony import */ var _core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/sdk/sdk.js */ "./core/sdk/sdk.js");
/* harmony import */ var _third_party_chromium_client_variations_client_variations_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../third_party/chromium/client-variations/client-variations.js */ "./third_party/chromium/client-variations/client-variations.js");
/* harmony import */ var _ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../ui/components/buttons/buttons.js */ "./ui/components/buttons/buttons.js");
/* harmony import */ var _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../ui/components/helpers/helpers.js */ "./ui/components/helpers/helpers.js");
/* harmony import */ var _ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../ui/components/icon_button/icon_button.js */ "./ui/components/icon_button/icon_button.js");
/* harmony import */ var _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../ui/lit-html/lit-html.js */ "./ui/lit-html/lit-html.js");
/* harmony import */ var _ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../ui/visual_logging/visual_logging.js */ "./ui/visual_logging/visual_logging.js");
/* harmony import */ var _EditableSpan_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./EditableSpan.js */ "./panels/network/components/EditableSpan.js");
/* harmony import */ var _HeaderSectionRow_css_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./HeaderSectionRow.css.js */ "./panels/network/components/HeaderSectionRow.css.js");
// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.












const { render, html } = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__;
const UIStrings = {
    /**
     *@description Comment used in decoded X-Client-Data HTTP header output in Headers View of the Network panel
     */
    activeClientExperimentVariation: 'Active `client experiment variation IDs`.',
    /**
     *@description Comment used in decoded X-Client-Data HTTP header output in Headers View of the Network panel
     */
    activeClientExperimentVariationIds: 'Active `client experiment variation IDs` that trigger server-side behavior.',
    /**
     *@description Text in Headers View of the Network panel for X-Client-Data HTTP headers
     */
    decoded: 'Decoded:',
    /**
     *@description The title of a button to enable overriding a HTTP header.
     */
    editHeader: 'Override header',
    /**
     *@description Description of which letters the name of an HTTP header may contain (a-z, A-Z, 0-9, '-', or '_').
     */
    headerNamesOnlyLetters: 'Header names should contain only letters, digits, hyphens or underscores',
    /**
     *@description Text that is usually a hyperlink to more documentation
     */
    learnMore: 'Learn more',
    /**
     *@description Text for a link to the issues panel
     */
    learnMoreInTheIssuesTab: 'Learn more in the issues tab',
    /**
     *@description Hover text prompting the user to reload the whole page or refresh the particular request, so that the changes they made take effect.
     */
    reloadPrompt: 'Refresh the page/request for these changes to take effect',
    /**
     *@description The title of a button which removes a HTTP header override.
     */
    removeOverride: 'Remove this header override',
};
const str_ = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.registerUIStrings('panels/network/components/HeaderSectionRow.ts', UIStrings);
const i18nString = _core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.getLocalizedString.bind(undefined, str_);
const trashIconUrl = new URL(/* asset import */ __webpack_require__(/*! ../../../Images/bin.svg */ "./Images/bin.svg?a30a"), __webpack_require__.b).toString();
const editIconUrl = new URL(/* asset import */ __webpack_require__(/*! ../../../Images/edit.svg */ "./Images/edit.svg?796a"), __webpack_require__.b).toString();
const isValidHeaderName = (headerName) => {
    return /^[a-z0-9_\-]+$/i.test(headerName);
};
const compareHeaders = (first, second) => {
    // Replaces all whitespace characters with regular spaces.
    // When working with contenteditables, their content can contain (non-obvious)
    // non-breaking spaces (NBSPs). It would be tricky to get rid of NBSPs during
    // editing and saving, so we just handle them after reading them in.
    // Tab characters are invalid in headers (and DevTools shows a warning for
    // them), the replacement here ensures that headers containing tabs are not
    // incorrectly marked as being overridden.
    return first?.replaceAll(/\s/g, ' ') === second?.replaceAll(/\s/g, ' ');
};
class HeaderEditedEvent extends Event {
    static eventName = 'headeredited';
    headerName;
    headerValue;
    constructor(headerName, headerValue) {
        super(HeaderEditedEvent.eventName, {});
        this.headerName = headerName;
        this.headerValue = headerValue;
    }
}
class HeaderRemovedEvent extends Event {
    static eventName = 'headerremoved';
    headerName;
    headerValue;
    constructor(headerName, headerValue) {
        super(HeaderRemovedEvent.eventName, {});
        this.headerName = headerName;
        this.headerValue = headerValue;
    }
}
class EnableHeaderEditingEvent extends Event {
    static eventName = 'enableheaderediting';
    constructor() {
        super(EnableHeaderEditingEvent.eventName, {});
    }
}
class HeaderSectionRow extends HTMLElement {
    static litTagName = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.literal `devtools-header-section-row`;
    #shadow = this.attachShadow({ mode: 'open' });
    #header = null;
    #boundRender = this.#render.bind(this);
    #isHeaderValueEdited = false;
    #isValidHeaderName = true;
    connectedCallback() {
        this.#shadow.adoptedStyleSheets = [_HeaderSectionRow_css_js__WEBPACK_IMPORTED_MODULE_11__["default"]];
    }
    set data(data) {
        this.#header = data.header;
        this.#isHeaderValueEdited =
            this.#header.originalValue !== undefined && this.#header.value !== this.#header.originalValue;
        this.#isValidHeaderName = isValidHeaderName(this.#header.name);
        void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__.ScheduledRender.scheduleRender(this, this.#boundRender);
    }
    #render() {
        if (!_ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__.ScheduledRender.isScheduledRender(this)) {
            throw new Error('HeaderSectionRow render was not scheduled');
        }
        if (!this.#header) {
            return;
        }
        const rowClasses = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.Directives.classMap({
            row: true,
            'header-highlight': Boolean(this.#header.highlight),
            'header-overridden': Boolean(this.#header.isOverride) || this.#isHeaderValueEdited,
            'header-editable': this.#header.valueEditable === 1 /* EditingAllowedStatus.Enabled */,
            'header-deleted': Boolean(this.#header.isDeleted),
        });
        const headerNameClasses = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.Directives.classMap({
            'header-name': true,
            'pseudo-header': this.#header.name.startsWith(':'),
        });
        const headerValueClasses = _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.Directives.classMap({
            'header-value': true,
            'header-warning': Boolean(this.#header.headerValueIncorrect),
            'flex-columns': this.#header.name === 'x-client-data' && !this.#header.isResponseHeader,
        });
        // The header name is only editable when the header value is editable as well.
        // This ensures the header name's editability reacts correctly to enabling or
        // disabling local overrides.
        const isHeaderNameEditable = this.#header.nameEditable && this.#header.valueEditable === 1 /* EditingAllowedStatus.Enabled */;
        // Case 1: Headers which were just now added via the 'Add header button'.
        //         'nameEditable' is true only for such headers.
        // Case 2: Headers for which the user clicked the 'remove' button.
        // Case 3: Headers for which there is a mismatch between original header
        //         value and current header value.
        const showReloadInfoIcon = this.#header.nameEditable || this.#header.isDeleted || this.#isHeaderValueEdited;
        // Disabled until https://crbug.com/1079231 is fixed.
        // clang-format off
        render(html `
      <div class=${rowClasses}>
        <div class=${headerNameClasses}>
          ${this.#header.headerNotSet ?
            html `<div class="header-badge header-badge-text">${_core_i18n_i18n_js__WEBPACK_IMPORTED_MODULE_1__.i18n.lockedString('not-set')}</div> ` :
            _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing}
          ${isHeaderNameEditable && !this.#isValidHeaderName ?
            html `<${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName} class="inline-icon disallowed-characters" title=${UIStrings.headerNamesOnlyLetters} .data=${{
                iconName: 'cross-circle-filled',
                width: '16px',
                height: '16px',
                color: 'var(--icon-error)',
            }}>
            </${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName}>` : _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing}
          ${isHeaderNameEditable && !this.#header.isDeleted ?
            html `<${_EditableSpan_js__WEBPACK_IMPORTED_MODULE_10__.EditableSpan.litTagName}
              @focusout=${this.#onHeaderNameFocusOut}
              @keydown=${this.#onKeyDown}
              @input=${this.#onHeaderNameEdit}
              @paste=${this.#onHeaderNamePaste}
              .data=${{ value: this.#header.name }}
            ></${_EditableSpan_js__WEBPACK_IMPORTED_MODULE_10__.EditableSpan.litTagName}>` :
            this.#header.name}:
        </div>
        <div
          class=${headerValueClasses}
          @copy=${() => _core_host_host_js__WEBPACK_IMPORTED_MODULE_0__.userMetrics.actionTaken(_core_host_host_js__WEBPACK_IMPORTED_MODULE_0__.UserMetrics.Action.NetworkPanelCopyValue)}
        >
          ${this.#renderHeaderValue()}
        </div>
        ${showReloadInfoIcon ?
            html `<${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName} class="row-flex-icon flex-right" title=${UIStrings.reloadPrompt} .data=${{
                iconName: 'info',
                width: '16px',
                height: '16px',
                color: 'var(--icon-default)',
            }}>
          </${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName}>` : _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing}
      </div>
      ${this.#maybeRenderBlockedDetails(this.#header.blockedDetails)}
    `, this.#shadow, { host: this });
        // clang-format on
        if (this.#header.highlight) {
            this.scrollIntoView({ behavior: 'auto' });
        }
    }
    #renderHeaderValue() {
        if (!this.#header) {
            return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing;
        }
        if (this.#header.name === 'x-client-data' && !this.#header.isResponseHeader) {
            return this.#renderXClientDataHeader(this.#header);
        }
        if (this.#header.isDeleted || this.#header.valueEditable !== 1 /* EditingAllowedStatus.Enabled */) {
            const showEditHeaderButton = this.#header.isResponseHeader && !this.#header.isDeleted &&
                this.#header.valueEditable !== 2 /* EditingAllowedStatus.Forbidden */;
            // clang-format off
            return html `
      ${this.#header.value || ''}
      ${this.#maybeRenderHeaderValueSuffix(this.#header)}
      ${showEditHeaderButton ? html `
        <${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_5__.Button.Button.litTagName}
          title=${i18nString(UIStrings.editHeader)}
          .size=${"SMALL" /* Buttons.Button.Size.SMALL */}
          .iconUrl=${editIconUrl}
          .variant=${"icon" /* Buttons.Button.Variant.ICON */}
          @click=${() => {
                this.dispatchEvent(new EnableHeaderEditingEvent());
            }}
          jslog=${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_9__.action('enable-header-overrides').track({ click: true })}
          class="enable-editing inline-button"
        ></${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_5__.Button.Button.litTagName}>
      ` : _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing}
    `;
        }
        return html `
      <${_EditableSpan_js__WEBPACK_IMPORTED_MODULE_10__.EditableSpan.litTagName}
        @focusout=${this.#onHeaderValueFocusOut}
        @input=${this.#onHeaderValueEdit}
        @paste=${this.#onHeaderValueEdit}
        @keydown=${this.#onKeyDown}
        .data=${{ value: this.#header.value || '' }}
      ></${_EditableSpan_js__WEBPACK_IMPORTED_MODULE_10__.EditableSpan.litTagName}>
      ${this.#maybeRenderHeaderValueSuffix(this.#header)}
      <${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_5__.Button.Button.litTagName}
        title=${i18nString(UIStrings.removeOverride)}
        .size=${"SMALL" /* Buttons.Button.Size.SMALL */}
        .iconUrl=${trashIconUrl}
        .variant=${"icon" /* Buttons.Button.Variant.ICON */}
        class="remove-header inline-button"
        @click=${this.#onRemoveOverrideClick}
        jslog=${_ui_visual_logging_visual_logging_js__WEBPACK_IMPORTED_MODULE_9__.action('remove-header-override').track({ click: true })}
      ></${_ui_components_buttons_buttons_js__WEBPACK_IMPORTED_MODULE_5__.Button.Button.litTagName}>
    `;
        // clang-format on
    }
    #renderXClientDataHeader(header) {
        const data = _third_party_chromium_client_variations_client_variations_js__WEBPACK_IMPORTED_MODULE_4__.parseClientVariations(header.value || '');
        const output = _third_party_chromium_client_variations_client_variations_js__WEBPACK_IMPORTED_MODULE_4__.formatClientVariations(data, i18nString(UIStrings.activeClientExperimentVariation), i18nString(UIStrings.activeClientExperimentVariationIds));
        // clang-format off
        return html `
      <div>${header.value || ''}</div>
      <div>${i18nString(UIStrings.decoded)}</div>
      <code>${output}</code>
    `;
        // clang-format on
    }
    focus() {
        requestAnimationFrame(() => {
            const editableName = this.#shadow.querySelector('.header-name devtools-editable-span');
            editableName?.focus();
        });
    }
    #maybeRenderHeaderValueSuffix(header) {
        if (header.name === 'set-cookie' && header.setCookieBlockedReasons) {
            const titleText = header.setCookieBlockedReasons.map(_core_sdk_sdk_js__WEBPACK_IMPORTED_MODULE_3__.NetworkRequest.setCookieBlockedReasonToUiString).join('\n');
            // Disabled until https://crbug.com/1079231 is fixed.
            // clang-format off
            return html `
        <${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName} class="row-flex-icon" title=${titleText} .data=${{
                iconName: 'warning-filled',
                color: 'var(--icon-warning)',
                width: '16px',
                height: '16px',
            }}>
        </${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName}>
      `;
            // clang-format on
        }
        return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing;
    }
    #maybeRenderBlockedDetails(blockedDetails) {
        if (!blockedDetails) {
            return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing;
        }
        // Disabled until https://crbug.com/1079231 is fixed.
        // clang-format off
        return html `
      <div class="call-to-action">
        <div class="call-to-action-body">
          <div class="explanation">${blockedDetails.explanation()}</div>
          ${blockedDetails.examples.map(example => html `
            <div class="example">
              <code>${example.codeSnippet}</code>
              ${example.comment ? html `
                <span class="comment">${example.comment()}</span>
              ` : ''}
            </div>
          `)}
          ${this.#maybeRenderBlockedDetailsLink(blockedDetails)}
        </div>
      </div>
    `;
        // clang-format on
    }
    #maybeRenderBlockedDetailsLink(blockedDetails) {
        if (blockedDetails?.reveal) {
            // Disabled until https://crbug.com/1079231 is fixed.
            // clang-format off
            return html `
        <div class="devtools-link" @click=${blockedDetails.reveal}>
          <${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName} class="inline-icon" .data=${{
                iconName: 'issue-exclamation-filled',
                color: 'var(--icon-warning)',
                width: '16px',
                height: '16px',
            }}>
          </${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName}
          >${i18nString(UIStrings.learnMoreInTheIssuesTab)}
        </div>
      `;
            // clang-format on
        }
        if (blockedDetails?.link) {
            // Disabled until https://crbug.com/1079231 is fixed.
            // clang-format off
            return html `
        <x-link href=${blockedDetails.link.url} class="link">
          <${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName} class="inline-icon" .data=${{
                iconName: 'open-externally',
                color: 'var(--icon-link)',
                width: '20px',
                height: '20px',
            }}>
          </${_ui_components_icon_button_icon_button_js__WEBPACK_IMPORTED_MODULE_7__.Icon.Icon.litTagName}
          >${i18nString(UIStrings.learnMore)}
        </x-link>
      `;
            // clang-format on
        }
        return _ui_lit_html_lit_html_js__WEBPACK_IMPORTED_MODULE_8__.nothing;
    }
    #onHeaderValueFocusOut(event) {
        const target = event.target;
        if (!this.#header) {
            return;
        }
        const headerValue = target.value.trim();
        if (!compareHeaders(headerValue, this.#header.value?.trim())) {
            this.#header.value = headerValue;
            this.dispatchEvent(new HeaderEditedEvent(this.#header.name, headerValue));
            void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__.ScheduledRender.scheduleRender(this, this.#boundRender);
        }
        // Clear selection (needed when pressing 'enter' in editable span).
        const selection = window.getSelection();
        selection?.removeAllRanges();
        // Reset pasted header name
        this.#header.originalName = '';
    }
    #onHeaderNameFocusOut(event) {
        const target = event.target;
        if (!this.#header) {
            return;
        }
        const headerName = _core_platform_platform_js__WEBPACK_IMPORTED_MODULE_2__.StringUtilities.toLowerCaseString(target.value.trim());
        // If the header name has been edited to '', reset it to its previous value.
        if (headerName === '') {
            target.value = this.#header.name;
        }
        else if (!compareHeaders(headerName, this.#header.name.trim())) {
            this.#header.name = headerName;
            this.dispatchEvent(new HeaderEditedEvent(headerName, this.#header.value || ''));
            void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__.ScheduledRender.scheduleRender(this, this.#boundRender);
        }
        // Clear selection (needed when pressing 'enter' in editable span).
        const selection = window.getSelection();
        selection?.removeAllRanges();
    }
    #onRemoveOverrideClick() {
        if (!this.#header) {
            return;
        }
        const headerValueElement = this.#shadow.querySelector('.header-value devtools-editable-span');
        if (this.#header.originalValue) {
            headerValueElement.value = this.#header?.originalValue;
        }
        this.dispatchEvent(new HeaderRemovedEvent(this.#header.name, this.#header.value || ''));
    }
    #onKeyDown(event) {
        const keyboardEvent = event;
        const target = event.target;
        if (keyboardEvent.key === 'Escape') {
            event.consume();
            if (target.matches('.header-name devtools-editable-span')) {
                target.value = this.#header?.name || '';
                this.#onHeaderNameEdit(event);
            }
            else if (target.matches('.header-value devtools-editable-span')) {
                target.value = this.#header?.value || '';
                this.#onHeaderValueEdit(event);
                if (this.#header?.originalName) {
                    const headerNameElement = this.#shadow.querySelector('.header-name devtools-editable-span');
                    headerNameElement.value = this.#header.originalName;
                    this.#header.originalName = '';
                    headerNameElement.dispatchEvent(new Event('input'));
                    headerNameElement.focus();
                    return;
                }
            }
            target.blur();
        }
    }
    #onHeaderNameEdit(event) {
        const editable = event.target;
        const isValidName = isValidHeaderName(editable.value);
        if (this.#isValidHeaderName !== isValidName) {
            this.#isValidHeaderName = isValidName;
            void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__.ScheduledRender.scheduleRender(this, this.#boundRender);
        }
    }
    #onHeaderValueEdit(event) {
        const editable = event.target;
        const isEdited = this.#header?.originalValue !== undefined && !compareHeaders(this.#header?.originalValue || '', editable.value);
        if (this.#isHeaderValueEdited !== isEdited) {
            this.#isHeaderValueEdited = isEdited;
            if (this.#header) {
                this.#header.highlight = false;
            }
            void _ui_components_helpers_helpers_js__WEBPACK_IMPORTED_MODULE_6__.ScheduledRender.scheduleRender(this, this.#boundRender);
        }
    }
    #onHeaderNamePaste(event) {
        if (!event.clipboardData) {
            return;
        }
        const nameEl = event.target;
        const clipboardText = event.clipboardData.getData('text/plain') || '';
        const separatorPosition = clipboardText.indexOf(':');
        if (separatorPosition < 1) {
            // Not processing further either case 'abc' or ':abc'
            nameEl.value = clipboardText;
            event.preventDefault();
            nameEl.dispatchEvent(new Event('input', { bubbles: true }));
            return;
        }
        if (this.#header) {
            this.#header.originalName = this.#header.name;
        }
        const headerValue = clipboardText.substring(separatorPosition + 1, clipboardText.length).trim();
        const headerName = clipboardText.substring(0, separatorPosition);
        nameEl.value = headerName;
        nameEl.dispatchEvent(new Event('input'));
        const valueEL = this.#shadow.querySelector('.header-value devtools-editable-span');
        if (valueEL) {
            valueEL.focus();
            valueEL.value = headerValue;
            valueEL.dispatchEvent(new Event('input'));
        }
        event.preventDefault();
    }
}
customElements.define('devtools-header-section-row', HeaderSectionRow);
//# sourceMappingURL=HeaderSectionRow.js.map

/***/ }),

/***/ "./third_party/chromium/client-variations/client-variations.js":
/*!*********************************************************************!*\
  !*** ./third_party/chromium/client-variations/client-variations.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatClientVariations: () => (/* reexport safe */ _ClientVariations_js__WEBPACK_IMPORTED_MODULE_0__.formatClientVariations),
/* harmony export */   parseClientVariations: () => (/* reexport safe */ _ClientVariations_js__WEBPACK_IMPORTED_MODULE_0__.parseClientVariations)
/* harmony export */ });
/* harmony import */ var _ClientVariations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientVariations.js */ "./third_party/chromium/client-variations/ClientVariations.js");
// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//# sourceMappingURL=client-variations.js.map

/***/ })

}]);